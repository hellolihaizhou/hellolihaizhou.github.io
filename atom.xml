<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李海洲的成长之路</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lihaizhou.top/"/>
  <updated>2018-05-17T03:12:04.346Z</updated>
  <id>http://lihaizhou.top/</id>
  
  <author>
    <name>steven li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个无法开机问题的分析流程</title>
    <link href="http://lihaizhou.top/2018/05/17/%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    <id>http://lihaizhou.top/2018/05/17/一个无法开机问题的分析流程/</id>
    <published>2018-05-17T02:42:27.000Z</published>
    <updated>2018-05-17T03:12:04.346Z</updated>
    
    <content type="html"><![CDATA[<p>问题平台<br><code>Android7.1.1</code>  <code>MT6739</code></p><p>问题现象<br><code>走完一部分开机动画后停留在recovery界面，无法进入系统</code></p><p>初步分析:<br>开机后进入<code>recovery</code> ，以往经验来看猜测是重要进程启动异常，可能被连续被kill</p><p><strong>Step1 日志分析</strong><br>需要的日志：eng版本<code>uart log</code>+<code>main log</code>(如果已经进入Android的话)+<code>data/aee_exp</code>下的db文件(如果有db生成的话)</p><p><strong>Step1.1  抓取串口日志</strong><br>首先说下串口日志的获取方式:<br>串口线中的白色接<code>TX</code>，黑色线接地，我这里是在windows下抓取，使用了一个<code>SSCOM</code>的工具，<code>MTK</code>平台上波特率需要选择<code>921600</code>, 这个工具使用之前需要安装<code>usb to serial</code>驱动，不然会出现识别不了设备的情况<br>这里需要说明的是需要使用eng版本获取日志，如果是user版本的话，需要做一些额外工作</p><p><strong>Step1.2 分析串口日志</strong><br>首先先看下系统走到了哪一步，关键步骤都是会有对应的日志输出，从过往的项目以及分析经验，已形成了一套既定的分析流程<br>这里说下分析串口日志中的一些关键字如下  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="string">"Preparing for EL3 exit to normal world, LK"</span></span><br><span class="line">   如果串口log里面没有走到这里，说明在PL就卡住了，这句表示进入LK</span><br><span class="line"><span class="number">2</span>、<span class="string">"lk finished --&gt; jump to linux kernel"</span></span><br><span class="line">   如果串口log里面没有走到这里，但是上面走到了，说明在lk卡住了，这句表示进入kernel</span><br><span class="line"><span class="number">3</span>、<span class="string">"Kernel_init_done"</span></span><br><span class="line">   这句表示kernel初始化完成了，正准备启动init进程，如果这就没有走到：请搜索关键字initcall，</span><br><span class="line">   initcall是顺序执行例如module_init注册的init函数，看看卡在哪个call back上</span><br><span class="line"><span class="number">4</span>、<span class="string">"BOOTPROF"</span></span><br><span class="line">   这是开机过程中，每走过一个重要阶段都会打印的标志，例如上面Kernel_init_done这一句就会打上这个标志</span><br><span class="line"><span class="number">5</span>、<span class="string">"init: init first stage started"</span></span><br><span class="line">   这句表示init进程正常起来执行</span><br><span class="line"><span class="number">6</span>、<span class="string">"fs_mgr"</span> 和<span class="string">"e2fsck"</span></span><br><span class="line">   这里标志是在检查和mount 文件系统，如果失败会有如下log：fs_mgr_mount_all returned an error fs_mgr_mount_all returned unexpected error <span class="number">255</span></span><br><span class="line"><span class="number">7</span>、<span class="string">"zygote"</span></span><br><span class="line">   Starting service <span class="string">'zygote'</span>：这里表示要启动zygote,如果没有这一句表示zygote还没启动，则要检查之前的initrc执行情况，文件系统mount情况</span><br><span class="line"><span class="number">8</span>、<span class="string">"SysServerInit_START"</span></span><br><span class="line">   启动system_server</span><br><span class="line"><span class="number">9</span>、<span class="string">"system_server"</span></span><br><span class="line">   这里表示system_server有起来</span><br><span class="line"><span class="number">10</span>、<span class="string">"BOOT_Animation:END"</span></span><br><span class="line">   表示开机动画正常结束，进入安卓</span><br></pre></td></tr></table></figure><p>我们的这份日志中1-9均有打印，说明已经进入了Android部分，在init进程起来后，如下片段  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[  <span class="number">29.560029</span>] &lt;<span class="number">1</span>&gt;.(<span class="number">1</span>)[<span class="number">1</span>:init]init: Service <span class="string">'healthd'</span> (pid <span class="number">310</span>) killed by signal <span class="number">11</span></span><br></pre></td></tr></table></figure><p>后面紧跟着很多关键进程均打出sig 9即被kill掉<br>关于linux signal信号表对应关系如下(只列出部分)  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SIGHUP      <span class="number">1</span>           Term    终端的挂断或进程死亡</span><br><span class="line">SIGINT      <span class="number">2</span>           Term    来自键盘的中断信号</span><br><span class="line">SIGQUIT     <span class="number">3</span>           Core    来自键盘的离开信号</span><br><span class="line">SIGILL      <span class="number">4</span>           Core    非法指令</span><br><span class="line">SIGABRT     <span class="number">6</span>           Core    来自abort的异常信号</span><br><span class="line">SIGFPE      <span class="number">8</span>           Core    浮点例外</span><br><span class="line">SIGKILL     <span class="number">9</span>           Term    杀死</span><br><span class="line">SIGSEGV     <span class="number">11</span>          Core    段非法错误(内存引用无效)</span><br></pre></td></tr></table></figure><p>这里大概明白问题出在了<code>healthd</code>上，这是与电量相关的进程，在user space中</p><p>对于是否需要抓取logcat日志，可以看看串口日志中是否有如下片段  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Starting service <span class="string">'zygote'</span></span><br></pre></td></tr></table></figure><p>这一步代表<code>zygote</code>起来了，这时候就必须要抓取logcat进一步分析，我们这笔问题中该日志片段有打印出来，所以需要抓取logcat进一步分析</p><p><strong>Step1.3 分析logcat日志</strong><br>找到如下片段，说明<code>data/aee_exp</code>下面也有<code>db</code>文件生成了  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-02</span> <span class="number">04</span>:<span class="number">52</span>:<span class="number">48.578</span> I/AEE_AED (  <span class="number">350</span>): Revision: <span class="string">'0'</span></span><br><span class="line"><span class="number">05</span><span class="number">-02</span> <span class="number">04</span>:<span class="number">52</span>:<span class="number">48.578</span> I/AEE_AED (  <span class="number">350</span>): ABI: <span class="string">'arm'</span></span><br><span class="line"><span class="number">05</span><span class="number">-02</span> <span class="number">04</span>:<span class="number">52</span>:<span class="number">48.579</span> I/AEE_AED (  <span class="number">350</span>): pid: <span class="number">310</span>, <span class="attr">tid</span>: <span class="number">310</span>, <span class="attr">name</span>: healthd  &gt;&gt;&gt; <span class="regexp">/sbin/</span>healthd &lt;&lt;&lt;</span><br><span class="line">05-02 04:52:48.580 I/AEE_AED (  350): signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x2</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    r0 00000002  r1 00000002  r2 0000089c  r3 00000006</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    r4 ffffffff  r5 00000001  r6 00000000  r7 00000002</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    r8 becc68bc  r9 0008819e  sl ffffffff  fp becc6680</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    ip 00000002  sp becc6678  lr 0005d494  pc 0005e16c  cpsr 20070030</span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350): </span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350): backtrace:</span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350):    #00 pc 0005e16c  /sbin/healthd</span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350):    #01 pc 0005d490  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #02 pc 00056c04  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #03 pc 00064ef4  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #04 pc 00027e00  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #05 pc 0000b291  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #06 pc 0000b10d  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #07 pc 000088c9  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #08 pc 00008d73  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #09 pc 00008c3f  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #10 pc 00008afb  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #11 pc 0005e055  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #12 pc 000086c8  /sbin/healthd</span><br></pre></td></tr></table></figure><p>这里出现了段错误，这个时候需要拿出看家小工具<code>addr2line</code>来定位到代码出错的位置，这里顺便说下<code>Addr2line</code>的作用  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Addr2line （它是标准的 GNU Binutils 中的一部分）是一个可以将指令的地址和可执行映像转换成文件名、函数名和源代码行数的工具。这种功能对于将跟踪地址转换成更有意义的内容来说简直是太棒了</span><br></pre></td></tr></table></figure><p>我这里的addr2line使用的是代码工程中的，代码工程下有很多addr2line，这里就随便用了一个目录下的addr2line，另外分析还需要<code>out/target/product/XXX/symbols/sbin/healthd</code>文件，注意这里的<code>healthd</code>文件必须和日志中是同一套代码，否则可能分析出来的代码位置会有偏差</p><p>使用命令如下:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lihaizhou@ubuntu:~<span class="regexp">/Code/</span>sw710/<span class="number">6739</span>$ <span class="string">'/home/lihaizhou/Code/sw710/6739/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.8/bin/x86_64-linux-addr2line'</span> -e <span class="string">'/home/lihaizhou/Code/sw710/6739/out/target/product/lcsh6739_35_sw730/symbols/sbin/healthd'</span> <span class="number">0000</span>b291</span><br></pre></td></tr></table></figure><p>得到如下结果  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/cwd/system/core/healthd/BatteryMonitor.cpp:<span class="number">861</span></span><br></pre></td></tr></table></figure><p>进到<code>BatteryMonitor.cpp</code>第861行，是一句最近添加的日志  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KLOG_INFO(LOG_TAG, <span class="string">"BatteryMonitor cmd_send props.batteryStatus '%s'\n"</span>, props.batteryStatus);</span><br></pre></td></tr></table></figure><p><strong>Step2 问题解决</strong><br>仔细查看了这行日志, 发现是类型写错了，<code>props.batteryStatus</code>是整型，这里使用了字串类型打印，当然会报错了<br>ok，将类型修改为整型，重新编译烧录img到机器中，开机正常了</p><p><strong>小结</strong><br>对系统启动流程以及<code>addr2line</code>的使用比较熟悉的话，这笔问题分析还是比较容易的，ok，这笔问题分析到此为止</p><p>Have a good day！</p><font color="#000000" size="3" face="楷体"><br>另:<br>关于串口日志MTK online有相关FAQ可以参考<br>FAQ15320 不同模式下如何保持uart log一直打开<br><a href="http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ15320" target="_blank" rel="noopener">http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ15320</a><br>FAQ03891如何在User版本开启串口(Uart),抓取上层Log,开启输入控制台<br><a href="http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ03891" target="_blank" rel="noopener">http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ03891</a></font><hr><font color="#000000" size="2" face="楷体">公司午休时间，电脑前，黑眼圈，脑袋一片空白，肚子有点饿，等外卖</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题平台&lt;br&gt;&lt;code&gt;Android7.1.1&lt;/code&gt;  &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题现象&lt;br&gt;&lt;code&gt;走完一部分开机动画后停留在recovery界面，无法进入系统&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;初步分析:&lt;br&gt;开机后进入&lt;c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于开源框架SlidingUpPanel二次开发</title>
    <link href="http://lihaizhou.top/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    <id>http://lihaizhou.top/2018/05/14/基于开源框架SlidingUpPanel二次开发/</id>
    <published>2018-05-14T13:52:57.000Z</published>
    <updated>2018-05-15T02:26:16.370Z</updated>
    
    <content type="html"><![CDATA[<p><strong>项目需求</strong><br>写一个SystemUI，默认是隐藏，手指在Launcher界面顶部往下滑动时，SystemUI显示并随着手指滑动高度不断变化，直到往下铺满屏幕</p><p><strong>初步分析</strong><br>最初的想法是在原生SystemUI基础上进行修改，在看了原生SystemUI代码后，word天，原生SystemUI代码量十分庞大且代码结构比较复杂，很多地方耦合比较高，初步估计厘清需要耗费的时间会比较长。于是有了单独写一个的想法，这样代码比较简洁，以后项目上也方便复用。</p><p><strong>设计框架</strong><br>下拉面板显然需要一个自定义布局，这个自定义View高度能够手指滑动变化，ok，理论上并不复杂<br>github兜一圈，看看有没有类似的框架，茫茫大海中找到了一个<code>SlidingUpPanel</code>的开源框架<br>github主页地址: <a href="https://github.com/umano/AndroidSlidingUpPanel" target="_blank" rel="noopener">https://github.com/umano/AndroidSlidingUpPanel</a><br>确认过眼神，是需要找的框架，看了下介绍是一个能够向上滑动的时候往上飞出一个显示区域的控件，star较多且仍在维护，是个靠谱青年，so，就在此基础上进行修改吧，就这么愉快的决定了。</p><p><strong>源码效果图</strong></p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E6%95%88%E6%9E%9C%E5%9B%BE.jpg?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br>最开始下面有一个栏目布局，随着手指拖动高度不断变化直到往上完全铺满屏幕</p><p><strong>Step1：研究框架源码</strong><br>源码中有三支主要文件，如下</p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br>其中核心文件是<code>SlidingUpPanelLayout.java</code>，对应的是面板的UI界面，继承自ViewGroup，整支文件有1490行之多，好在代码结构清晰明了，阅读起来比较顺利，后面的修改主要针对<code>SlidingUpPanelLayout</code>这支文件以及布局文件</p><p><strong>Step2：实做部分</strong><br>在阅读了源码流程之后，开始撸起袖子干活，主要的修改有下面一些点</p><p><strong>面板默认状态修改</strong><br>PanelState提供的面板五种不同状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PanelState &#123;</span><br><span class="line">     EXPANDED, <span class="comment">//全部展开状态</span></span><br><span class="line">     COLLAPSED, <span class="comment">//默认状态</span></span><br><span class="line">     ANCHORED, <span class="comment">//锚点</span></span><br><span class="line">     HIDDEN, <span class="comment">//隐藏状态</span></span><br><span class="line">     DRAGGING <span class="comment">//拖动状态</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们的systemUI样式只需要其中的<code>EXPANDED</code>，<code>HIDDEN</code>，<code>DRAGGING</code>这三种状态，其他两种状态相关牵扯到的代码都可以移除<br>源码默认的状态是<code>COLLAPSED</code>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Default initial state for the component</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> PanelState DEFAULT_SLIDE_STATE = PanelState.COLLAPSED;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> PanelState mSlideState = DEFAULT_SLIDE_STATE;</span><br></pre></td></tr></table></figure><p>构造函数中从配置值获取了默认状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSlideState = PanelState.values()[ta.getInt(R.styleable.SlidingUpPanelLayout_umanoInitialState, DEFAULT_SLIDE_STATE.ordinal())];</span><br></pre></td></tr></table></figure><p>后面<code>onMeasure</code>,<code>onLayout</code>将根据<code>mSlideState</code>得值来绘制初始化界面</p><p>我们systemUI初始化界面默认需要是<code>HIDDEN</code>状态，故后面更改xml中的配置值调整为hidden即可</p><p><strong>去掉一栏布局部分(红色部分)</strong></p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E5%8E%BB%E6%8E%89%E5%BA%95%E9%83%A8%E9%BB%98%E8%AE%A4%E9%AB%98%E5%BA%A6.jpg?raw=true" align="left" style=" width:200px;height:200 px"><br><br><br><br><br><br><br><br><br><br><br></p><p>对应<code>PanelHeight</code>这个的值，这个值在构造函数中会去xml中获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mPanelHeight = ta.getDimensionPixelSize(R.styleable.SystemUiPanel_umanoPanelHeight, -<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>将布局文件中SlidingUpPanelLayout节点下的umanoPanelHeight样式值改为0dp即可  </p><p><strong>默认划出面板方向</strong><br>github上给的demo例子里，是将<code>SlidingUpPanelLayout</code>设置<code>android:gravity=&quot;bottom&quot;</code>，改为<code>top</code>即可</p><p><strong>添加手势事件</strong><br>源码中面板默认不是隐藏，有一定高度，根据点击事件响应展开还是隐藏，我们的systemUI中面板默认是完全隐藏状态，所以就没有了可见的view来响应事件，需要依据手指在顶部滑动的方向以及滑动距离来判断是否打开面板<br><code>SlidingUpPanelLayout</code>这支文件中添加手势滑动事件判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLauncherTouchEvent</span><span class="params">(MotionEvent ev, <span class="keyword">boolean</span> result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                pointDownY1 = ev.getY();</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                pointDownY2 = ev.getY();</span><br><span class="line">                <span class="keyword">if</span> (pointDownY2 - pointDownY1 &gt; FLIP_DISTANCE &amp;&amp; pointDownY1 &lt; FLIP_DISTANCE) &#123;</span><br><span class="line">                    setPanelState(PanelState.EXPANDED);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>隐藏状态下无法划出面板</strong><br>源码设计中对于隐藏状态是无法划出面板的  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//省略部分代码</span></span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">                mIsUnableToDrag = <span class="keyword">false</span>;</span><br><span class="line">                mInitialMotionX = x;</span><br><span class="line">                mInitialMotionY = y;</span><br><span class="line">                <span class="keyword">if</span> (!isViewUnder(mDragView, (<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y)) &#123;</span><br><span class="line">                    mDragHelper.cancel();</span><br><span class="line">                    mIsUnableToDrag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将上面代码中if代码块全部注释掉<br>并将如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTouchEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> mIsTouchEnabled &amp;&amp; mSlideableView != <span class="keyword">null</span> &amp;&amp; mSlideState != PanelState.HIDDEN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉<code>mSlideState != PanelState.HIDDEN</code>判断条件<br>因为源码设计是当面板状态为hidden时，isTouchEnabled返回false，而setDragView中滑动面板前会先判断isTouchEnabled值，如果为false，直接return  </p><p><strong>存在概率性卡在半拉状态</strong><br>项目上线后测试反馈过一个问题，测试步骤比较风骚，手指按住不放下拉到一半左右位置快速转过一个弧度上滑并松开，概率性出现面板卡在一个点上  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDragStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (mDragHelper != <span class="keyword">null</span> &amp;&amp; mDragHelper.getViewDragState() == ViewDragHelper.STATE_IDLE) &#123;</span><br><span class="line">         mSlideOffset = computeSlideOffset(mSlideableView.getTop());</span><br><span class="line">         <span class="comment">//applyParallaxForCurrentSlideOffset();</span></span><br><span class="line">         <span class="keyword">if</span> (mSlideOffset == <span class="number">1</span>) &#123;</span><br><span class="line">             updateObscuredViewVisibility();</span><br><span class="line">             setPanelStateInternal(PanelState.EXPANDED);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSlideOffset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">             setPanelStateInternal(PanelState.HIDDEN);</span><br><span class="line">             mSlideableView.setVisibility(View.INVISIBLE);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSlideOffset == <span class="number">0</span>) &#123;</span><br><span class="line">             setPanelStateInternal(PanelState.HIDDEN);</span><br><span class="line">             mSlideableView.setVisibility(View.INVISIBLE);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             setPanelStateInternal(PanelState.ANCHORED);</span><br><span class="line">             mSlideableView.setVisibility(View.INVISIBLE);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>问题复现时，<code>mSlideOffset</code>大于0且小于1，此时会走到setPanelStateInternal(PanelState.ANCHORED);即将面板抛锚到固定点上，界面上表现为卡在一个半拉的状态，这显然不是我们的systemUI需要的，将此处更改为setPanelStateInternal(PanelState.HIDDEN);</p><p><strong>核心API</strong><br>addPanelSlideListener(面板状态的监测)其中复写两个方法:onPanelSlide(获取到偏移量)和onPanelStateChanged(获取面板状态)<br>界面层主要用到了这个方法</p><p><strong>移除无关代码</strong><br>如下修改均针对SlidingUpPanelLayout这支文件<br>1.将setDragView中将对mDragView的点击事件相关逻辑全部移除<br>2.构造函数中将setgravity相关代码移除<br>3.移除shadow所有的相关的代码<br>4.移除ANCHORED相关的代码逻辑，因为我们的systemUI并不要在下拉过程中卡在某一高度<br>5.移除drawChild以及draw(Canvas c)代码</p><p><strong>布局文件</strong><br>如下是针对我们的项目定制修改后的布局(项目名相关打了马赛克，我也不知道为啥这么做，反正就是这么做了) </p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E5%B8%83%E5%B1%80%E6%96%87%E4%BB%B6.png?raw=true" align="left" style=" width:500px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>  </p><p>id为dragView的内容代表滑动的内容，id为viewpager代表的是面板隐藏后的界面内容即不随手指滑动的内容  </p><p>注:<br>SlidingUpPanelLayout为布局根元素，请确保它有且只有两个子view，第一个是主要布局，即固定不随手指滑动的区域，第二个滑动面板布局<br>如果子VIew不为2，则会抛出异常  </p><pre><code class="java"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>{    <span class="comment">//省略部分代码</span>     <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();     <span class="keyword">if</span> (childCount != <span class="number">2</span>) {         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sliding up panel layout must have exactly 2 children!"</span>);     }    <span class="comment">//省略部分代码</span> }</code></pre><p>起初遇到这个异常，看了源码才知道有这个限制，不过可以修改源码突破这个这个限制，有源码了不起嘛？嗨呀嗨呀，十分了不起，有源码真的可以为所欲为，哈哈哈</p><hr><font color="#000000" size="2" face="楷体">住所，晚上，汗衫，电脑前，听着歌，胖橘在门外叫</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;项目需求&lt;/strong&gt;&lt;br&gt;写一个SystemUI，默认是隐藏，手指在Launcher界面顶部往下滑动时，SystemUI显示并随着手指滑动高度不断变化，直到往下铺满屏幕&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初步分析&lt;/strong&gt;&lt;br&gt;最初的想法是在原
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>低内存引发的一点思考</title>
    <link href="http://lihaizhou.top/2018/05/13/%E4%BD%8E%E5%86%85%E5%AD%98%E5%BC%95%E5%8F%91%E7%9A%84LowMemoryKiller%E6%80%9D%E8%80%83/"/>
    <id>http://lihaizhou.top/2018/05/13/低内存引发的LowMemoryKiller思考/</id>
    <published>2018-05-13T12:37:55.000Z</published>
    <updated>2018-05-13T13:46:38.321Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题平台</strong><br><code>Android 7.1.1</code>  <code>MT6739</code></p><p><strong>问题现象</strong><br><code>需要常驻的进程经常被kill，界面操作不流畅</code></p><p><strong>日志分析</strong><br>鉴于当前的手表机器内存512M，机器运行一段时间后，界面不流畅，第一时间怀疑是此时的内存比较吃紧，LMK频繁被触发kill进程，LMK的工作本身比较费时间，会拖慢系统运行速度。查看kernel日志后，发现有很多LMK触发的信息，ok，果然如猜想一样</p><p><strong>LMK机制简介</strong><br>在系统内存不足的情况下，系统开始依据自身的一套进程回收机制来判断要kill掉哪些进程，以腾出内存来供给需要的app。<br>总的来说，进程的<code>oom_adj</code>越大，表示此进程优先级越低，越容易被杀回收；越小，表示进程优先级越高，越不容易被杀回收，kill进程是通过发送SIGKILL信息。这套杀进程回收内存的机制就叫<code>Low Memory Killer</code> ，简称<code>LMK</code>，它是基于Linux内核的<code>OOM Killer</code>机制诞生<br>如果LMK都无法释放出足够的内存空间，那么当为新的进程分配应用程序时将发生<code>Out of Memory</code>异常，这时候<code>OOM_killer</code>开始工作，<code>OOM_killer</code>会在系统内存耗尽的情况下，启用自己算法有选择性的kill 掉一些进程</p><p><strong>常见的提升应用存活率</strong><br>这种问题老生常谈，网上资料一抓一大把，其中不乏各种旁门左道，诸如一像素，互相唤醒，防杀死重启服务之类。<br>这些方法不一定通用，是否奏效依赖Android版本以及手机厂商。<br>比较常规的做法是标记为系统应用，相比于三方应用来讲，系统应用的优先级高一些，当然这个做法前提是有条件且需要。<br>另外一种常见的方式是加入<code>android:persistent=&quot;true&quot;</code>属性，这种方式只对系统应用奏效，这样做的目的是使进程持续占据 Memory不被杀死，现在的512内存手表项目中的Launcher里使用了，该种方式的使用务必谨慎，切记不可滥用<br>还有一个就是降低应用的占用内存，LMK工作时往往会先挑肥的来kill</p><p><strong>如何判断某个应用的进程的oom_adj</strong><br>两个shell命令即可<br>1.<code>ps | grep PackageName</code><br>获取到指定应用的进程ID<br>2.<code>cat /proc/</code><br>进程ID/oom_adj获取到<code>oom_adj</code>数值</p><p><strong>如何判别LMK是否太频繁呢</strong><br>这个其实没有什么标准，从过往的情况来看，看<code>kernel日志</code>中LMK触发的次数，1分钟超过20次就是非常多了</p><p><strong>LMK kill进程顺序的判别依据</strong><br>根据adj的值以及占用内存值<br>现在不少程序会做成进程组形式，以前的项目上有遇到过，一个进程被kill了，另一个好兄弟再把它唤起来，这种互相唤醒的好基友方式会导致RAM无法真正释放，释放的 RAM 马上被吃掉。</p><p><strong>如何修改系统层级的LMK阈值</strong><br>这种修改做法比较少见，之前项目有过一次调整了minfree的值<br>LMK的阈值分两个数组，一个是adj数组，描述process对应的oom_adj，另外一个是minfree数组，描述process所对应的memory的阈值<br>上层可以直接通过读写:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/sys/<span class="keyword">module</span>/lowmemorykiller/parameters/adj</span><br><span class="line">/sys/<span class="keyword">module</span>/lowmemorykiller/parameters/minfree</span><br></pre></td></tr></table></figure></p><p>来进行调整，<code>minfree</code>以KB 为单位<br>当AMS起来后，将根据屏幕分辨率以及内存大小通过调用<code>updateOomLevel</code>方法(<font color="#000000" size="2" face="楷体">Frameworks/base/services/java/com/android/server/am/ProcessList.java</font>)来调整默认的LMK的阈值</p><p><strong>分析LMK问题的常用shell命令</strong><br>如下是分析LMK问题时常用的命令，看名字比较好理解就不一一解释了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps -t &gt; ps.txt</span><br><span class="line">adb shell procrank -s &gt; procrank.txt  </span><br><span class="line">adb shell cat /proc/sys/vm/swappiness  </span><br><span class="line">adb shell cat /proc/meminfo &gt; meminfo.txt</span><br><span class="line">adb shell cat /proc/buddyinfo &gt; buddyinfo.txt</span><br><span class="line">adb shell dumpsys meminfo &gt; dumpsysmemoryinfo.txt</span><br><span class="line">adb shell cat /sys/<span class="keyword">module</span>/lowmemorykiller/parameters/adj &gt; adj.txt</span><br><span class="line">adb shell cat /sys/<span class="keyword">module</span>/lowmemorykiller/parameters/minfree &gt; minfree.txt</span><br></pre></td></tr></table></figure></p><p><strong>小结</strong><br>优先从应用自身角度触发，尽可能降低应用的占用内存，不可一上来就搞一些旁门左道，慎重调整进程的优先级！切记切记<br>像我现在遇到的这个512内存的项目，很多不需要常驻的进程也将自己的优先级设置的很高，打印出来的adj清一色都很低，几乎和systemUI持平，这点实在太不可取，这导致了LMK触发时有些该杀的进程没有kill，反而一些很重要的进程被kill<br>原则上不是用户可以感知的进程没必要将优先级拉的很高，除非是慎重考虑再三觉得十分重要的进程，可以考虑拉高优先级</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，汗衫，顶着酷似三胖的发型</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题平台&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Android 7.1.1&lt;/code&gt;  &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题现象&lt;/strong&gt;&lt;br&gt;&lt;code&gt;需要常驻的进程经常被kill，界面操作不流畅&lt;/co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个定屏重启的问题分析</title>
    <link href="http://lihaizhou.top/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://lihaizhou.top/2018/05/11/一个定屏重启的问题分析/</id>
    <published>2018-05-11T09:26:17.000Z</published>
    <updated>2018-05-13T13:12:30.008Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题平台</strong><br><code>Android 7.1.1</code>    <code>MT6739</code></p><p><strong>问题现象</strong><br><code>界面定屏并重启</code></p><p><strong>初步分析</strong><br>拿到完整的MTK日志，该问题是小米内测发现，了解到当时测试人员的操作就是随便划着划着就卡住了然后重启了，ok，还是乖乖看日志吧<br>日志目录如下：<br><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E6%97%A5%E5%BF%97%E7%9B%AE%E5%BD%95.png" align="left" style=" width:300px;height:50 px"><br><br><br><br>看到了aee_exp_backup这个文件夹，一切尽在意料之中，进去看看<br><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/db%E6%96%87%E4%BB%B6.png" align="left" style=" width:300px;height:23 px"><br><br></p><p align="left">是一个JE的问题导致的重启，猜测是systemServer挂了</p>  <p><strong>Step1：分析日志</strong><br>拿出看家小工具GAT，对于db文件的分析离不开GAT，用GAT解析下来究竟发生了what让我们的小机器重启了呢，解析后文件目录如下</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/db%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E7%9B%AE%E5%BD%95.png" align="left" style=" width:900px;height:500 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>(这里将产品名称马赛克一下，我也不知道为什么这么做，反正就是这么做了，哈哈哈（￣︶￣）↗)</p><p>这里可以看到果然是systemServer进程重启了，发生问题点在systemServer进程中，接着看原因，是个数组越界异常，下标为1，数组长度为2(见上图红色框)，唉？没越界啊，为什么会报越界呢？</p><p>分析具体的堆栈代码之前，先看下日志判断下死机发生时用户当时具体做了些啥  </p><p>首先看下main日志，找到IndexOutOfBoundsException发生时间点<code>09:43:33.818111</code><br>测试人员使用的是user版本，user版本的kernel日志不会打出每行时间戳，userdebug以及eng版本的kernel日志会有具体的时间戳，所以分析user版本的kernel日志会稍稍麻烦一点，通过搜索关键字”UTC”来查看时间戳，这份日志中UTC时间戳每隔二十秒打印<br>异常发生时间点09:43:33.818111，所以是在如下两行之间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Line <span class="number">176236</span>: &lt;7&gt;[ 1762.546722]  (0)[249:wdtk-0][thread:249][RT:1762546695292] 2018-04-26 01:43:27.105173 UTC;android time 2018-04-26 09:43:27.105173</span><br><span class="line">Line 179752: &lt;7&gt;[ 1782.556698]  (0)[249:wdtk-0][thread:249][RT:1782556690801] 2018-04-26 01:43:47.115173 UTC;android time 2018-04-26 09:43:47.115173</span><br></pre></td></tr></table></figure></p><p><code>9.43.27</code>这行往下数6s左右，大概在<code>178800</code>行附近，ok，去这个行数附近看看<br>在<code>178891</code>行看到了如下信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">7</span>&gt;[ <span class="number">1777.097776</span>] -(<span class="number">0</span>)[<span class="number">1085</span>:android.ui][signal][<span class="number">1085</span>:android.ui]send death sig <span class="number">9</span> to[<span class="number">1068</span>:system_server:R]</span><br></pre></td></tr></table></figure></p><p>sig 9代表SIGNAL_KILL，这里杀掉了system_server进程，在此上面有大量连续的手指触摸日志信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.923619</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: finger dwon [<span class="number">00</span>] x = <span class="number">302</span>, y = <span class="number">148</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.923695</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler before_event  foubin1 irq_flag = <span class="number">8490</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.923712</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler after_event  foubin1 irq_flag = <span class="number">8491</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.925815</span>]  (<span class="number">1</span>)[<span class="number">4051</span>:kworker/u8:<span class="number">0</span>][DISP][xun] _ovl_fence_release_callback </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.933972</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler before_disable_irq foubin1 irq_flag = <span class="number">8491</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.934001</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler after_disable_irq  foubin1 irq_flag = <span class="number">8492</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.934944</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: touch_info.status=<span class="number">0x904</span></span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.935112</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: finger dwon [<span class="number">00</span>] x = <span class="number">303</span>, y = <span class="number">143</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.935157</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler before_event  foubin1 irq_flag = <span class="number">8492</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.935169</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler after_event  foubin1 irq_flag = <span class="number">8493</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.938970</span>]  (<span class="number">0</span>)[<span class="number">412</span>:disp_queue_P0][DISP]primary_display_trigger_nolock+++blocking=<span class="number">0</span> ,dst_mode=<span class="number">0</span>,dispmode = <span class="number">0</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.939000</span>]  (<span class="number">0</span>)[<span class="number">412</span>:disp_queue_P0][DISP]primary_display_trigger_nolock pgc-&gt;state = <span class="number">240</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.939014</span>]  (<span class="number">0</span>)[<span class="number">412</span>:disp_queue_P0][DISP]primary_display_trigger_nolock pgc-&gt;session_mode = <span class="number">1</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.942542</span>]  (<span class="number">0</span>)[<span class="number">4051</span>:kworker/u8:<span class="number">0</span>][DISP][xun] _ovl_fence_release_callback </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.946983</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler before_disable_irq foubin1 irq_flag = <span class="number">8493</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.947013</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler after_disable_irq  foubin1 irq_flag = <span class="number">8494</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.947971</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: touch_info.status=<span class="number">0x9</span></span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.948138</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: finger [<span class="number">00</span>] up <span class="number">11111</span></span><br></pre></td></tr></table></figure></p><p>可见当时测试人员与屏幕一直在互动，符合测试人员所说的当时在滑动屏幕</p><p><strong>Step2：跟踪源码流程</strong><br>看具体的堆栈信息</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E5%85%B7%E4%BD%93%E5%A0%86%E6%A0%88.png" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br></p><p>emmm…没有看到具体的应用堆栈信息，都是framework里的堆栈，其实看到这里心里大概有数了，应该不是应用的问题，而是系统层面的问题</p><p>好的，撸起袖子打开源码，开始看具体的代码</p><font color="#000000" size="2" face="楷体">libcore/ojluni/src/main/java/java/util/ArrayList.java</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里抛出了越界异常，接着往下看</p><font color="#000000" size="2" face="楷体">/frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find the task whose outside touch area (for resizing) (x, y) falls within.</span></span><br><span class="line"><span class="comment"> * Returns null if the touch doesn't fall into a resizing area.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Task <span class="title">findTaskForControlPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> delta = mService.dipToPixel(RESIZE_HANDLE_WIDTH_IN_DP, mDisplayMetrics);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> stackNdx = mStacks.size() - <span class="number">1</span>; stackNdx &gt;= <span class="number">0</span>; --stackNdx) &#123;</span><br><span class="line">        TaskStack stack = mStacks.get(stackNdx);</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里出现了异常，理论上不会出现越界的问题，不过如果是多线程访问的情况，鉴于这里并没有同步机制，<br>mStacks又是公用的，很多地方会对其增删修改，这样的话就难以保证不会出现异常了</p><p><strong>问题小结：</strong><br>这个问题看起来是谷歌的bug，避免这种情况可以选择加同步机制。同步机制难免会牺牲性能，不过也增强了代码的稳定性<br>考虑到这个问题至今只是出现了一次，后续没有再出现过，选择忽略不做修改</p><hr><font color="#000000" size="2" face="楷体">本文写于公司，电脑前，慵懒的午后</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题平台&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Android 7.1.1&lt;/code&gt;    &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题现象&lt;/strong&gt;&lt;br&gt;&lt;code&gt;界面定屏并重启&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>忧虑下的感悟</title>
    <link href="http://lihaizhou.top/2018/05/04/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0--%E9%A1%BF%E6%82%9F/"/>
    <id>http://lihaizhou.top/2018/05/04/第一篇文章--顿悟/</id>
    <published>2018-05-04T00:30:00.000Z</published>
    <updated>2018-05-13T13:15:18.161Z</updated>
    
    <content type="html"><![CDATA[<p>这是该网址写的第一篇文章，想写点东西上来，算是对过去的一些回顾以及对接下来一段时间的计划想法</p><p><strong>过去一年状态</strong><br>过去的一年，经历了一些事，比较大的事：<code>无锡置业</code>，<code>重回单身狗</code>，<code>换了工作</code></p><ul><li><p>无锡置业<br>买房对我的影响还是比较大的，开始的一段时间积蓄一夜回到解放前，不过心里也踏实了许多，算是明智的选择</p></li><li><p>重回单身狗<br>这件事对我的触动很大，比较长的一段时间都比较沮丧，觉得自己很是没用。后来有些事情慢慢想通了，也就放下了。她是个好姑娘，单纯而又善良，祝愿她能过得开心</p></li><li><p>换工作<br>当时正准备买房了，离职一方面是薪资的考虑，上家公司是那种典型的国企氛围从不加班，这在做通讯行业里很是少见。没有条条框框的规则，项目周期比较长，所以工作内容没有压力，只是氛围稍稍沉闷了点，总得来说还是很不错。</p></li></ul><p><strong>当前状态</strong><br>现在的公司是个小公司，整个氛围比较轻松，也不沉闷。工作内容的话，除了项目开始时自己写了一两个模块，后面的工作主要是维护自己写的代码。<br>总得来说工作内容比较简单，说简单倒不是因为我技术好，的确是工作内容比较简单。</p><p>现在开始逐渐意识到，现状的处境其实很危险，像是在温水煮青蛙，没有足够的挑战，时间久了，人会变得懒散，缺乏足够的驱动力去学习，一直呆在大缸里，等有一天想跳出去看看外边的世界，却发现已经没有了力气。</p><p>过去的一年过得真的是太安逸，也太懒散。想起毕业那会，也是努力的奋斗过，每周都会列出学习计划，为什么后来就没有坚持下来了呢。是膨胀了？ 好像是的，身体的发福让我日益膨胀，迷失自我。</p><p><strong>后续改善计划</strong><br>接下来的时间会通过该网址持续更新技术文章，多思考多总结。具体的行动计划大纲如下</p><ol><li><p>每天学习时间满4小时</p></li><li><p>每周写两篇技术文章</p></li><li><p>每个月写一个月度总结</p></li></ol><p>鉴于过往的经历，很多时候计划是列出了，执行的时候却不能至始至终的执行，可恶的惰性啊。</p><p>后面每个月的月度总结会说明本月的执行情况，如果月度总结也没写的话，那我多半是废了，无可救药了。</p><p><strong>以此文为证！You can do it ！come on！ steven！</strong></p><p><strong>厚积而薄发！</strong></p><hr><font color="#000000" size="2" face="楷体">写于2018.5.4号11号线地铁上, 站着, 打完本文</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是该网址写的第一篇文章，想写点东西上来，算是对过去的一些回顾以及对接下来一段时间的计划想法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过去一年状态&lt;/strong&gt;&lt;br&gt;过去的一年，经历了一些事，比较大的事：&lt;code&gt;无锡置业&lt;/code&gt;，&lt;code&gt;重回单身狗&lt;/code&gt;，
      
    
    </summary>
    
    
  </entry>
  
</feed>
