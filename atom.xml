<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qiu&amp;Lee&amp;Dai</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lihaizhou.top/"/>
  <updated>2019-12-15T08:38:27.618Z</updated>
  <id>http://lihaizhou.top/</id>
  
  <author>
    <name>追击的树袋熊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android-丢帧分析临时草稿</title>
    <link href="http://lihaizhou.top/2019/12/15/Android-%E4%B8%A2%E5%B8%A7%E5%88%86%E6%9E%90%E4%B8%B4%E6%97%B6%E8%8D%89%E7%A8%BF/"/>
    <id>http://lihaizhou.top/2019/12/15/Android-丢帧分析临时草稿/</id>
    <published>2019-12-15T07:39:19.000Z</published>
    <updated>2019-12-15T08:38:27.618Z</updated>
    
    <content type="html"><![CDATA[<p>用户日常使用手机过程中慢或者卡顿统一归结为丢帧问题，简单总结下：</p><p>1 内存不足<br>2 app使用的绘制方式区别<br>3 app使用的编译方式区别<br>4 app自身问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\MI</span><br><span class="line">λ adb shell cat /proc/meminfo</span><br><span class="line">MemTotal:        <span class="number">5871128</span> kB</span><br><span class="line">MemFree:         <span class="number">1215492</span> kB</span><br><span class="line">MemAvailable:    <span class="number">3631296</span> kB</span><br><span class="line">Buffers:           <span class="number">91956</span> kB</span><br><span class="line">Cached:          <span class="number">2432140</span> kB</span><br></pre></td></tr></table></figure><p>比较多的Uninterruptible Sleep，block 在__lock_page_or_retry </p><p>另外proc/meminfo中 可用内存非常少、且swap空间几乎耗尽 、lmk频繁打印等等都能从侧面反映内存偏低</p><p>app使用的绘制方式区别<br>相同app的软件绘制与硬件绘制对比：</p><p>软件绘制：</p><p>硬件加速<br>Android3.0开始支持硬件加速，Android4.0 默认启用硬件加速。但是app还是能主动设置 hardwareAccelerated 来切换两种模式</p><p>硬件绘制就是将CPU不擅长的图形计算转换成GPU专用指令，由GPU完成。</p><p>优点：</p><p>1）显著提升UI绘速度</p><p>2） 更新UI只重绘脏区域，提升刷新速度</p><p>缺点：</p><p>内存和电量消耗会比软件绘制大</p><p>3 app使用的编译方式区别<br>留意是否有编译方式的区别：</p><p>解释模式编译.dex文件肯定比直接执行.oat文件要来的慢</p><p>4 app自身问题<br>视图太复杂层级太深、主线程有耗时方法</p><p>DrawFrame过程很长，且基本是出于running状态时，可能视图过于复杂</p><p>主线程方法耗时的话，那需要通过加trace Label缩小范围，然后利用traceView对具体方法进行耗时分析</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用户日常使用手机过程中慢或者卡顿统一归结为丢帧问题，简单总结下：&lt;/p&gt;
&lt;p&gt;1 内存不足&lt;br&gt;2 app使用的绘制方式区别&lt;br&gt;3 app使用的编译方式区别&lt;br&gt;4 app自身问题&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android-input系统(Q)临时草稿</title>
    <link href="http://lihaizhou.top/2019/12/15/Android-input%E7%B3%BB%E7%BB%9F%E4%B8%B4%E6%97%B6%E8%8D%89%E7%A8%BF/"/>
    <id>http://lihaizhou.top/2019/12/15/Android-input系统临时草稿/</id>
    <published>2019-12-15T05:31:51.000Z</published>
    <updated>2019-12-15T07:22:27.865Z</updated>
    
    <content type="html"><![CDATA[<p>一次input的耗时时间分布</p><ul><li>T1 表示 硬件中断的时间</li><li>T2 表示 InputReader 从 /dev/input/xxx 读出事件的时间</li><li>T3 表示 InputDispatcher 向 app 进程发送事件的时间</li><li>T4 表示 app 主线程开始处理输入事件的时间</li><li>T5 表示 app 主线程完成处理输入事件的时间<br>一次用户输入事件的传递过程可以简化为: 硬件 -&gt; kernel -&gt; system_server -&gt; app</li></ul><p>system_server 耗时: T3 - T2<br>frameworks/native/libs/input/InputTransport.cpp<br>应用处理耗时: T5 - T4<br>frameworks/base / core/java/android/view/InputEventReceiver.java</p><h3 id="代码分布"><a href="#代码分布" class="headerlink" title="代码分布"></a>代码分布</h3><p>frameworks/native/services/inputflinger/</p><ul><li>InputDispatcher.cpp</li><li>InputReader.cpp</li><li>InputManager.cpp</li><li>EventHub.cpp</li><li>InputListener.cpp</li></ul><p>frameworks/native/libs/input/</p><ul><li>InputTransport.cpp</li><li>Input.cpp</li><li>InputDevice.cpp</li><li>Keyboard.cpp</li><li>KeyCharacterMap.cpp</li><li>IInputFlinger.cpp</li></ul><p>frameworks/base/services/core/</p><ul><li>java/com/android/server/input/InputManagerService.java</li><li>jni/com_android_server_input_InputManagerService.cpp</li></ul><p>Input模块的主要组成：</p><ul><li>Native层的InputReader负责从EventHub取出事件并处理，再交给InputDispatcher；</li><li>Native层的InputDispatcher接收来自InputReader的输入事件，并记录WMS的窗口信息，用于派发事件到合适的窗口；</li><li>Java层的InputManagerService跟WMS交互，WMS记录所有窗口信息，并同步更新到IMS，为InputDispatcher正确派发事件到ViewRootImpl提供保障</li></ul><p><img src="https://github.com/hellolihaizhou/saveImg/blob/master/input(1" alt="input事件流转路线">-Input%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86.png?raw=true)</p><p>1、输入硬件<br>说白了就是任何接受外界刺激，然后将刺激转换为电信号（例如机械能，使得电路导通后产生电信号）的设备，然后向CPU发出硬件中断，然后CPU查找操作系统的中断向量表中相对应的中断编号，调用操作系统的相应的代码段，此处如果有对应的驱动程序的话，操作系统会调用驱动程序对输入设备产生的电信号进行解析和转换成标准的linux内核规定的事件信息结构。</p><p>2、输入设备驱动<br>在linux内核层，处理硬件电信号，并转换成linux内核标准事件信息结构。然后linux会将这些事件信息写入/dev/input/下对应的虚拟设备中。</p><p>3、/dev/input<br>linux写入输入事件的位置，被linux虚拟化成虚拟输入设备文件（字符设备）。</p><p>4、EventHub<br>安卓的事件核心、负责从linux虚拟化输入设备中获取到所有事件。</p><p>framework/native/services/inputflinger/EventHub.h</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一次input的耗时时间分布&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T1 表示 硬件中断的时间&lt;/li&gt;
&lt;li&gt;T2 表示 InputReader 从 /dev/input/xxx 读出事件的时间&lt;/li&gt;
&lt;li&gt;T3 表示 InputDispatcher 向 app 进程发送事件
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>RTSP&amp;RTP协议概述以及应用</title>
    <link href="http://lihaizhou.top/2019/10/02/RTSP%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>http://lihaizhou.top/2019/10/02/RTSP协议概述以及应用/</id>
    <published>2019-10-02T02:38:50.000Z</published>
    <updated>2019-10-02T09:21:25.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是RTSP以及RTP？"><a href="#什么是RTSP以及RTP？" class="headerlink" title="什么是RTSP以及RTP？"></a>什么是RTSP以及RTP？</h1><p>2016年12月，RTSP 2.0协议正式发布，rfc索引是7826, 地址：<a href="https://tools.ietf.org/html/rfc7826" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc7826</a><br>新标准还是有不少修改的，除了完善一些原协议的中的定义，主要修改就是对接口method进行了修改，比如删除了RECORD和ANNOUNCE方法，新增了PLAY_NOTIFY方法。</p><p>删除了RECORD，这表示你不能再通过这个接口来控制服务器进行数据的录制了，可以选择在PLAY方法中，添加一些参数，来实现服务器对直播数据进行录制，还可以分隔录制。<br>删除了ANNOUNCE，这意味着，不能像RTMP一样，客户端通过向服务器推送数据，来实现本机数据对外直播了，这可能需要其他的推送途径来进行替代了。<br>至于PLAY_NOTIFY，它替代来原来Server向Client端发送ANNOUNCE方法，所实现的功能，也就是告诉客户端，需要根据新参数来调整直播播放状态。<br>删除通过UDP传输RTSP消息的形式<br>删除通过发PLAY消息来keep alive的方式（用SET_PARAMETER来做）<br>RTSP Server也可向Client发TEARDOWN消息<br>支持IPV6<br>RTSP请求，支持pipelining的形式，也就是聚合Request。比如可以不等服务器返回，把SETUP和PLAY一起发送，这样可以提高至少一个RTT的启动时间。当然需要在消息里加上相关字段。<br>重写了状态机，完善了服务器对客户端来说在各个状态之间的转换和行为<br>RTSP消息内支持URI了<br>扩展了REDIRECT方法，等等。</p><p>RTSP实时流协议<br>作为一个应用层协议，RTSP提供了一个可供扩展的框架，它的意义在于使得实时流媒体数据的受控和点播变得可能。总的说来，RTSP是一个流媒体表示 协议，主要用来控制具有实时特性的数据发送，但它本身并不传输数据，而是必须依赖于下层传输协议所提供的某些服务。RTSP可以对流媒体提供诸如播放、暂 停、快进等操作，它负责定义具体的控制消息、操作方法、状态码等，此外还描述了与RTP间的交互操作</p><p>RTP数据协议<br>RTP数据协议负责对流媒体数据进行封包并实现媒体流的实时传输，每一个RTP数据报都由头部（Header）和负载（Payload）两个部分组成，其中头部前12个字节的含义是固定的，而负载则可以是音频或者视频数据。</p><p>RTP用到的地方就是 PLAY ，服务器往客户端传输数据用UDP协议，RTP是在传输数据的前面加了个12字节的头(描述信息)。</p><p>RTP载荷封装设计本文的网络传输是基于IP协议，所以最大传输单元(MTU)最大为1500字节，在使用IP／UDP／RTP的协议层次结构的时候，这 其中包括至少20字节的IP头，8字节的UDP头，以及12字节的RTP头。这样，头信息至少要占用40个字节，那么RTP载荷的最大尺寸为1460字 节。以H264 为例，如果一帧数据大于1460，则需要分片打包，然后到接收端再拆包，组合成一帧数据，进行解码播放</p><p>参考资料：</p><p><a href="https://github.com/codeRiding/LWLive/wiki/RTSP%E3%80%81-RTMP%E3%80%81HTTP%E7%9A%84%E5%85%B1%E5%90%8C%E7%82%B9%E3%80%81%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">https://github.com/codeRiding/LWLive/wiki/RTSP%E3%80%81-RTMP%E3%80%81HTTP%E7%9A%84%E5%85%B1%E5%90%8C%E7%82%B9%E3%80%81%E5%8C%BA%E5%88%AB</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是RTSP以及RTP？&quot;&gt;&lt;a href=&quot;#什么是RTSP以及RTP？&quot; class=&quot;headerlink&quot; title=&quot;什么是RTSP以及RTP？&quot;&gt;&lt;/a&gt;什么是RTSP以及RTP？&lt;/h1&gt;&lt;p&gt;2016年12月，RTSP 2.0协议正式发布，rf
      
    
    </summary>
    
      <category term="音视频" scheme="http://lihaizhou.top/categories/%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
    
    
  </entry>
  
  <entry>
    <title>WFD的学习记录笔记</title>
    <link href="http://lihaizhou.top/2019/09/15/WFD%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://lihaizhou.top/2019/09/15/WFD的学习记录笔记/</id>
    <published>2019-09-15T09:18:25.000Z</published>
    <updated>2019-10-15T13:04:39.923Z</updated>
    
    <content type="html"><![CDATA[<p>本文只讨论miracast，对应的即是设置中投屏的方式，其他视频或者相册中走的是另外一套DLNA协议，不是实时的，还有一些三方应用如腾讯视频爱奇艺是自己搞了一套dlna，DLNA不在本文讨论范围内</p><h1 id="WFD扫盲"><a href="#WFD扫盲" class="headerlink" title="WFD扫盲"></a>WFD扫盲</h1><h2 id="miracast简介"><a href="#miracast简介" class="headerlink" title="miracast简介"></a>miracast简介</h2><h2 id="应用层如何操作WFD？"><a href="#应用层如何操作WFD？" class="headerlink" title="应用层如何操作WFD？"></a>应用层如何操作WFD？</h2><p>连接Miracast设备<br>API<br>import android.hardware.display.DisplayManager;</p><p>mDisplayManager = (DisplayManager) getSystemService(Context.DISPLAY_SERVICE);</p><p>mDisplayManager.connectWifiDisplay(String deviceMacAddress);</p><p>备注<br>（1）隐藏接口，可以通过反射调用。<br>权限<br>android.permission.CONFIGURE_WIFI_DISPLAY</p><p>断开Miracast设备<br>API<br>import android.hardware.display.DisplayManager;</p><p>mDisplayManager = (DisplayManager) getSystemService(Context.DISPLAY_SERVICE);</p><p>mDisplayManager.disconnectWifiDisplay();</p><p>备注<br>（1）隐藏接口，可以通过反射调用<br>扫描Miracast设备<br>API<br>import android.hardware.display.DisplayManager;</p><p>mDisplayManager = (DisplayManager) getSystemService(Context.DISPLAY_SERVICE);</p><p>mDisplayManager.startWifiDisplayScan();</p><p>备注<br>（1）隐藏接口，可以通过反射调用。<br>权限<br>android.permission.CONFIGURE_WIFI_DISPLAY<br>举个milink中的使用例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * scan wifi display while we can connect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startWifiDisplayScan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mDisplayManager) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ReflectUtil.callObjectMethod(mDisplayManager, <span class="string">"startWifiDisplayScan"</span>) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用的是反射调用</p><h2 id="芯片商在谷歌基础上的定制化"><a href="#芯片商在谷歌基础上的定制化" class="headerlink" title="芯片商在谷歌基础上的定制化"></a>芯片商在谷歌基础上的定制化</h2><h2 id="高通WFD"><a href="#高通WFD" class="headerlink" title="高通WFD"></a>高通WFD</h2><p>With Android JB MR1, Google released a WFD solution called Remote Display.<br> Google WFD supports AVC, LPCM, and AAC codecs along with HDCP encryption, but lacks support for content protection. </p><p> It is available to applications as an external WFD using Presentation, MediaRouter, and DisplayManager APIs. </p><p> When compared to the QTI-based Miracast solution, it lacks content protection support and has low performance and higher power consumption numbers. </p><p> QTI created a wrapper to launch the QTI-based Miracast solution using Android APIs; this provides an enhanced Miracast solution to third-party vendors and OEMs who would like to use the Presentation API for Miracast</p><h2 id="WFD的应用场景"><a href="#WFD的应用场景" class="headerlink" title="WFD的应用场景"></a>WFD的应用场景</h2><h1 id="高通WFD代码结构"><a href="#高通WFD代码结构" class="headerlink" title="高通WFD代码结构"></a>高通WFD代码结构</h1><p>SessionManagerService<br>vendor/qcom/proprietary/commonsys/wfd/wdsm/service/src/com/qualcomm/wfd/service/<br>提供了很多的接口，诸如：</p><h1 id="RTSP协议"><a href="#RTSP协议" class="headerlink" title="RTSP协议"></a>RTSP协议</h1><h1 id="WFD代码连接流程"><a href="#WFD代码连接流程" class="headerlink" title="WFD代码连接流程"></a>WFD代码连接流程</h1><h1 id="M-Message消息"><a href="#M-Message消息" class="headerlink" title="M-Message消息"></a>M-Message消息</h1><h1 id="P2P以及RTSP的的建立"><a href="#P2P以及RTSP的的建立" class="headerlink" title="P2P以及RTSP的的建立"></a>P2P以及RTSP的的建立</h1><h2 id="p2p的建立"><a href="#p2p的建立" class="headerlink" title="p2p的建立"></a>p2p的建立</h2><h2 id="RTSP的建立"><a href="#RTSP的建立" class="headerlink" title="RTSP的建立"></a>RTSP的建立</h2><h1 id="WFD整体架构-source"><a href="#WFD整体架构-source" class="headerlink" title="WFD整体架构(source)"></a>WFD整体架构(source)</h1><h1 id="WFD常见问题的debug策略"><a href="#WFD常见问题的debug策略" class="headerlink" title="WFD常见问题的debug策略"></a>WFD常见问题的debug策略</h1><h2 id="Wifi-Display-Miracast分析一般需要的日志"><a href="#Wifi-Display-Miracast分析一般需要的日志" class="headerlink" title="Wifi-Display/Miracast分析一般需要的日志"></a>Wifi-Display/Miracast分析一般需要的日志</h2><p>前提条件：root版本，因为有些命令如关selinux这些命令需要root权限</p><h3 id="高通平台"><a href="#高通平台" class="headerlink" title="高通平台"></a>高通平台</h3><p>使能所有WFD日志的开关</p><ol><li>Android N 以及更早的版本<br>创建一个文件名为mmosal_logmask.cfg，内容如下<br><start><br>LOGMASK = 6013:63<br>LOGMASK = 6015:63<end></end></start></li></ol><p>这个文件建议保存在本地，后续方便提供给测试或者自己调试</p><p> push mmosal_logmask.cfg这个文件到 /data/ folder 或者 /data/misc/media/ 目录下, 执行如下命令<br> adb root<br> adb remount<br> adb push mmosal_logmask.cfg /data/<br> adb push mmosal_logmask.cfg /data/misc/media/<br> adb shell setenforce 0</p><ol start="2"><li><p>Android O 版本<br>adb shell setprop mmosal.debug.config 6015:63:6013:63</p></li><li><p>Android P 版本<br>adb shell setprop vendor.debug.mmosal.config 6015:63:6013:63</p></li><li><p>Android Q 版本<br>push  mmosal_logmask.cfg这个文件到 /data/ 目录 或者 /data/misc/media/ folder 或者 /data/vendor/，索性都push了<br>adb root<br>adb remount<br>adb push mmosal_logmask.cfg /data/<br>adb push mmosal_logmask.cfg data/misc/media/<br>adb push mmosal_logmask.cfg  /data/vendor/<br>adb shell setenforce 0</p></li></ol><p>打开延迟分析属性来判断延迟值<br>对于 WFD performance 问题, 需要打开延迟分析属性来判断延迟值<br>Android O<br>adb shell setprop persist.debug.wfd.profile 1</p><p>Android P/Q<br>adb shell setprop persist.vendor.debug.wfd.profile 1</p><p>获取 TCP dump，这一步主要用来分析丢包率以及建立RTSP过程中的问题<br>1.adb shell</p><ol start="2"><li>tcpdump -i wlan0 -s 0 -w /data/tcpdump.pcap</li></ol><h3 id="联发科平台"><a href="#联发科平台" class="headerlink" title="联发科平台"></a>联发科平台</h3><p>WFD卡顿延迟问题<br> 1.当发现有延迟或者卡顿，可以看是否有如下LOG：<br>212887 07-05 11:13:53.018936 582 24850 I MtkNetworkSession: [WFD_P][video][dummy=0]ts=7663475,in 7663545,out 7664846,LatencyF 91,send 1300,LatencyT 1392<br>212888 07-05 11:13:53.019069 582 24850 I MtkNetworkSession: [WFD_P][audo][dummy=0]ts=7663476,in 7663546,out 7664846,LatencyF 7,send 1300,LatencyT 1307</p><p>//如下的时间单位都是毫秒<br>LatencyF 91 //编码打包的延迟时间<br>send 1300 //发送的延迟时间<br>LatencyT 1392 //总的延迟</p><p>2.假如send 时间比较长（一般需要平均1000/25FPS = 40毫秒以内才能保证不会卡顿）那么卡顿是正常现象，一般没办法提升，比如网络原因，如下LOG（ link_score小于70），说明是网络信号不好卡顿延迟：<br>39313 07-05 11:13:50.521 <6>[ 7662.347991] (1)[1261:tx_thread][wlan]nicCmdEventQueryStaStatistics:(P2P INFO) link_score=11, rssi=78, rate=81, threshold_cnt=2780,。</6></p><p>3.假如是LatencyF 太长，请帮忙设置如下property并抓LOG复现（需要提供mtklog和netlog）。<br>  adb root<br>  adb shell setenforce 0<br>  //Android O版本以及之前的版本<br>  adb shell setprop mtk.omx.enable.venc.log 1<br>  //Android P版本<br>  adb shell setprop vendor.mtk.omx.enable.venc.log 2</p><h2 id="如何分析丢包率"><a href="#如何分析丢包率" class="headerlink" title="如何分析丢包率"></a>如何分析丢包率</h2><h2 id="miracast连接超时问题分析"><a href="#miracast连接超时问题分析" class="headerlink" title="miracast连接超时问题分析"></a>miracast连接超时问题分析</h2><h2 id="sink端显示问题一般处理策略"><a href="#sink端显示问题一般处理策略" class="headerlink" title="sink端显示问题一般处理策略"></a>sink端显示问题一般处理策略</h2><h3 id="播放卡顿的厘清方向-source"><a href="#播放卡顿的厘清方向-source" class="headerlink" title="播放卡顿的厘清方向(source)"></a>播放卡顿的厘清方向(source)</h3><h3 id="播放卡顿的厘清方向-sink"><a href="#播放卡顿的厘清方向-sink" class="headerlink" title="播放卡顿的厘清方向(sink)"></a>播放卡顿的厘清方向(sink)</h3><p>1 在测试之前，需要先在屏蔽室中测试手机的吞吐量，看看是否正常。</p><p>2  在测试之前也要先确保硬件没有问题，比如接收灵敏度，EVM，天线效能等硬件因素要是ok的。</p><p>3  测试时首先选择一个比较干净的环境进行测试。</p><p>4  使用sniffer 设备在全信道上扫描，看看周围AP在各信道上的分布</p><p>5  在测试时，最好是选择比较空闲的信道进行测试，可以这样设置：先设置AP的信道为空闲信道，然后手机连接AP，手机再连接dongle，断开AP，此时WFD的连接就处于空闲信道了。</p><p>6  如果一定要在比较繁忙的信道上测试，首先要在这个信道上使用iperf打吞吐量，如果数据可以稳定在15Mbps以上，就可以进行测试。</p><p>7  测试时，请同时拿对比机进行测试，如果遇到卡顿现象，请换一只手机进行测试，也可以再测试一次此时的吞吐量，看看是否有变。</p><p>8  测试时，可以在空闲的时段进行测试，比如下班后，或者周末的时间等</p><p>若只是SINK端卡顿，通常的原因有：<br>1.mdp做resize和rotate慢<br>2.encoder做视频编码慢<br>3.ANetworksession调用socket接口将已打好包的rtp a\v data发送有延迟<br>4.network wifi环境问题<br>5.SINK端本身拆包解码慢</p><p>逆向分析比较容易快速厘清问题，贵司可以先通过mainlog和netlog快速厘清是否是网络或者SINK端本身问题。<br>首先请通过mtklogger apk，勾选moblie log和net log，然后开始复现问题，抓取分析资料.<br>再通过netlog导出SOURCE发送给SINK端的rtp数据，并通过wireshark将rtp包生成ts文件,直接在PC上查看播放视频（可以用vlc视频播放器直接打开），查看视频播放是否有卡顿现象。<br>若视频本身在PC上播放卡顿，请提交eservice，并附带mtklog（mobile log&amp; net log）等文件；<br>若视频本身在PC上播放不卡顿，则surface-&gt;mdp-&gt;encoder-&gt;ANetworksession\socket这一路正常，推荐贵司做下面测试：<br>1）用对比机测试看是否也有同样问题；<br>2）可以把附件视频ts文件直接通过usb的方式，在TV上播放，若播放卡顿，则是5.SINK端本身拆包解码慢；<br>3）测试当前wifi网络环境，在纯净wifi网络环境下再进行测试。<br>若还没有找到原因，请提交eservice，说明贵司分析现状以及测试实验结果，并附带mtklog（mobile log&amp; net log）等文件。</p><p>通常网络不稳定导致的sink端卡顿会有下面log<br>1)link_score不稳定等于100<br>05-31 14:01:09.326144 1238 2086 D WifiP2pService: link_score=10<br>05-31 14:01:11.329835 1238 2086 D WifiP2pService: link_score=8<br>05-31 14:01:13.331112 1238 2086 D WifiP2pService: link_score=10<br>05-31 14:01:15.332513 1238 2086 D WifiP2pService: link_score=10<br>~<br>05-31 14:02:31.387187 1238 2086 D WifiP2pService: link_score=71<br>05-31 14:02:33.391052 1238 2086 D WifiP2pService: link_score=58<br>05-31 14:02:35.390564 1238 2086 D WifiP2pService: link_score=73<br>05-31 14:02:37.393885 1238 2086 D WifiP2pService: link_score=54</p><p>2)Netowrksession打印出来send cost时间较长<br>05-31 14:01:35.820162 413 10936 I NetworkSession: [WFD_P][audo][dummy=0]ts=13041028 ms,in 13041053 ms,out 13044779 ms, mLatencyF 24 ms,send cost 3725 ms,LatencyT 3750 ms<br>05-31 14:01:35.820302 413 10936 I NetworkSession: [WFD_P][audo][dummy=0]ts=13041049 ms,in 13041054 ms,out 13044779 ms, mLatencyF 4 ms,send cost 3725 ms,LatencyT 3729 ms</p><h3 id="高通平台的花屏问题一般分析方向"><a href="#高通平台的花屏问题一般分析方向" class="headerlink" title="高通平台的花屏问题一般分析方向"></a>高通平台的花屏问题一般分析方向</h3><h3 id="MTK平台的花屏问题一般分析方向"><a href="#MTK平台的花屏问题一般分析方向" class="headerlink" title="MTK平台的花屏问题一般分析方向"></a>MTK平台的花屏问题一般分析方向</h3><p>参见：[FAQ21608] WFD图像花屏问题</p><p>step1: 用wireshark打开netlog，并过滤出RTP包，分析丢包率</p><p>step2: 发现了丢包，那么说明花屏是正常的，假如仍然要分析问题，可以去搜索kernel_log里面的link_score关键字。如果出现如下LOG（ link_score小于70），说明是网络信号不好导致丢帧：<br>39313 07-05 11:13:50.521 <6>[ 7662.347991] (1)[1261:tx_thread][wlan]nicCmdEventQueryStaStatistics:(P2P INFO) link_score=11, rssi=78, rate=81, threshold_cnt=2780,</6></p><p>step3:如果发现没有丢包，但是出现了花屏。可以在如下界面把ts数据dump出来，然后拿PC端的播放器播放</p><p>step4:如果发现播放器播放是OK的，那么说明是TV或者其他显示设备的问题，跟平台无关，亲自行去找TV厂商沟通</p><p>step5:如果发现播放有问题，请帮忙提供mtklog，且需要打开netlog</p><h1 id="WFD几个典型案例"><a href="#WFD几个典型案例" class="headerlink" title="WFD几个典型案例"></a>WFD几个典型案例</h1><p>参考了：</p><p><a href="https://online.mediatek.com/FAQ#/SW/FAQ21609" target="_blank" rel="noopener">https://online.mediatek.com/FAQ#/SW/FAQ21609</a><br><a href="https://online.mediatek.com/FAQ#/SW/FAQ21608" target="_blank" rel="noopener">https://online.mediatek.com/FAQ#/SW/FAQ21608</a><br><a href="https://online.mediatek.com/FAQ#/SW/FAQ08527" target="_blank" rel="noopener">https://online.mediatek.com/FAQ#/SW/FAQ08527</a><br><a href="https://online.mediatek.com/FAQ#/SW/FAQ21602" target="_blank" rel="noopener">https://online.mediatek.com/FAQ#/SW/FAQ21602</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文只讨论miracast，对应的即是设置中投屏的方式，其他视频或者相册中走的是另外一套DLNA协议，不是实时的，还有一些三方应用如腾讯视频爱奇艺是自己搞了一套dlna，DLNA不在本文讨论范围内&lt;/p&gt;
&lt;h1 id=&quot;WFD扫盲&quot;&gt;&lt;a href=&quot;#WFD扫盲&quot; cl
      
    
    </summary>
    
      <category term="WFD" scheme="http://lihaizhou.top/categories/WFD/"/>
    
    
  </entry>
  
  <entry>
    <title>一个SharedPreferences写操作导致的ANR问题分析</title>
    <link href="http://lihaizhou.top/2019/06/23/%E4%B8%80%E4%B8%AASharedPreferences%E5%86%99%E6%93%8D%E4%BD%9C%E5%AF%BC%E8%87%B4%E7%9A%84ANR%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://lihaizhou.top/2019/06/23/一个SharedPreferences写操作导致的ANR问题分析/</id>
    <published>2019-06-23T12:11:32.000Z</published>
    <updated>2019-06-23T13:08:18.548Z</updated>
    
    <content type="html"><![CDATA[<p><code>问题现象</code><br>手机连接WIFI后出现设置弹出无响应的弹框<br><code>问题概率</code><br>仅出现一次<br><code>问题平台</code><br>Andorid P  高通平台</p><p><strong>日志分析</strong><br>拿到bugreport，使用chkbugreport解析下(开源工具，将bugreport庞大的日志进行分门别类，并以网页形式展现出来)，打开浏览器看下event日志中的时间点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">06</span><span class="number">-19</span> <span class="number">17</span>:<span class="number">53</span>:<span class="number">42.307</span>  <span class="number">1000</span>  <span class="number">1820</span>  <span class="number">1959</span> I am_anr  : [<span class="number">0</span>,<span class="number">3861</span>,com.android.settings,<span class="number">952745541</span>,Input dispatching timed out (com.android.settings/com.android.settings.MainSettings</span><br></pre></td></tr></table></figure><p>解压后的bugreport中有一份ANR文件，查看其中的trace<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"main"</span> prio=<span class="number">5</span> tid=<span class="number">1</span> Blocked</span><br><span class="line">  | group=<span class="string">"main"</span> sCount=<span class="number">1</span> dsCount=<span class="number">0</span> flags=<span class="number">1</span> obj=<span class="number">0x7923e118</span> self=<span class="number">0x763be14c00</span></span><br><span class="line">  | sysTid=<span class="number">3861</span> nice=<span class="number">-10</span> cgrp=<span class="keyword">default</span> sched=<span class="number">0</span>/<span class="number">0</span> handle=<span class="number">0x76c1e12548</span></span><br><span class="line">  | state=S schedstat=( <span class="number">4685634510</span> <span class="number">1791639950</span> <span class="number">6133</span> ) utm=<span class="number">380</span> stm=<span class="number">88</span> core=<span class="number">3</span> HZ=<span class="number">100</span></span><br><span class="line">  | stack=<span class="number">0x7fe6270000</span><span class="number">-0x7fe6272000</span> stackSize=<span class="number">8</span>MB</span><br><span class="line">  | held mutexes=</span><br><span class="line">  at android.app.QueuedWork.processPendingWork(QueuedWork.java:<span class="number">273</span>)</span><br><span class="line">  - waiting to lock &lt;<span class="number">0x00210110</span>&gt; (a java.lang.Object) held by thread <span class="number">19</span></span><br><span class="line">  at android.app.QueuedWork.waitToFinish(QueuedWork.java:<span class="number">184</span>)</span><br><span class="line">  at android.app.ActivityThread.handleStopActivity(ActivityThread.java:<span class="number">4305</span>)</span><br></pre></td></tr></table></figure></p><p>可以看出主线程在等锁0x00210110，该锁被thread 19持有，这里看堆栈可以看出卡在了waitToFinish上，界面回调了onStop的生命函数，<br>是不是可以理解为当时界面走了onStop准备退出，发现有任务没有完成，需要等待，猜测如此，继续看thread 19</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"queued-work-looper"</span> prio=<span class="number">5</span> tid=<span class="number">19</span> Native</span><br><span class="line">  | group=<span class="string">"main"</span> sCount=<span class="number">1</span> dsCount=<span class="number">0</span> flags=<span class="number">1</span> obj=<span class="number">0x130c0958</span> self=<span class="number">0x762df62800</span></span><br><span class="line">  | sysTid=<span class="number">3892</span> nice=<span class="number">-2</span> cgrp=<span class="keyword">default</span> sched=<span class="number">0</span>/<span class="number">0</span> handle=<span class="number">0x76223ff4f0</span></span><br><span class="line">  | state=D schedstat=( <span class="number">8250990</span> <span class="number">10651510</span> <span class="number">31</span> ) utm=<span class="number">0</span> stm=<span class="number">0</span> core=<span class="number">1</span> HZ=<span class="number">100</span></span><br><span class="line">  | stack=<span class="number">0x76222fc000</span><span class="number">-0x76222fe000</span> stackSize=<span class="number">1041</span>KB</span><br><span class="line">  | held mutexes=</span><br><span class="line">  kernel: (couldn<span class="string">'t read /proc/self/task/3892/stack)</span></span><br><span class="line"><span class="string">  native: #00 pc 000000000007b070  /system/lib64/libc.so (fsync+8)</span></span><br><span class="line"><span class="string">  native: #01 pc 0000000000003670  /system/lib64/libopenjdkjvm.so (JVM_Sync+20)</span></span><br><span class="line"><span class="string">  native: #02 pc 000000000001cd54  /system/lib64/libopenjdk.so (FileDescriptor_sync+40)</span></span><br><span class="line"><span class="string">  at java.io.FileDescriptor.sync(Native method)</span></span><br><span class="line"><span class="string">  at android.os.FileUtils.sync(FileUtils.java:197)</span></span><br><span class="line"><span class="string">  at android.app.SharedPreferencesImpl.writeToFile(SharedPreferencesImpl.java:777)</span></span><br><span class="line"><span class="string">  at android.app.SharedPreferencesImpl.access$900(SharedPreferencesImpl.java:54)</span></span><br><span class="line"><span class="string">  at android.app.SharedPreferencesImpl$2.run(SharedPreferencesImpl.java:642)</span></span><br><span class="line"><span class="string">  - locked &lt;0x08e457c5&gt; (a java.lang.Object)</span></span><br><span class="line"><span class="string">  at android.app.QueuedWork.processPendingWork(QueuedWork.java:286)</span></span><br><span class="line"><span class="string">  - locked &lt;0x00210110&gt; (a java.lang.Object)</span></span><br></pre></td></tr></table></figure><p>这里的堆栈可以看出，当时在做SharedPreference的IO操作，锁的持有对象当时在做processPendingWork，可是为什么Activity的onStop要等SharedPreference写完呢？</p><p>再来看下主线程中的堆栈</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at android.app.QueuedWork.waitToFinish(QueuedWork.java:<span class="number">184</span>)</span><br><span class="line">at android.app.ActivityThread.handleStopActivity(ActivityThread.java:<span class="number">4305</span>)</span><br></pre></td></tr></table></figure><p>看下ActivityThread.java中的handleStopActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleStopActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> show, <span class="keyword">int</span> configChanges,</span></span></span><br><span class="line"><span class="function"><span class="params">            PendingTransactionActions pendingActions, <span class="keyword">boolean</span> finalStateRequest, String reason)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityClientRecord r = mActivities.get(token);</span><br><span class="line">        r.activity.mConfigChangeFlags |= configChanges;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> StopInfo stopInfo = <span class="keyword">new</span> StopInfo();</span><br><span class="line">        performStopActivityInner(r, stopInfo, show, <span class="keyword">true</span> <span class="comment">/* saveState */</span>, finalStateRequest,</span><br><span class="line">                reason);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Slog.v(</span><br><span class="line">            TAG, <span class="string">"Finishing stop of "</span> + r + <span class="string">": show="</span> + show</span><br><span class="line">            + <span class="string">" win="</span> + r.window);</span><br><span class="line"></span><br><span class="line">        updateVisibility(r, show);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure any pending writes are now committed.</span></span><br><span class="line">        <span class="keyword">if</span> (!r.isPreHoneycomb()) &#123;</span><br><span class="line">            QueuedWork.waitToFinish();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>重点关注其中的waitToFinish()函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Trigger queued work to be processed immediately. The queued work is processed on a separate</span></span><br><span class="line"><span class="comment">     * thread asynchronous. While doing that run and process all finishers on this thread. The</span></span><br><span class="line"><span class="comment">     * finishers can be implemented in a way to check weather the queued work is finished.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Is called from the Activity base class's onPause(), after BroadcastReceiver's onReceive,</span></span><br><span class="line"><span class="comment">     * after Service command handling, etc. (so async work is never lost)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">waitToFinish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// xxx ADD</span></span><br><span class="line">        <span class="keyword">boolean</span> interrupt = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">boolean</span> hadMessages = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Handler handler = getHandler();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (sLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (handler.hasMessages(QueuedWorkHandler.MSG_RUN)) &#123;</span><br><span class="line">                <span class="comment">// Delayed work will be processed at processPendingWork() below</span></span><br><span class="line">                handler.removeMessages(QueuedWorkHandler.MSG_RUN);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                    hadMessages = <span class="keyword">true</span>;</span><br><span class="line">                    Log.d(LOG_TAG, <span class="string">"waiting"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We should not delay any work as this might delay the finishers</span></span><br><span class="line">            sCanDelay = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskWrites();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// xxx MOD</span></span><br><span class="line">            <span class="comment">// processPendingWork();</span></span><br><span class="line">            interrupt = processPendingWork(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            StrictMode.setThreadPolicy(oldPolicy);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>依据trace，接着看processPendingWork</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">processPendingWork</span><span class="params">(<span class="keyword">boolean</span> fromMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> workNdx = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// if (DEBUG) &#123;</span></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// END</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (sProcessingWork) &#123; <span class="comment">//#273 主线程卡在这里等锁</span></span><br><span class="line">            LinkedList&lt;Runnable&gt; work;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (sLock) &#123;</span><br><span class="line">                work = (LinkedList&lt;Runnable&gt;) sWork.clone();</span><br><span class="line">                sWork.clear();     </span><br><span class="line">            <span class="comment">// Remove all msg-s as all work will be processed now</span></span><br><span class="line">           getHandler().removeMessages(QueuedWorkHandler.MSG_RUN);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (work.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Runnable w : work) &#123;</span><br><span class="line">                    w.run(); <span class="comment">//#286 tid19 一直在运行该处</span></span><br><span class="line">                    .....</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>到这里基本明白了是怎么回事了，主线程在等的SharedPreference的写操作writeToFile完成，如果这个队列中的任务没有完成，SharedPreference就会一直持有这个锁，主线程拿不到这个锁，<br>一直等待，超过五秒后触发ANR，这点在日志中也得到了印证，ANR时间点前后有不少的SharedPreferencesImpl相关的日志输出，往上看大概能看出当时是在做同步数据之类</p><p>其实SharedPreference时不论是apply还是commit都会有出现写入磁盘慢的情况发生，特别是数据量大，或者多线程同时访问同一份xml，又或者连续多次commit，都会有可能造成waitToFinish函数耗时变长。虽然apply是异步执行的，主线程依旧需要等它执行结束。这点其实不好规避，所以尽可能的少使用SharedPreference，特别是可能存在多线程操作同一份数据这种情况，毕竟有了加锁，会可能出现排队的情况。</p><p><code>优化方式</code><br>尽可能传输的数据量轻量<br>尽可能减少commit次数<br>考虑新开线程，但是会有内存开销的存在，如果原本是apply，则在新开的线程改为commit</p><p>其实看公司内部代码，发现公司的framework同事有修改waitToFinish函数中调用的processPendingWork函数内容，增加了记录时间，<br>超过10s直接return false，这是个不错的想法，但是10s对于广播中的情况或许可以cover，对应Activity中超时5秒就ANR的这种情况不能cover</p><p>鉴于该问题只出现一次，不做修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;问题现象&lt;/code&gt;&lt;br&gt;手机连接WIFI后出现设置弹出无响应的弹框&lt;br&gt;&lt;code&gt;问题概率&lt;/code&gt;&lt;br&gt;仅出现一次&lt;br&gt;&lt;code&gt;问题平台&lt;/code&gt;&lt;br&gt;Andorid P  高通平台&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日志分析&lt;/str
      
    
    </summary>
    
      <category term="ANR" scheme="http://lihaizhou.top/categories/ANR/"/>
    
    
  </entry>
  
  <entry>
    <title>ANR的常见类型及解决思路</title>
    <link href="http://lihaizhou.top/2019/04/13/ANR%E7%9A%84%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
    <id>http://lihaizhou.top/2019/04/13/ANR的常见类型及解决思路/</id>
    <published>2019-04-13T06:46:41.000Z</published>
    <updated>2019-04-13T08:45:30.096Z</updated>
    
    <content type="html"><![CDATA[<p>前年在简书中总结过ANR的一般解决思路，这两天拿出来看了下，觉得有必要重新梳理下，添加些近期遇到的案例<br>本文案例主要源于项目上实际遇到的问题，希望通过梳理之后能够对ANR问题能够快速定位，减少排查时间，同时在遇到棘手问题，能够更加从容。</p><p>先说下三种常见类型<br>1：<code>KeyDispatchTimeout</code>(谷歌default 5s，MTK平台上是8s) –主要类型<br>按键或触摸事件在特定时间内无响应<br>2：<code>BroadcastTimeout</code>(10s)<br>BroadcastReceiver在特定时间内无法处理完成<br>3：<code>ServiceTimeout</code>(20s) –小概率类型<br>Service在特定的时间内无法处理完成</p><p><strong>一般解决步骤</strong></p><p><label style="color:red"><strong>Step1:日志获取&amp;注意事项</strong></label><br>获取日志有一点需要注意，发生ANR后，不要选择结束进程，因为这样AMS会kill掉该进程，有些信息会打印不出来（比如MTK平台上会生成db.XX.ANR，写入到aee_exp文件夹下需要时间），最好是ANR发生后等两三分钟左右，再获取日志</p><p>一般需要data/anr下生成的trace文件以及手机系统日志(一般只需要mobile文件夹)</p><p>以MTK为例，需要如下日志信息：<br>1.aee_exp文件夹(MTK日志目录下，发生ANR会生成)<br>2.MTK目录下的mobilelog文件夹</p><p>aee_exp文件夹一般都是需要的, 对DB进行dump解析，得到ANR发生时场景信息，比如主线程callstack，CPU，memory等，在分析问题根因时很关键</p><p><label style="color:red"><strong>Step2:日志分析一般步骤</strong></label></p><p><label style="color:red">Step2.1 确认时间点(非必需)</label><br>mobilelog文件夹下的events_log,搜索关键字”am_anr”,这一步用于确认ANR时间点，可以搜索到类似如下信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">04</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">00</span>:<span class="number">57.240</span> <span class="number">1267</span> <span class="number">1341</span> I am_anr : [<span class="number">0</span>,<span class="number">6073</span>,com.android.dialer,<span class="number">952745541</span>,Input dispatching timed out</span><br></pre></td></tr></table></figure></p><p>比如上面这行表示ANR类型为<code>Input dispatching timed out</code>, 这种anr的原因的是在viewrootimpl分发事件时，并没有找到focuswindow导致的<br>这一步确认时间点在：10:00:57,进程号:6073</p><p><label style="color:red">Step2.2: 查看ANR时的CPU以及IO率(可选)</label><br>这一步一般来说能基本定位是什么造成了ANR，是IO高还是CPU高，如两者都不是，需进入第三步trace日志分析环节<br>查看mobilelog文件夹下的main_log,搜索关键字<code>&quot;ANR in&quot;</code>,可以看到当时的CPU以及IO率，这一个环节一般来讲主要是看发生ANR时的CPU是否吃紧<br>还有需要注意<code>iowait</code>的占有率，如果占比比较高，则排查的方向要倾向与读取文件操作有关的信息，可以看trace日志中有没有一些读取文件或者操作SD卡的动作</p><p><label style="color:red">Step2.3:分析ANR时的堆栈(必需，最重要的环节)</label><br>ANR发生会在data/anr下生成trace.txt，trace务必要与moile日志匹配，一般来讲直接先看tid=1的堆栈即对应主线程，因为ANR都是主线程执行超时导致</p><p>关于trace日志的分析是ANR问题分析最重要的一个环节，下面将列出平时项目中遇到的ANR案例类型</p><p><strong>ANR常见类型归纳</strong></p><p><label style="color:red">1.主线程Binder调用等待超时</label><br>比如下面的这段<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/1_binder%E7%AD%89%E5%BE%85%E8%B6%85%E6%97%B6.png" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br>很明显当时在做Binder通信，并没有waiting to lock等代表死锁的字样，那么说明这个案例即有可能是在等Binder对端响应，我们知道Binder通信对于发起方来说是阻塞等待响应，只有有了返回结果后才会继续执行下去<br>所以，如上这个案例中需要找到对端是哪个进程，这个进程当时在做什么，这时候就需要找到anr文件夹下另外一个文件binderinfo，这里需要找到与我们发起方进程1461通信的是哪个进程<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/2_binder%E7%AD%89%E5%BE%85%E8%B6%85%E6%97%B6.png" align="left" style=" width:700px;height:300 px"><br><br><br><br><br>可以看到是1666号这个进程，再回到trace中看下，这个进程当时在做什么<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/3_binder%E7%AD%89%E5%BE%85%E8%B6%85%E6%97%B6.png" align="left" style=" width:700px;height:150 px"><br><br><br><br><br><br><br><br><br><br><br><br>可以看到当时对端在做消息的读取，也就是说这里出了问题，很明显这里我们无法修改，我们这个问题在于主线程执行了Binder请求，对端迟迟未返回便很容易出现这个问题，当前做法异步中执行</p><p><label style="color:red">案例二：主线程等待锁</label><br>比如下面这个主线程的CallStack例子，可以看到如下信息：<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/4_%E4%B8%BB%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%E9%94%81.png" align="left" style=" width:700px;height:700 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>这个案例中gallery的main thread在执行<code>UploaderChimeraService</code>的onDestroy方法时，需要lock 0x23f65d8b，但这个lock有被upload_periodic GCM Task 拿住，这个thread当前是在做连接网络的动作。从这段信息来看，很有可能与测试时手机连接的网络有关，当时连接的事google的网络，由于墙的原因，无法连接gms的相关server有关</p><p>还有一种情况就是死锁，即形成了头尾相连，互相等待的情况，对于这种问题以及上面案例的解决，一般会尝试将锁改为超时锁，比如lock的trylock，超时会自动释放锁，从而避免一直持有锁的情况发生</p><p><label style="color:red">案例三：卡在IO上</label><br>这种情况一般是和文件操作相关，判断是否是这种情况，可以看mainlog中搜索关键字”ANR in”,看这段信息的最下边，比如下面的信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ANRManager: <span class="number">100</span>% TOTAL: <span class="number">2</span>% user + <span class="number">2.1</span>% kernel + <span class="number">95</span>% iowait + <span class="number">0.1</span>% softirq</span><br></pre></td></tr></table></figure></p><p>很明显，IO占比很高，这个时候就需要查看trace日志看当时的callstack，或者在这段ANR点往前看0~4s，看看当时做的什么文件操作，这种场景有遇到过，常见解决方法是对耗时文件操作采取异步操作</p><p><label style="color:red">案例四：主线程有耗时的动作</label><br>这种情况是ANR类型问题里遇到最多的，比如网络访问，访问数据库之类的，都很容易造成主线程堵塞<br>这里以访问数据库来说，这类型引起的ANR，一般来讲看当时的CPU使用情况会发现user占比较高，看trace中主线程当时的信息会发现会有一些比如query像ContentProvider这种数据库的动作。这种情况下，还可以去看eventlog或者mainlog，在ANR发生前后打印出来的信息，比如访问数据库这种，在eventlog中搜索<code>&quot;am_anr&quot;</code>,然后看前后片段，会发现发生ANR的这个进程有很多数据库相关的信息，说明在发生ANR前后主线程一直在忙于访问数据库，这类型的问题常见于图库，联系人，彩短信应用。<br>所以这种问题的解决，一般考虑的是异步解决，异步解决并不是简单的new一个线程，要根据业务场景以及频率来决定，Android常见的异步AsyncTask, IntentService, 线程池(官方四种或自定义), new thread等，一般来说不建议直接new thread</p><p><label style="color:red">案例五：binder线程池被占满</label><br>系统对每个process最多分配15个binder线程，这个是谷歌的设计（/frameworks/native/libs/binder/ProcessState.cpp)<br>如果另一个process发送太多重复binder请求，那么就会导致接收端binder线程被占满，从而处理不了其它的binder请求<br>这本身就是系统的一个限制，如果应用未按照系统的要求来实现对应逻辑，那么就会造成问题。<br>而系统端是不会（也不建议）通过修改系统行为来兼容应用逻辑，否则更容易造成其它根据系统需求正常编写的应用反而出现不可预料的问题。<br>判断Binder是否用完，可在trace中搜关键字”binder_f”，如搜索到表示已用完，然后就要找log其他地方看是谁一直在消耗binder或者是有死锁发生<br>之前有遇到过压力测试手电筒应用，出现BInder线程池被占满情况，解决的思路就是降低极短时间内大量Binder请求的发生，修复的手法是发送BInder请求的函数中做时间差过滤，限定在500ms内最多执行一次</p><p><label style="color:red">案例六：JE或者NE导致ANR</label><br>这种场景有遇到过，ANR前出现频繁NE，NE所在的进程与ANR的进程有交互，在解决了NE后，ANR也不复存在，对于这类在ANR前有JE或者NE，一般思路是先解决JE或NE，再来看ANR是否还存在，如果还存在，那么就看trace 堆栈，如果不存在，则可以基本判定是JE或NE导致</p><p><label style="color:red">案例七：只存在于Monkey测试下</label><br>有些问题是只有在Monkey环境下才能跑出来，平时的user版本用户使用是不会出现的，这种问题的话就没有改动的意义。<br>比如下面这个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ActivityManager: Not finishing activity because controller resumed</span><br><span class="line"><span class="number">03</span>-<span class="number">18</span> <span class="number">07</span>:<span class="number">25</span>:<span class="number">50.901</span> <span class="number">810</span> <span class="number">870</span> I am_anr : [<span class="number">0</span>,<span class="number">25443</span>,android.process.media,<span class="number">1086897733</span>,<span class="function">Input dispatching timed <span class="title">out</span> <span class="params">(Waiting because no window has focus but there is a focused application that may eventually add a window when it finishes starting up.)</span>]</span></span><br></pre></td></tr></table></figure></p><p>发生这个ANR的原因是Contoller将resume的操作给拦截了, 导致Focus不过去, 从而导致ANR，User版本不会有Contoller, 所以不会出现这个 ANR. 所以这个 ANR 可以忽略.</p><hr><font color="#000000" size="2" face="楷体">春和日丽的周末，午后</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前年在简书中总结过ANR的一般解决思路，这两天拿出来看了下，觉得有必要重新梳理下，添加些近期遇到的案例&lt;br&gt;本文案例主要源于项目上实际遇到的问题，希望通过梳理之后能够对ANR问题能够快速定位，减少排查时间，同时在遇到棘手问题，能够更加从容。&lt;/p&gt;
&lt;p&gt;先说下三种常见类
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Launcher应用的重构之路</title>
    <link href="http://lihaizhou.top/2019/04/12/Launcher%E5%BA%94%E7%94%A8%E7%9A%84%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    <id>http://lihaizhou.top/2019/04/12/Launcher应用的重构之路/</id>
    <published>2019-04-12T12:19:11.000Z</published>
    <updated>2019-04-13T08:45:22.136Z</updated>
    
    <content type="html"><![CDATA[<p><strong>当前需求</strong><br>新项目遵循竞品的Launcher样式设计<br><strong>当前计划</strong><br>重新编写Launcher，并尽可能的弥补老框架的不足</p><p><strong>为什么需要重写Launcher？</strong><br>从样式上来看<br>新版Launcher的UI显示上与老版本差异较大，左右滑动的菜单页变化最大<br>从代码结构上看<br>一. 不符合单一原则:  视图层承担过重的业务数据处理逻辑, 老版本的视图层代码量比较大，主Activity及LauncherService均近两千行，承担的任务过重。其中包含了View的显示逻辑，也有数据处理的逻辑，也有接收广播相关，也有与Fwk的网络接口交互处理的逻辑，还有一些其他应用需要在返回Launcher后对自身的一些判断逻辑等。<br>二. 从整个应用的角度来看，很多界面存在重复的冗余工作，比如判断接收login广播，判断电量，判断是否高温，json报文的解析等，需要抽取公共的行为封装并下沉，尽可能的使上层的处理优雅且简单<br>三. 页面间的耦合严重，彼此相互持有，难以剥离开来，且项目代码中大多缺少注释，理解上存在难度</p><p>综合考虑觉得采取重写或许会合适些</p><p><strong>前期研究</strong><br>当前市面上存在MVP,MVVM等等架构，先对这些架构做简单介绍</p><label style="color:red">一. MVC</label><br>MVC全名是<code>Model View Controller</code>，是模型(<code>model</code>)－视图(<code>view</code>)－控制器(<code>controller</code>)的缩写<br>其中M层处理数据，业务逻辑等；V层处理界面的显示结果；C层起到桥梁的作用，来控制V层和M层通信以此来达到分离视图显示和业务逻辑层<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/1_MVC.png?raw=true" align="left" style=" width:300px;height:100 px"><br><br><br><br><br><br><br><br>视图层(<code>View</code>)<br>一般采用<code>XML</code>文件进行界面的描述<br>控制层(<code>Controller</code>)<br>Android的Controller层的重任通常落在了众多的Activity的肩上，这也是MVC架构的一大弊病<br>模型层(<code>Model</code>)<br>Model是与View无关，与业务相关的，对数据库的操作、对网络等的操作都应该在Model里面处理，对业务计算等操作也是必须放在的该层的。<br>1. View接受用户的交互请求；<br>2. View将请求转交给Controller；<br>3. Controller（用户做的动作比如：update数据，删除指定名字的学生等等）操作Model进行数据更新（根据用户指示，执行底层的数据动作等等）；<br>4. 数据更新之后，Model通知View数据变化；<br>5. View显示更新之后的数据；<br><br>举个例子: Launcher中下拉状态栏显示天气的动作，如果是用<code>MVC</code>的架构，则大概是这样的一个过程:<br>View即状态栏接收到用户下拉的动作，此时C层即Activity向M层请求天气的数据，M层获取天气的方法被调用后，获取天气无论成功或失败，都会将状态通知给监听者这里即C层进行视图更新，这里的通知通过接口回调方式，即C层需要实现天气是否成功的接口比如onError, onSuccess<br><br>弊端:<br>第一，View层和Controller层没有分离，逻辑比较混乱；<br>第二，同样因为 View和 Controller层的耦合，导致Activity或者Fragment很臃肿，代码量很大。如果Activity 中的业务量很大，就像我们的老版Launcher，那么问题就会体现出来，一个Activity的代码行数高达近2000行<br><br><label style="color:red">二.MVP(对MVC的改进版)</label><br><code>Presenter</code>负责逻辑的处理，Model提供数据，View负责显示<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/2_MVP.png?raw=true" align="left" style=" width:300px;height:100 px"><br><br><br><br><br><br><br><br><code>MVP</code>框架由3部分组成：<code>View</code>负责显示，<code>Presenter</code>负责逻辑处理，<code>Model</code>提供数据。在MVP模式里通常包含3个要素（加上View interface是4个）：<br>View:负责绘制UI元素、与用户进行交互(在Android中体现为Activity)<br><code>Model</code>:负责存储、检索、操纵数据(有时也实现一个Model interface用来降低耦合)<br><code>Presenter</code>:作为View与Model交互的中间纽带，处理与用户交互的负责逻辑。<br><code>View interface</code>:需要View实现的接口，View通过View interface与Presenter进行交互，降低耦合，方便进行单元测试<br><br>显而易见的变化时引入了P层，来承担之前C层的工作，而Activity的角色变成了仅仅显示的V层，但是考虑到V层需要和P层交互，所以这里增加了一层接口层View interface<br>概述下来就是:<br>当 View 需要更新数据时，首先去找 Presenter，然后 Presenter 去找 Model 请求数据，Model 获取到数据之后通知 Presenter，Presenter 再通知 View 更新数据，这样 Model 和 View 就不会直接交互了，所有的交互都由 Presenter 进行，Presenter 充当了桥梁的角色。很显然，Presenter 必须同时持有 View 和 Model 的对象的引用，才能在它们之间进行通信<br>好处很明显: view与model完全解耦，它们的通信都要经过presenter<br>弊端也显而易见: presenter会过于复杂庞大 ,  view与presenter交互频繁，耦合度高 , presenter持有activity引用，可能引起内存泄露，需要在Activity退出时做额外处理<br>还以我们的Launcher下拉状态栏为例，如果是用MVP的架构，则大概是这样的一个过程:<br>下拉状态栏动作触发后，调用Presenter中请求天气的接口，将自身传进去，Presenter的请求方法拿到Activity的引用，并在该请求方法中调用Model的请求数据方法，同样将自身传进去，Model层获取数据后无论失败与否都会回调Presenter的处理结果方法，Presenter的处理结果方法会回调View的处理结果方法，这样View层拿到数据并做视图更新<br>这里的实现常用做法一般会将Presenter和Model层的接口抽取出来，写对应的实现类，层次上看的更分明些<br><br><label style="color:red">三.MVVM</label><br><code>MVVM</code>可以算是<code>MVP</code>的升级版，其中的VM是<code>ViewModel</code>的缩写，ViewModel可以理解成是View的数据模型和Presenter的合体，ViewModel和View之间的交互通过Data Binding完成，而Data Binding可以实现双向的交互，这就使得视图和控制层之间的耦合程度进一步降低，关注点分离更为彻底，同时减轻了Activity的压力。<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/3_MVVM.png?raw=true" align="left" style=" width:600px;height:200 px"><br><br><br><br><br><br><br>MVVM架构通过<code>ViewModel</code>隔离了UI层和业务逻辑层，降低程序的耦合度。通过<code>DataBinding</code>实现<code>View</code>和<code>ViewModel</code>之间的绑定。<br>好处:<br>在MVVM中，这些都是通过数据驱动来自动完成的，数据变化后会自动更新UI，UI的改变也能自动反馈到数据层，数据成为主导因素。这样MVVM层在业务逻辑处理中只要关心数据，不需要直接和UI打交道，在业务处理过程中简单方便很多<br>MVVM模式中，数据是独立于UI的<br>在MVVM中，数据发生变化后，我们在工作线程直接修改（在数据是线程安全的情况下）ViewModel的数据即可，不用再考虑要切到主线程更新UI了，这些事情相关框架都帮我们做了<br>关于MVVM不做多介绍，最大的变化无非就是引入了<code>Data Binding</code>，使得数据成为核心驱动<br><br><code>MVC</code> -&gt; <code>MVP</code> -&gt; <code>MVVM</code> 这几个软件设计模式是一步步演化发展的，<code>MVVM</code>是从 <code>MVP</code>的进一步发展与规范，<code>MVP</code> 隔离了<code>MVC</code>中的 M 与 V 的直接联系后，靠 Presenter 来中转，所以使用<code>MVP</code> 时 P 是直接调用 View 的接口来实现对视图的操作的，这个 View 接口的东西一般来说是<code>showData</code>、<code>showprogress</code>等。M 与 V已经隔离了，方便测试了，但代码还不够优雅简洁，所以 <code>MVVM</code>就弥补了这些缺陷。在 MVVM 中就出现的 <code>Data Binding</code> 这个概念，意思就是 View 接口的 showData 这些实现方法可以不写了，通过Data Binding 来自动实现<br><br>老版launcher的可以认为是VC结构，M的数据处理内容多放在C层或者util包中，utils包下还是直接持有引用调用，所以只有两层V和C<br><br>研究下来，觉得如上的三种模式都不太适合我们的项目，理由如下<br>1. MVC到改进版MVP再到后期的MVVM架构，MVC本质上是MC架构，Model与Control层耦合严重，MVP在MVC的基础上增加一层接口解耦，MVVM在MVP的基础上又增加了一层接口，虽耦合性进一步降低，但是存在很多的接口定义导致代码的可读性降低<br>2. 可切入性不强: 不利于团队同事快速加入适应，存在学习成本<br>3. 如上的三种模式本质其实是思想的演变，边界并不是很明显，只要能够很好地解耦就是最好的解决方法<br><br><label style="color:red">综合比较下来，决定根据我们自身业务定制，采用Model+View+事件总线的方式</label><p><strong>Step1: 分层结构</strong><br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/4_%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84.png?raw=true" align="left" style=" width:700px;height:200 px"><br><br><br><br><br><br><br><br><br><br>这是我们Launcher的分层结构<br>业务逻辑层：<br>由业务需求来决定，如二维码展示，通知，SOS，绑定解绑等模块。通用功能抽取成独立于具体业务需求的模块，在模块内部实现通用的业务逻辑，同时对外暴露调用接口，不同的业务只需调用通用模块即可<br>基础框架层：<br>往往是根据功能来划分，可细分为网络支持功能、图片库、日志系统、数据库支持等模块<br>这一层目标是与具体业务解耦并对外提供良好的交互接口，后续的修改尽可能不在原来基础上修改而是采用扩展的方式，遵循开闭原则<br>lib库层：主要是三方的lib库，这些库为上层功能支持，如我们项目当前使用到的Glide,二维码等</p><p><strong>Step2: 分层结构基础上进一步细化</strong><br>为解决层与层以及同层之间的页面通信问题，引入数据处理框架<br>数据处理框架示意图:<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/5_%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%A1%86%E6%9E%B6.png?raw=true" align="left" style=" width:550px;height:600 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p><label style="color:red">Step2.1 为什么要引入数据处理模块？</label></p><ol><li>我们当前的项目中请求服务端数据比较直接，直接调用Fwk的接口，虽然该接口是我们自己实现做在Fwk中并已经做了封装，不过因接收到返回数据的处理逻辑很多都是做在视图层，     且页面间的数据交互是通过相互持有实例调用，页面间耦合严重</li><li>视图层收到报文后直接显示，缺少校验的过程，这部分逻辑若做在视图层，会增加代码量且不符合单一职责</li><li>因联网后有多处需要调用Fwk接口获取网络数据，比较分散，且开多个线程占用内存较多且和UI线程抢占CPU资源，有概率影响UI线程视图的刷新速度</li><li>将处理数据均放置在数据处理模块，便于后续问题定位，数据定位模块细分为网络数据上传，网络数据拉取，持久化数据存储，报文的解析校验等</li></ol><p>数据处理模块在这里起到了一个加工数据并中转的角色，这样视图层和网络层就解耦了，避免了视图层直接和网络层交互，后续所有视图层需要和网络数据交互，视图界面之间的数据交互均通过数据处理模块，这样一来还有个好处就是视图层的代码量将大幅减少，视图页面间的耦合性消除，代码的可读性增</p><p><label style="color:red">Step2.2 数据处理模块承担哪些工作？</label><br>将所有需要和网络交互的数据获取和上传，以及数据库读写，File文件的读写，网络JSON数据的解析提取关键信息等数据处理相关的代码均放置在数据处理模块中</p><p><label style="color:red">一. 并发多任务执行同步操作</label><br>考虑到我们的Launcher需要在联网后做很多同步服务端的操作，比如同步时间，同步功能控制，同步天气等，这些操作实时性要求较高，需要当请求到达时，工作线程已经存在。故采取开启线程池以支持这些同步操作能够并发进行，节省了创建线程的过程，并能保证任务超过核心线程数时能得到复用，一定程度上节省了内存开销，另外一个好处是最大程度上加快联网数据获取，同时线程池默认background优先级，尽可能的保证UI线程的视图绘制优先进行，这样开机后Launcher加载时就不可能出现视图卡顿的现象。<br>线程池的理想大小取决于被提交任务的类型以及机器的处理器数量，线程池的大小需要避免“过大”和“过小”这两种极端情况</p><ol><li>如果线程池过大，那么大量的线程将在相对很少的CPU和内存资源上发生竞争，这不仅会导致更高的内存使用量，而且还可能耗尽资源。</li><li>如果线程池过小，那么将导致许多空闲的处理器无法执行工作，从而降低吞吐率<br>一般来说，核心线程数设置为2N+1(N为核数)</li></ol><p><label style="color:red">为什么要自定义线程池而不采用自带线程池？</label><br>阿里java开发手册中有如下解释:<br>【强制】}新建线程时，必须通过线程池提供（AsyncTask 或者 ThreadPoolExecutor 或者其他形式自定义的线程池），不允许在应用中自行显式创建线程。 说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解 决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致 消耗完内存或者“过度切换”的问题。另外创建匿名线程不便于后续的资源使用分析， 对性能分析等会造成困扰。<br>【强制】}线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明： Executors 返回的线程池对象的弊端如下：<br><code>FixedThreadPool</code>和 <code>SingleThreadPool</code>： 允 许 的 请 求 队 列 长 度 为 <code>Integer.MAX_VALUE</code>，可能会堆积大量的请求，从而导致 OOM；<br><code>CachedThreadPool</code> 和 <code>ScheduledThreadPool</code>： 允 许 的 创 建 线 程 数 量 为 <code>Integer.MAX_VALUE</code>，可能会创建大量的线程，从而导致 OOM。<br>当前的自定义线程池设置了核心线程数为5，当请求任务到达时，若池中暂无可用线程，则会走到拒绝策略中，将请求存在BlockingQueue中，待有闲置线程后，则继续执行<br>当前封装的线程池暴露出一个接口供Launcher中所有需要异步的地方使用，减少了内存的开销并且统一管理所有异步操作</p><p><label style="color:red">二.  合法性校验</label><br>考虑到任何数据源都无法保证能够返回合法的数据，如果不对数据错误进行容错处理，直接返回给视图层的话，会导致视图层无数据甚至异常。之前存在功能控制收到的报文中存在key对应的value是空的情况，Launcher直接<code>Crash</code>，这样很不友好，所以容错处理还是需要的，在数据处理模块中做数据的校验处理，确保返回给视图层的数据是否有效不知道，起码是合法的，不会出现空数据的情况，以保证视图层不会崩溃或显示异常。</p><p><strong>Step2.3 如何和视图层通信？</strong><br>前期研究<br>当前市面比较流行的是LiveData以及较早的EventBus,Otto等，其中基于LiveData的事件总线最为轻量且是谷歌官方支持，支持感知组件生命周期，且不需要解注册，对内存泄露都做了防控<br>为何不采用市面成熟的事件总线？</p><ol><li>我们的工程是源码工程不是gradle工程，无法通过依赖添加，只有通过jar包引入，弊端是不方便升级</li><li>项目需要向下兼容，低版本上如4.4存在注解不能使用的情况</li><li><code>LiveData</code>需要依赖Android官方<code>Android Architecture Components</code>组件的<code>LiveData</code>，在<code>gradle</code>工程下比较方便，对于我们的源码工程且需要支持多平台，需要引入较多的依赖文件，且存在一定的学习成本</li><li>基于<code>LiveData</code>的事件总线框架成熟且功能强大，功能较多，引入需投入时间成本进行研究，不然后续若出问题排查会无从下手<br><strong>自行设计事件总线的原理</strong><br>对市面主流的<code>eventbus</code>做了研究，考虑到eventbus文件数多达近二十个，考虑后续方便移植且方便定位问题，考虑设计一个满足我们业务需求的简化版事件总线<br>当前设计的事件总线采用类似订阅发布机制，支持一对一以及一对多通信，传递的消息实体支持泛型，核心当前只有两支文件，当前测试下来基本满足需求为方便应用使用，暴露的接口很简单，只有一个发送以及订阅接口，后续根据业务需要再看是否需要扩展</li></ol><p><strong>Step2.4 视图框架设计</strong></p><ol><li>主界面:<br>考虑使用<code>Fragment+ViewPager</code>，<code>Fragment</code>用来承载视图，优势在于轻量，加载速度快<br>菜单页均是<code>RecyclerView</code>或<code>ListView</code>展示数据，考虑到这些ListView均需要<code>ViewHolder</code>来填充视图，需要Adapter来填充数据，如果每个需要ListView的界面都维护各自的一套ViewHolder及Adapter，那么页面逻辑变得臃肿，整个Launcher的代码量也会比较大，所以这里考虑采用如下方式:<br>封装一个Adapter公共处理类，提供多种构造函数，其中有一个type参数，用来标明使用哪个ViewHolder，在Adapter的getView方法中，根据type参数，获取具体的ViewHolder实现<br>经过封装之后，视图层菜单页只需要向Adapter公共处理类传入一个type参数即可得到对应的Adapter，等数据返回到视图层后，再将数据传给Adapter公共处理类，其他什么都不用管，就可以展示列表数据了。这样设计的目的是将公共的行为抽取出来，大幅度减少菜单页的代码量，后续增加菜单页也会变得很简单。</li><li>下拉栏界面<br>分为<code>statusbar</code>以及通知栏，这里的诸多数据均需要调用系统的接口，比如电量，信号格，数据类型，将这些接口单独放在公共模块中，便于其他页面也能调用到</li><li>表盘界面<br>即待机界面，包括长按后进入表盘样式选择界面，这里已经做好了基类封装公共行为的操作，使得表盘样式的扩展变得很容易，只需要继承基类，改下布局文件即可</li></ol><p><strong>Step2.5 代码结构划分</strong><br>当前代码结构划分如下:<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/6_1_%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.png?raw=true" align="left" style=" width:600px;height:600 px"><br><br><br><br><br><br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/6_2_%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.png?raw=true" align="left" style=" width:600px;height:600 px"><br><br><br><br><br><br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/6_3_%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.png?raw=true" align="left" style=" width:600px;height:100 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p><strong>老项目上上存在的代码问题</strong></p><ol><li>存在不再使用的库文件但是并未移除，对库文件拿来直接用，对于所需功能过大过全，缺少裁剪过程，使用直接调用，与本身应用代码耦合度高，建议二次封装；</li><li>重复性代码较多，如接收心跳，监测电量，熄灭屏等</li><li>变量名和方法名很随意，建议驼峰命名，缺少注释，可读性差，添加类文件和文件夹，后面因为种种原因废弃，由于缺少注释且代码可读性差，导致成为僵尸代码，不利于后续接手人员维护。</li><li>逻辑过于冗长的方法，一大堆的if else，建议拆分优化；</li><li>没有考虑一些边界条件，比如请求失败，没有数据的情况，缺少容错处理；</li><li>代码存在很多容易造成空指针代码，最常见调用equals方法时，未遵循 “常量”.equals(变量) </li><li>static滥用，为内存泄露埋下伏笔</li><li>异步线程的滥用，使用new Thread方式过于简单粗暴，一个线程占用约1M内存，过多的开启会耗用不少内存</li><li>调用大多通过直接new对象方式持有引用，占用内存且强耦合，针对不同场景考虑单例或消息总线通信</li><li>代码美观方面，缺少缩进对齐随意空行，代码不规整</li><li>新加图片未进行压缩，建议png 图片使用 tinypng 或者类似工具压缩处理，减少包体积</li><li>对主线程子线程运行环境存在使用不当，Activity的生命周期方法中，广播的onreceive方法以及普通service中，存在耗时操作</li><li>修改已有稳定方法比较随意，往往塞进一大堆代码，带来隐患，建议进行扩展而不是修改原有设计，或者新增单独接口</li><li>对异步任务被中断情况，缺少资源清理，如AsyncTask或Handler异步更新UI，对任务未完成界面被退出情况，需要在ondestory或onPause中进行任务清理</li><li>过度的try catch，特别是catch了Exception这种基类，导致存在异常都被catch掉，将bug隐蔽起来，导致后期排查比较困难</li><li>界面间随意传递上下文context，为内存泄漏埋下伏笔</li></ol><hr><font color="#000000" size="2" face="楷体">good night！</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;当前需求&lt;/strong&gt;&lt;br&gt;新项目遵循竞品的Launcher样式设计&lt;br&gt;&lt;strong&gt;当前计划&lt;/strong&gt;&lt;br&gt;重新编写Launcher，并尽可能的弥补老框架的不足&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么需要重写Launcher？&lt;/str
      
    
    </summary>
    
      <category term="架构" scheme="http://lihaizhou.top/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 系统层捕捉所有应用崩溃情况推送到钉钉实践之路</title>
    <link href="http://lihaizhou.top/2019/03/11/Android-%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%8D%95%E6%8D%89%E6%89%80%E6%9C%89%E5%BA%94%E7%94%A8%E5%B4%A9%E6%BA%83%E6%83%85%E5%86%B5%E6%8E%A8%E9%80%81%E5%88%B0%E9%92%89%E9%92%89%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF/"/>
    <id>http://lihaizhou.top/2019/03/11/Android-系统层捕捉所有应用崩溃情况推送到钉钉实践之路/</id>
    <published>2019-03-11T14:19:11.000Z</published>
    <updated>2019-04-13T08:45:40.637Z</updated>
    
    <content type="html"><![CDATA[<p><strong>项目痛点</strong><br>出现偶现崩溃或<code>ANR</code>，因为没有开启日志开关，后面尝试复现又比较困难，研发同事比较苦恼，无从下手<br>还有一个测试同事抓取日志后还要记录时间点，再上传到JIRA上，研发同事下载日志还需要搜索报错点，整个流程比较费时</p><p><strong>初步想法</strong><br>可不可以将所有<code>ANR</code>,<code>Crash</code>等出错信息的关键日志片段直接传给服务器，在后面的摸索过程中发现钉钉可以提供对外的URL接口，这样的话直接传给钉钉就很方便了，正好平时的办公用的也是这个软件，这样一来就省去了很多的步骤，一步到位</p><p>以下是实做的步骤记录，只是实现了一个初稿，后面还需要不断优化完善</p><p><strong>Step1： 获取钉钉的<code>Webhook</code>地址</strong><br>这个地址后面作为推送的目标地址</p><p>在钉钉中添加机器人接口的步骤参见官网文档<br><a href="https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.XJQ2yZ&amp;treeId=257&amp;articleId=105735&amp;docType=1" target="_blank" rel="noopener">https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.XJQ2yZ&amp;treeId=257&amp;articleId=105735&amp;docType=1</a></p><p>通过以上步骤拿到了Laucnher的Webhook地址，如下:<br><a href="https://oapi.dingtalk.com/robot/send?access_token=a937a86122149aa52a694dd79fae2cdec1c7e448c62bff31471088ec13e941" target="_blank" rel="noopener">https://oapi.dingtalk.com/robot/send?access_token=a937a86122149aa52a694dd79fae2cdec1c7e448c62bff31471088ec13e941</a></p><p><strong>Step2：源码层增加上报机制</strong><br>之所以考虑在源码层中修改，是因为我们需要监测系统中所有应用的出错情况，想到<code>AMS</code>中的<code>Crash</code>弹框，猜想其中一定有相关的写入报错日志的操作</p><p><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/handleApplicationCrash.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br></p><p>这里调用了<code>handleApplicationCrashInner</code>这个函数，接着看这个函数<br><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/handleApplicationCrashInner.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br></p><p>这里追加了一行日志，在应用层添加会造成<code>crash</code>的代码片段，看看这行日志打出的信息</p><p><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/crashLog.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>这里会打出<code>eventtype</code>类型，报错进程，以及关键的堆栈信息，其中的<code>eventtype</code>包括了<code>watchdog</code>、<code>anr</code>、<code>wtf</code>、<code>lowmem</code>、<code>native_crash</code>、<code>crash</code><br>完全满足我们的要求，接下来就是如何把这段发给钉钉了<br>在<code>handleApplicationCrashInner</code>中增加接口<code>reportAllErrorToXunDingTalk</code></p><p><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/AddReportFunction.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br></p><p><code>reportAllErrorToXunDingTalk</code>接口如下：<br><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/report1.png?raw=true" align="left" style=" width:700px;height:300 px"><br><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/report2.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p>这个时候应用端报错的话话，钉钉群会收到消息<br><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/dingding.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><hr><font color="#000000" size="2" face="楷体">good night!</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;项目痛点&lt;/strong&gt;&lt;br&gt;出现偶现崩溃或&lt;code&gt;ANR&lt;/code&gt;，因为没有开启日志开关，后面尝试复现又比较困难，研发同事比较苦恼，无从下手&lt;br&gt;还有一个测试同事抓取日志后还要记录时间点，再上传到JIRA上，研发同事下载日志还需要搜索报错点，
      
    
    </summary>
    
      <category term="性能" scheme="http://lihaizhou.top/categories/%E6%80%A7%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>对优化代码的一点思考</title>
    <link href="http://lihaizhou.top/2018/07/03/%E5%AF%B9%E4%BC%98%E5%8C%96%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <id>http://lihaizhou.top/2018/07/03/对优化代码的一点思考/</id>
    <published>2018-07-03T15:50:55.000Z</published>
    <updated>2019-04-13T08:44:53.145Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看了项目上的代码后，发现随着项目功能的不断扩充，代码量已经比较庞大，很多业务代码看着一头雾水，可谓又臭又长，还有很多类似的代码多次重复出现，对静态static关键字的滥用，出了问题debug起来异常痛苦。这几天一直在思考，如果要优化代码的话，应该从哪些地方着手呢？<br>如下是个人总结，比较简单基础，不涉及设计模式，后面会找时间写设计模式相关的内容</p><p><strong>1.避免又臭又长的函数</strong><br>这点看项目中的代码时，经常能看到一些动辄就是上百行的函数，一大堆业务逻辑代码封在一个函数，看的十分头疼，如果写这个函数的同事离职了，后续接手的同事的话，那么对接手的同事会是一件很痛苦的事，这种巨无霸函数阅读起来很困难，往往读着读着就迷失了，让人丧失往下看的兴趣。另外一点就是，这种很长的函数，往往可能会存在一些重复的代码，这些重复的代码剥离出来的话，可以供其他函数调用，这样也可以降低整个工程的代码量。<br>函数尽可能的简洁短小，一个函数只做与函数名相关的事，很长的函数需要考虑按照功能独立出来为一个个单独的函数，并为这些独立出来的函数取一个与功能符合的名字，这样代码的阅读性大大提高。这里需要把握好一个度，不是说函数越短越好，比如说只有一两句的代码也封装成一个函数，这就有点物极必反了。<br>另外，如果这个函数比较复杂，参数比较多，也可以考虑独立出来一个类，将参数作为类的属性</p><p><strong>2.避免非常复杂的赋值表达式或if判断条件</strong><br>项目代码中经常会看到一些非常长的赋值表达式或者if判断中的判断条件，可能起初并不长，后面业务需要，增加一些限制判断条件，渐渐的就变成了一个非常长的表达式，有时候在界面中看不下还有鼠标往右拖动才能看到后面的，这样的代码看着十分蛋疼，容易迷失<br>这种很长的表达式就可以考虑分解出来，引入解释型变量，这样可阅读性大大增强。如果这个表达式其他地方也会用到，这个时候就可以考虑独立出来为一个函数，也方便复用。如果表达式中有不同功能的代码，可以按照功能分解出不止一个函数</p><p><strong>3.避免对函数参数进行赋值</strong><br>项目代码中发现有些函数的传参进来后根据一些业务判断被直接赋了其他值，这个也是十分不建议的，这种做法改变了原始输入值，因为这个函数后面可能还会需要用到原始值，这里最好的做法是引入临时变量，将传参赋值给这个临时变量，这样就不会改变原始值</p><p><strong>4.避免一个函数过多的参数</strong><br>项目代码中经常会出现一个函数有多达五六个参数，看起来比较头疼，比较舒服的函数是一两个参数，最舒服的情况是没有参数，这样的代码最易复用，看起来阅读性也比较强</p><p><strong>5.避免一个类中出现和该类不相干的函数</strong><br>也就是尽可能遵循单一职责原则，与该类不相干的函数应考虑移走，放在更合适的地方<br>一个项目变得庞大的时候，很多时候需要增加接口，为了图省事直接就在需要修改的地方后面增加一个函数，久而久之，这个类中多出很多和该类不相干的函数，容易看的一头雾水</p><p><strong>6.避免不同类中同样功能的函数</strong><br>不同类中出现同样功能的函数，这个是否观察不同类是不是同级别的，是否可以搞一个父类出来定义这些基础的行为，这样不同子类就不用再写多个重复功能的函数了，如果这些不同类看起来扯不上联系，可以将这些同样功能的函数剥离出来放到比如工具类中<br>宗旨只有一个: 尽可能重复性的写相同的代码</p><p><strong>7.一堆组合起来关联性强的数据可以考虑做成实体类</strong><br>定义成实体类后，数据更好管理，代码结构更加清晰，也便于后面功能迭代，常用做法给这个实体类定义set, get方法</p><p><strong>8.避免业务逻辑和UI界面类混合在一起</strong><br>这在项目代码中很常见，随便打开一个Activity类，其中都有大量的业务逻辑代码，随着项目功能的不断迭代，业务逻辑变得十分庞大，整个界面类显得十分臃肿，难以阅读，我们在工作过程中往往追求功能ok就好，没有考虑将代码按照功能职责分层剥离<br>这个时候就可以考虑引入MVP架构设计，这一点因叙述起来篇幅会比较大，后面会单独写一篇文章讨论</p><p><strong>9.抽取子类共同行为放到父类中</strong><br>子类中有共同的行为的话，可以抽取出来放到父类中作为一个模板函数，可以精简不少代码量，这个模板函数意味着不会随着功能迭代或者子类增加而变动，对一些特殊的函数只有个别子类才会用到的就放在子类里</p><hr><font color="#000000" size="2" face="楷体">住所，汗衫</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看了项目上的代码后，发现随着项目功能的不断扩充，代码量已经比较庞大，很多业务代码看着一头雾水，可谓又臭又长，还有很多类似的代码多次重复出现，对静态static关键字的滥用，出了问题debug起来异常痛苦。这几天一直在思考，如果要优化代码的话，应该从哪些地方着手呢？&lt;b
      
    
    </summary>
    
      <category term="性能" scheme="http://lihaizhou.top/categories/%E6%80%A7%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Android输入系统系列(4)----分发输入消息</title>
    <link href="http://lihaizhou.top/2018/07/03/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-4-%E5%88%86%E5%8F%91%E8%BE%93%E5%85%A5%E6%B6%88%E6%81%AF/"/>
    <id>http://lihaizhou.top/2018/07/03/Android输入系统系列-4-分发输入消息/</id>
    <published>2018-07-03T15:14:08.000Z</published>
    <updated>2019-04-13T08:45:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面讲过C++中起来的线程循环函数是threadLoop，下面看看InputDispatcherThread这一分发消息的线程的循环体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool InputDispatcherThread::threadLoop() &#123;</span><br><span class="line">    mDispatcher-&gt;dispatchOnce();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只是简单的调用了InputDispatcher的dispatchOnce()<br>接着看这个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputDispatcher::dispatchOnce() &#123;</span><br><span class="line">    nsecs_t nextWakeupTime = LONG_LONG_MAX;</span><br><span class="line">    &#123; <span class="comment">// acquire lock</span></span><br><span class="line">        <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</span><br><span class="line">        mDispatcherIsAliveCondition.broadcast();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Run a dispatch loop if there are no pending commands.</span></span><br><span class="line">        <span class="comment">// The dispatch loop might enqueue commands to run afterwards.</span></span><br><span class="line">        <span class="keyword">if</span> (!haveCommandsLocked()) &#123;</span><br><span class="line">            dispatchOnceInnerLocked(&amp;nextWakeupTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里核心的代码只有一行dispatchOnceInnerLocked，查看haveCommandsLocked()代码得知当mCommandQueue不为空时，<br>便会调用dispatchOnceInnerLocked函数来进行分发消息</p><p>下面接着看dispatchOnceInnerLocked这个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputDispatcher::dispatchOnceInnerLocked(nsecs_t* nextWakeupTime) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="comment">// Ready to start a new event.</span></span><br><span class="line">    <span class="comment">// If we don't already have a pending event, go grab one.</span></span><br><span class="line">    <span class="keyword">if</span> (! mPendingEvent) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mInboundQueue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Inbound queue has at least one entry.</span></span><br><span class="line">            <span class="comment">//队列不为空的话，从队列中取消息</span></span><br><span class="line">            mPendingEvent = mInboundQueue.dequeueAtHead();</span><br><span class="line">            traceInboundQueueLengthLocked();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//省略部分代码   </span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">switch</span> (mPendingEvent-&gt;type) &#123;</span><br><span class="line">     <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="comment">//消息类型是按键消息</span></span><br><span class="line">    <span class="keyword">case</span> EventEntry::TYPE_KEY: &#123;</span><br><span class="line">        KeyEntry* typedEntry = static_cast&lt;KeyEntry*&gt;(mPendingEvent);</span><br><span class="line">        <span class="keyword">if</span> (isAppSwitchDue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAppSwitchKeyEventLocked(typedEntry)) &#123;</span><br><span class="line">                resetPendingAppSwitchLocked(<span class="keyword">true</span>);</span><br><span class="line">                isAppSwitchDue = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED) &#123;</span><br><span class="line">                dropReason = DROP_REASON_APP_SWITCH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED</span><br><span class="line">                &amp;&amp; isStaleEventLocked(currentTime, typedEntry)) &#123;</span><br><span class="line">            dropReason = DROP_REASON_STALE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED &amp;&amp; mNextUnblockedEvent) &#123;</span><br><span class="line">            dropReason = DROP_REASON_BLOCKED;</span><br><span class="line">        &#125;</span><br><span class="line">        done = dispatchKeyLocked(currentTime, typedEntry, &amp;dropReason, nextWakeupTime);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数主要工作先是从mInboundQueue中取消息，这个mInboundQueue是不是很眼熟，就是上篇文章中讲述的读取消息最后存放到mInboundQueue中，读取到消息后呢，根据消息的类型进行处理，这里还是以Key消息为例，调用到了dispatchKeyLocked这一函数，这里就正式开始了消息分发之旅了</p><p>后面便是层层调用分发，历程还是比较复杂的，这里就不细细分解，绘制了一张流程图如下</p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/07/03/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-4-%E5%88%86%E5%8F%91%E8%BE%93%E5%85%A5%E6%B6%88%E6%81%AF/%E6%B5%81%E7%A8%8B%E5%9B%BE.png?raw=true" align="left" style=" width:300px;height:150 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><hr><font color="#000000" size="2" face="楷体">住所，晚上，汗衫，电脑前，看着世界杯瑞士对阵瑞典队</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面讲过C++中起来的线程循环函数是threadLoop，下面看看InputDispatcherThread这一分发消息的线程的循环体&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Android输入系统系列(3)----读取RawEvent</title>
    <link href="http://lihaizhou.top/2018/07/03/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-3-%E8%AF%BB%E5%8F%96RawEvent/"/>
    <id>http://lihaizhou.top/2018/07/03/Android输入系统系列-3-读取RawEvent/</id>
    <published>2018-07-03T14:10:50.000Z</published>
    <updated>2019-04-13T08:46:04.420Z</updated>
    
    <content type="html"><![CDATA[<p>之前系列文章(1)中提到InputManager中的start方法里调用了ReaderThread-&gt;run，可是我们在InputReader中没有看到run方法<br>这一点和java中的线程运行方式有点区别，C下的线程运行是threadLoop这个方法，这是个虚函数，追溯到父类线程中是有run这个方法<br>层层往下跟就会跟到threadLoop方法，如果threadLoop返回false则会退出循环</p><p>下面看下InputReader的threadLoop方法，可见这里返回true，说明是反复循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">frameworks\<span class="keyword">native</span>\services\inputflinger\InputReader.cpp</span><br><span class="line">bool InputReaderThread::threadLoop() &#123;</span><br><span class="line">    mReader-&gt;loopOnce();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面着重看下这里的loopOnce函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">frameworks\<span class="keyword">native</span>\services\inputflinger\InputReader.cpp</span><br><span class="line"><span class="keyword">void</span> InputReader::loopOnce() &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="comment">//上文中讲过此处的getEvents，作用是获取Event，读取到的Event保存在mEventBuffer中，并返回Event的数量</span></span><br><span class="line">    size_t count = mEventHub-&gt;getEvents(timeoutMillis, mEventBuffer, EVENT_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">// acquire lock</span></span><br><span class="line">        <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</span><br><span class="line">        mReaderIsAliveCondition.broadcast();</span><br><span class="line">        <span class="comment">//判断读取到的event数量，大于0则进入processEventsLocked处理</span></span><br><span class="line">        <span class="keyword">if</span> (count) &#123;</span><br><span class="line">            processEventsLocked(mEventBuffer, count);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125; <span class="comment">// release lock</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send out a message that the describes the changed input devices.</span></span><br><span class="line">    <span class="keyword">if</span> (inputDevicesChanged) &#123;</span><br><span class="line">        mPolicy-&gt;notifyInputDevicesChanged(inputDevices);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flush queued events out to the listener.</span></span><br><span class="line">    <span class="comment">// This must happen outside of the lock because the listener could potentially call</span></span><br><span class="line">    <span class="comment">// back into the InputReader's methods, such as getScanCodeState, or become blocked</span></span><br><span class="line">    <span class="comment">// on another thread similarly waiting to acquire the InputReader lock thereby</span></span><br><span class="line">    <span class="comment">// resulting in a deadlock.  This situation is actually quite plausible because the</span></span><br><span class="line">    <span class="comment">// listener is actually the input dispatcher, which calls into the window manager,</span></span><br><span class="line">    <span class="comment">// which occasionally calls into the input reader.</span></span><br><span class="line">    mQueuedListener-&gt;flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文介绍过EventHub的getEvent的大体流程就是:<br>读取每个设备的数据，形成RawEvent结构后放到readBuffer中，如果没有输入事件，将调用epoll_wait()函数阻塞等待</p><p>所以InputReaderThread线程大部分时间都是在epoll_wait()上等待，如果某个设备上有事件上来，则唤醒线程，从设备中读取数据，读取到的数据形成RawEvent形式，存放在mEventBuffer中，然后调用processEventsLocked进行处理</p><p>下面来看看processEventsLocked这一函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputReader::processEventsLocked(<span class="keyword">const</span> RawEvent* rawEvents, size_t count) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> RawEvent* rawEvent = rawEvents; count;) &#123;</span><br><span class="line">        int32_t type = rawEvent-&gt;type;</span><br><span class="line">        size_t batchSize = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (type &lt; EventHubInterface::FIRST_SYNTHETIC_EVENT) &#123;</span><br><span class="line">            int32_t deviceId = rawEvent-&gt;deviceId;</span><br><span class="line">            <span class="keyword">while</span> (batchSize &lt; count) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rawEvent[batchSize].type &gt;= EventHubInterface::FIRST_SYNTHETIC_EVENT</span><br><span class="line">                        || rawEvent[batchSize].deviceId != deviceId) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                batchSize += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">#if DEBUG_RAW_EVENTS</span><br><span class="line">            ALOGD(<span class="string">"BatchSize: %d Count: %d"</span>, batchSize, count);</span><br><span class="line">#endif</span><br><span class="line">            processEventsForDeviceLocked(deviceId, rawEvent, batchSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (rawEvent-&gt;type) &#123;</span><br><span class="line">            <span class="keyword">case</span> EventHubInterface::DEVICE_ADDED:</span><br><span class="line">                addDeviceLocked(rawEvent-&gt;when, rawEvent-&gt;deviceId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> EventHubInterface::DEVICE_REMOVED:</span><br><span class="line">                removeDeviceLocked(rawEvent-&gt;when, rawEvent-&gt;deviceId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> EventHubInterface::FINISHED_DEVICE_SCAN:</span><br><span class="line">                handleConfigurationChangedLocked(rawEvent-&gt;when);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                ALOG_ASSERT(<span class="keyword">false</span>); <span class="comment">// can't happen</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count -= batchSize;</span><br><span class="line">        rawEvent += batchSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的RawEvent分为两类，一类是设备发生变化的Event，包括添加设备，移除设备和扫描设备。另一类是设备自身产生的Event，例如键盘的按键Event，对于这一类Event，会从RawEvent数组中取出连续的同类Event，通过processEventsForDeviceLocked函数进行一并处理，这也是接下来讨论的重点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputReader::processEventsForDeviceLocked(int32_t deviceId,</span><br><span class="line">        <span class="keyword">const</span> RawEvent* rawEvents, size_t count) &#123;</span><br><span class="line">    ssize_t deviceIndex = mDevices.indexOfKey(deviceId);</span><br><span class="line">    <span class="keyword">if</span> (deviceIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGW(<span class="string">"Discarding event for unknown deviceId %d."</span>, deviceId);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InputDevice* device = mDevices.valueAt(deviceIndex);</span><br><span class="line">    <span class="keyword">if</span> (device-&gt;isIgnored()) &#123;</span><br><span class="line">        <span class="comment">//ALOGD("Discarding event for ignored deviceId %d.", deviceId);</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    device-&gt;process(rawEvents, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里根据传进来的deviceId生成InputDevice对象，关键代码在最后一句，这里调用了InputDevice的process函数<br>frameworks\native\services\inputflinger\InputReader.cpp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputDevice::process(<span class="keyword">const</span> RawEvent* rawEvents, size_t count) &#123;</span><br><span class="line">    <span class="comment">// Process all of the events in order for each mapper.</span></span><br><span class="line">    <span class="comment">// We cannot simply ask each mapper to process them in bulk because mappers may</span></span><br><span class="line">    <span class="comment">// have side-effects that must be interleaved.  For example, joystick movement events and</span></span><br><span class="line">    <span class="comment">// gamepad button presses are handled by different mappers but they should be dispatched</span></span><br><span class="line">    <span class="comment">// in the order received.</span></span><br><span class="line">    size_t numMappers = mMappers.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> RawEvent* rawEvent = rawEvents; count--; rawEvent++) &#123;</span><br><span class="line">#if DEBUG_RAW_EVENTS</span><br><span class="line">        ALOGD(<span class="string">"Input event: device=%d type=0x%04x code=0x%04x value=0x%08x when=%lld"</span>,</span><br><span class="line">                rawEvent-&gt;deviceId, rawEvent-&gt;type, rawEvent-&gt;code, rawEvent-&gt;value,</span><br><span class="line">                rawEvent-&gt;when);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mDropUntilNextSync) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rawEvent-&gt;type == EV_SYN &amp;&amp; rawEvent-&gt;code == SYN_REPORT) &#123;</span><br><span class="line">                mDropUntilNextSync = <span class="keyword">false</span>;</span><br><span class="line">#if DEBUG_RAW_EVENTS</span><br><span class="line">                ALOGD(<span class="string">"Recovered from input event buffer overrun."</span>);</span><br><span class="line">#endif</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">#if DEBUG_RAW_EVENTS</span><br><span class="line">                ALOGD(<span class="string">"Dropped input event while waiting for next input sync."</span>);</span><br><span class="line">#endif</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rawEvent-&gt;type == EV_SYN &amp;&amp; rawEvent-&gt;code == SYN_DROPPED) &#123;</span><br><span class="line">            ALOGI(<span class="string">"Detected input event buffer overrun for device %s."</span>, getName().string());</span><br><span class="line">            mDropUntilNextSync = <span class="keyword">true</span>;</span><br><span class="line">            reset(rawEvent-&gt;when);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; numMappers; i++) &#123;</span><br><span class="line">                InputMapper* mapper = mMappers[i];</span><br><span class="line">                mapper-&gt;process(rawEvent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看这个函数开头的一段注解，大意就是根据不同的Input设备消息调用不同的inputMapper,因为Input设备有很多种，所以Inputmapper也有很多种，这个函数的作用是根据不同的Input设备调用对应的InputMapper的process来处理<br>InputReader.cpp这支文件中有很多不同类型的InputMapper，这里例举其中的KeyboardInputMapper进行说明<br>frameworks\native\services\inputflinger\InputReader.cpp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> KeyboardInputMapper::process(<span class="keyword">const</span> RawEvent* rawEvent) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (rawEvent-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> EV_KEY: &#123; <span class="comment">//按键消息</span></span><br><span class="line">        int32_t scanCode = rawEvent-&gt;code;</span><br><span class="line">        int32_t usageCode = mCurrentHidUsage;</span><br><span class="line">        mCurrentHidUsage = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isKeyboardOrGamepadKey(scanCode)) &#123;</span><br><span class="line">            processKey(rawEvent-&gt;when, rawEvent-&gt;value != <span class="number">0</span>, scanCode, usageCode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看processKey这个函数，这个函数比较长</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> KeyboardInputMapper::processKey(nsecs_t when, bool down, int32_t scanCode,</span><br><span class="line">        int32_t usageCode) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="function">NotifyKeyArgs <span class="title">args</span><span class="params">(when, getDeviceId()</span>, mSource, policyFlags,</span></span><br><span class="line"><span class="function">            down ? AKEY_EVENT_ACTION_DOWN : AKEY_EVENT_ACTION_UP,</span></span><br><span class="line"><span class="function">            AKEY_EVENT_FLAG_FROM_SYSTEM, keyCode, scanCode, keyMetaState, downTime)</span>;</span><br><span class="line">    getListener()-&gt;notifyKey(&amp;args);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数主要工作是将扫描码转换为键盘码，然后调用了getListener()-&gt;notifyKey(&amp;args); </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InputListenerInterface* InputReader::ContextImpl::getListener() &#123;</span><br><span class="line">    <span class="keyword">return</span> mReader-&gt;mQueuedListener.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> QueuedInputListener::notifyKey(<span class="keyword">const</span> NotifyKeyArgs* args) &#123;</span><br><span class="line">    mArgsQueue.push(<span class="keyword">new</span> NotifyKeyArgs(*args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只是将args参数放到了mArgsQueue中</p><p>往上看最开始的InputReader::loopOnce()中mQueuedListener-&gt;flush();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> QueuedInputListener::flush() &#123;</span><br><span class="line">    size_t count = mArgsQueue.size();</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        NotifyArgs* args = mArgsQueue[i];</span><br><span class="line">        args-&gt;notify(mInnerListener);</span><br><span class="line">        delete args;</span><br><span class="line">    &#125;</span><br><span class="line">    mArgsQueue.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和mArgsQueue牵扯上了，这里的flush()函数作用是将mArgsQueue中的NotifyArgs都拿出来，调用它们的notify函数<br>这里还是以Key为例，实际的对象类型是NotifyKeyArgs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NotifyKeyArgs::notify(<span class="keyword">const</span> sp&lt;InputListenerInterface&gt;&amp; listener) <span class="keyword">const</span> &#123;</span><br><span class="line">    listener-&gt;notifyKey(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的listener指针在构造InputReader是作为参数的，追踪源码得知这一listener实际是指向InputDispatcher的指针</p><p>接着看InputDispatcher的notifyKey<br>\frameworks\native\services\inputflinger\InputDispatcher.cpp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputDispatcher::notifyKey(<span class="keyword">const</span> NotifyKeyArgs* args) &#123;</span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line">    KeyEvent event;</span><br><span class="line">    event.initialize(args-&gt;deviceId, args-&gt;source, args-&gt;action,</span><br><span class="line">            flags, keyCode, args-&gt;scanCode, metaState, <span class="number">0</span>,</span><br><span class="line">            args-&gt;downTime, args-&gt;eventTime);</span><br><span class="line"></span><br><span class="line">    mPolicy-&gt;interceptKeyBeforeQueueing(&amp;event, <span class="comment">/*byref*/</span> policyFlags);</span><br><span class="line"></span><br><span class="line">    bool needWake;</span><br><span class="line">    &#123; <span class="comment">// acquire lock</span></span><br><span class="line">        mLock.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shouldSendKeyToInputFilterLocked(args)) &#123;</span><br><span class="line">            mLock.unlock();</span><br><span class="line"></span><br><span class="line">            policyFlags |= POLICY_FLAG_FILTERED;</span><br><span class="line">            <span class="keyword">if</span> (!mPolicy-&gt;filterInputEvent(&amp;event, policyFlags)) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// event was consumed by the filter</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mLock.lock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int32_t repeatCount = <span class="number">0</span>;</span><br><span class="line">        KeyEntry* newEntry = <span class="keyword">new</span> KeyEntry(args-&gt;eventTime,</span><br><span class="line">                args-&gt;deviceId, args-&gt;source, policyFlags,</span><br><span class="line">                args-&gt;action, flags, keyCode, args-&gt;scanCode,</span><br><span class="line">                metaState, repeatCount, args-&gt;downTime);</span><br><span class="line"></span><br><span class="line">        needWake = enqueueInboundEventLocked(newEntry);</span><br><span class="line">        mLock.unlock();</span><br><span class="line">    &#125; <span class="comment">// release lock</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">        mLooper-&gt;wake();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里利用函数的参数NotifyKeyArgs创建了KeyEntry对象，然后调用函数enqueueInboundEventLocked将创建好的KeyEntry对象加入到队列中，这里顺便看下enqueueInboundEventLocked函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InputDispatcher::enqueueInboundEventLocked(EventEntry* entry) &#123;</span><br><span class="line">    bool needWake = mInboundQueue.isEmpty();</span><br><span class="line">    mInboundQueue.enqueueAtTail(entry);</span><br><span class="line">    traceInboundQueueLengthLocked();</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到创建好的KeyEntry对象是被加入到了mInboundQueue队列中去了</p><p>自此，读取消息流程分析结束</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，汗衫，听着歌，最近有点丧</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前系列文章(1)中提到InputManager中的start方法里调用了ReaderThread-&amp;gt;run，可是我们在InputReader中没有看到run方法&lt;br&gt;这一点和java中的线程运行方式有点区别，C下的线程运行是threadLoop这个方法，这是个虚函
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Android输入系统系列(2)----EventHub</title>
    <link href="http://lihaizhou.top/2018/06/12/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-2-EventHub/"/>
    <id>http://lihaizhou.top/2018/06/12/Android输入系统系列-2-EventHub/</id>
    <published>2018-06-12T14:11:02.000Z</published>
    <updated>2019-04-13T08:46:11.008Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章中说到eventhub是在NativeInputManager的构造函数new出来</p><p>一台移动设备能产生输入消息的部件很多，包括键盘，触摸屏，按键等。EventHub的作用就是把所有这些设备产生的消息统一成一种格式，再发往上层进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">EventHub::EventHub(<span class="keyword">void</span>) :</span><br><span class="line">        mBuiltInKeyboardId(NO_BUILT_IN_KEYBOARD), mNextDeviceId(<span class="number">1</span>), mControllerNumbers(),</span><br><span class="line">        mOpeningDevices(<span class="number">0</span>), mClosingDevices(<span class="number">0</span>),</span><br><span class="line">        mNeedToSendFinishedDeviceScan(<span class="keyword">false</span>),</span><br><span class="line">        mNeedToReopenDevices(<span class="keyword">false</span>), mNeedToScanDevices(<span class="keyword">true</span>),</span><br><span class="line">        mPendingEventCount(<span class="number">0</span>), mPendingEventIndex(<span class="number">0</span>), mPendingINotify(<span class="keyword">false</span>) &#123;</span><br><span class="line">    acquire_wake_lock(PARTIAL_WAKE_LOCK, WAKE_LOCK_ID);</span><br><span class="line">    <span class="comment">//创建一个epoll句柄</span></span><br><span class="line">    mEpollFd = epoll_create(EPOLL_SIZE_HINT);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(mEpollFd &lt; <span class="number">0</span>, <span class="string">"Could not create epoll instance.  errno=%d"</span>, errno);</span><br><span class="line">    <span class="comment">//创建一个Inotify对象</span></span><br><span class="line">    mINotifyFd = inotify_init();</span><br><span class="line">    <span class="comment">//监视/dev/input目录变化</span></span><br><span class="line">    <span class="keyword">int</span> result = inotify_add_watch(mINotifyFd, DEVICE_PATH, IN_DELETE | IN_CREATE);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(result &lt; <span class="number">0</span>, <span class="string">"Could not register INotify for %s.  errno=%d"</span>,</span><br><span class="line">            DEVICE_PATH, errno);</span><br><span class="line"></span><br><span class="line">    struct epoll_event eventItem;</span><br><span class="line">    memset(&amp;eventItem, <span class="number">0</span>, sizeof(eventItem));</span><br><span class="line">    eventItem.events = EPOLLIN;</span><br><span class="line">    eventItem.data.u32 = EPOLL_ID_INOTIFY;</span><br><span class="line">    <span class="comment">//将inotify的句柄加入到epoll的监测中</span></span><br><span class="line">    result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mINotifyFd, &amp;eventItem);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(result != <span class="number">0</span>, <span class="string">"Could not add INotify to epoll instance.  errno=%d"</span>, errno);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wakeFds[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//创建匿名管道</span></span><br><span class="line">    result = pipe(wakeFds);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(result != <span class="number">0</span>, <span class="string">"Could not create wake pipe.  errno=%d"</span>, errno);</span><br><span class="line"></span><br><span class="line">    mWakeReadPipeFd = wakeFds[<span class="number">0</span>];</span><br><span class="line">    mWakeWritePipeFd = wakeFds[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//将管道读端和写端设成非阻塞模式</span></span><br><span class="line">    result = fcntl(mWakeReadPipeFd, F_SETFL, O_NONBLOCK);</span><br><span class="line">    result = fcntl(mWakeWritePipeFd, F_SETFL, O_NONBLOCK);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EventHub的构造函数首先创建了epoll句柄，然后创建了一个inotify句柄和一个匿名管道，并将inotify的句柄和管道的”读端”句柄都加入到epoll的监测中。</p><p>这里说明下inotify的作用<br>inotify是Linux中监视目录和文件变化的一种机制，这里监视的是/dev/input，Andorid中的FileObserver就是封装的inotify，可以直接在java中使用</p><p>既然EventHub最终需要将消息传给上层，那么EventHub中的消息又是如何获取的呢？从它的构造函数来看，并没有看到与设备关联的动作。其实是通过EventHub的getEvents()函数  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">size_t EventHub::getEvents(<span class="keyword">int</span> timeoutMillis, RawEvent* buffer, size_t bufferSize) &#123;</span><br><span class="line">       <span class="comment">//省略部分代码</span></span><br><span class="line">       <span class="keyword">if</span> (mNeedToScanDevices) &#123;</span><br><span class="line">            mNeedToScanDevices = <span class="keyword">false</span>;</span><br><span class="line">            scanDevicesLocked();</span><br><span class="line">            mNeedToSendFinishedDeviceScan = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过mNeedToScanDevices变量控制来判断扫描是否完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> EventHub::scanDevicesLocked() &#123;</span><br><span class="line">    status_t res = scanDirLocked(DEVICE_PATH);</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"scan dir failed for %s\n"</span>, DEVICE_PATH);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mDevices.indexOfKey(VIRTUAL_KEYBOARD_ID) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        createVirtualKeyboardLocked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了scanDirLocked函数，接着看这个函数做了什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">status_t EventHub::scanDirLocked(<span class="keyword">const</span> <span class="keyword">char</span> *dirname)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> devname[PATH_MAX];</span><br><span class="line">    <span class="keyword">char</span> *filename;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    struct dirent *de;</span><br><span class="line">    dir = opendir(dirname);</span><br><span class="line">    <span class="keyword">if</span>(dir == NULL)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    strcpy(devname, dirname);</span><br><span class="line">    filename = devname + strlen(devname);</span><br><span class="line">    *filename++ = <span class="string">'/'</span>;</span><br><span class="line">    <span class="keyword">while</span>((de = readdir(dir))) &#123;</span><br><span class="line">        <span class="keyword">if</span>(de-&gt;d_name[<span class="number">0</span>] == <span class="string">'.'</span> &amp;&amp;</span><br><span class="line">          (de-&gt;d_name[<span class="number">1</span>] == <span class="string">'\0'</span> ||</span><br><span class="line">            (de-&gt;d_name[<span class="number">1</span>] == <span class="string">'.'</span> &amp;&amp; de-&gt;d_name[<span class="number">2</span>] == <span class="string">'\0'</span>)))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        strcpy(filename, de-&gt;d_name);</span><br><span class="line">        openDeviceLocked(devname);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的参数dirname对应的是DEVICE_PATH，定义如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *DEVICE_PATH = <span class="string">"/dev/input"</span>;</span><br></pre></td></tr></table></figure></p><p>由此可知，scanDirLocked函数的作用是扫描/dev/input目录</p><p>我手里的手机上/dev/input目录如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/dev/input # ls</span><br><span class="line">event0 event1 event2 event3 event4 event5 event6</span><br></pre></td></tr></table></figure><p>在dev/input下存放的并不是设备，而是event文件，这些event文件对应的设备信息在文件proc/bus/input/devices中可以查到<br>这里贴出其中一个打印片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I: Bus=<span class="number">0019</span> Vendor=<span class="number">2454</span> Product=<span class="number">6500</span> Version=<span class="number">0010</span></span><br><span class="line">N: Name=<span class="string">"mtk-kpd"</span></span><br><span class="line">P: Phys=</span><br><span class="line">S: Sysfs=/devices/platform/<span class="number">10010000</span>.kp/input/input1</span><br><span class="line">U: Uniq=</span><br><span class="line">H: Handlers=gpufreq_ib event1</span><br><span class="line">B: PROP=<span class="number">0</span></span><br><span class="line">B: EV=<span class="number">3</span></span><br><span class="line">B: KEY=<span class="number">140000</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>scanDirLocked函数打开/dev/input目录后，对目录下的每个文件都调用openDeviceLocked()函数<br>看下这个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">status_t EventHub::openDeviceLocked(<span class="keyword">const</span> <span class="keyword">char</span> *devicePath) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="comment">// Get device name.</span></span><br><span class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGNAME(sizeof(buffer) - <span class="number">1</span>), &amp;buffer) &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//fprintf(stderr, "could not get device name for %s, %s\n", devicePath, strerror(errno));</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buffer[sizeof(buffer) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        identifier.name.setTo(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if the device is on our excluded list</span></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; mExcludedDevices.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> String8&amp; item = mExcludedDevices.itemAt(i);</span><br><span class="line">        <span class="keyword">if</span> (identifier.name == item) &#123;</span><br><span class="line">            ALOGI(<span class="string">"ignoring event id %s driver %s\n"</span>, devicePath, item.string());</span><br><span class="line">            close(fd);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get device driver version.</span></span><br><span class="line">    <span class="keyword">int</span> driverVersion;</span><br><span class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGVERSION, &amp;driverVersion)) &#123;</span><br><span class="line">        ALOGE(<span class="string">"could not get driver version for %s, %s\n"</span>, devicePath, strerror(errno));</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get device identifier.</span></span><br><span class="line">    struct input_id inputId;</span><br><span class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGID, &amp;inputId)) &#123;</span><br><span class="line">        ALOGE(<span class="string">"could not get device input id for %s, %s\n"</span>, devicePath, strerror(errno));</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    identifier.bus = inputId.bustype;</span><br><span class="line">    identifier.product = inputId.product;</span><br><span class="line">    identifier.vendor = inputId.vendor;</span><br><span class="line">    identifier.version = inputId.version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get device physical location.</span></span><br><span class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGPHYS(sizeof(buffer) - <span class="number">1</span>), &amp;buffer) &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//fprintf(stderr, "could not get location for %s, %s\n", devicePath, strerror(errno));</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buffer[sizeof(buffer) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        identifier.location.setTo(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get device unique id.</span></span><br><span class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGUNIQ(sizeof(buffer) - <span class="number">1</span>), &amp;buffer) &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//fprintf(stderr, "could not get idstring for %s, %s\n", devicePath, strerror(errno));</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buffer[sizeof(buffer) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        identifier.uniqueId.setTo(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数非常长，做的事情主要是打开设备，获取设备的信息包括设备名称，id等。然后根据这些信息判断设备的类型，并根据设备的不同，进行不同的初始化，接着为设备创建一个Device对象。并将设备对象的句柄加入到epoll的监控中。最后调用addDeviceLocked（）函数把Device对象添加到EventHub的mDevices列表中</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，汗衫，听着飘洋过海来看你</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章中说到eventhub是在NativeInputManager的构造函数new出来&lt;/p&gt;
&lt;p&gt;一台移动设备能产生输入消息的部件很多，包括键盘，触摸屏，按键等。EventHub的作用就是把所有这些设备产生的消息统一成一种格式，再发往上层进行处理&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Android输入系统系列(1)----InputManagerService</title>
    <link href="http://lihaizhou.top/2018/06/07/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-1-InputManagerService/"/>
    <id>http://lihaizhou.top/2018/06/07/Android输入系统系列-1-InputManagerService/</id>
    <published>2018-06-07T11:42:10.000Z</published>
    <updated>2019-04-13T08:46:16.267Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中遇到事件没有传到上层的问题，虽然问题最终得以解决，不过在问题处理中感知input系统有些东西遗忘了，觉得有必要再拿出完整的梳理一遍，后续将通过系列文章进行梳理，文章借鉴深入理解Android5.0一书，不过后续文章均会基于Android N分析</p><p>以下讨论基于<code>Android 7.1.1</code>代码</p><p>InputManagerService作为系统服务，启动过程和其他服务流程差不多，在SystemServer中创建<br><code>frameworks\base\services\java\com\android\server\SystemServer.java</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Starts a miscellaneous grab bag of stuff that has yet to be refactored</span></span><br><span class="line"><span class="comment">    * and organized.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    InputManagerService inputManager = <span class="keyword">null</span>;</span><br><span class="line">    .....</span><br><span class="line">    traceBeginAndSlog(<span class="string">"StartInputManagerService"</span>);</span><br><span class="line">    <span class="comment">//创建InputManagerService对象</span></span><br><span class="line">    inputManager = <span class="keyword">new</span> InputManagerService(context);</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    traceBeginAndSlog(<span class="string">"StartWindowManagerService"</span>);</span><br><span class="line">    wm = WindowManagerService.main(context, inputManager,</span><br><span class="line">                    mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL,</span><br><span class="line">                    !mFirstBoot, mOnlyCore);</span><br><span class="line">     ServiceManager.addService(Context.WINDOW_SERVICE, wm);</span><br><span class="line">     <span class="comment">//添加到ServiceManager中</span></span><br><span class="line">     ServiceManager.addService(Context.INPUT_SERVICE, inputManager);</span><br><span class="line">     Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line"></span><br><span class="line">      traceBeginAndSlog(<span class="string">"StartVrManagerService"</span>);</span><br><span class="line">      mSystemServiceManager.startService(VrManagerService.class);</span><br><span class="line">      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line"></span><br><span class="line">      mActivityManagerService.setWindowManager(wm);</span><br><span class="line"></span><br><span class="line">      inputManager.setWindowManagerCallbacks(wm.getInputMonitor());</span><br><span class="line">      <span class="comment">//调用了InputManagerService的start方法</span></span><br><span class="line">      inputManager.start();</span><br><span class="line">      .....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里创建了InputManagerService对象，下面看下InputManagerService的构造方法<br><code>frameworks\base\services\core\java\com\android\server\input\InputManagerService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputManagerService</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        <span class="keyword">this</span>.mHandler = <span class="keyword">new</span> InputManagerHandler(DisplayThread.get().getLooper());</span><br><span class="line"></span><br><span class="line">        mUseDevInputEventForAudioJack =</span><br><span class="line">                context.getResources().getBoolean(R.bool.config_useDevInputEventForAudioJack);</span><br><span class="line">        Slog.i(TAG, <span class="string">"Initializing input manager, mUseDevInputEventForAudioJack="</span></span><br><span class="line">                + mUseDevInputEventForAudioJack);</span><br><span class="line">        <span class="comment">//这里调用了InputManagerHandler对象的getLooper()获取主线程的looper后进而调用getQueue()得到消息队列</span></span><br><span class="line">        <span class="comment">//并作为参数传进了nativeInit函数中</span></span><br><span class="line">        mPtr = nativeInit(<span class="keyword">this</span>, mContext, mHandler.getLooper().getQueue());</span><br><span class="line"></span><br><span class="line">        String doubleTouchGestureEnablePath = context.getResources().getString(</span><br><span class="line">                R.string.config_doubleTouchGestureEnableFile);</span><br><span class="line">        mDoubleTouchGestureEnableFile = TextUtils.isEmpty(doubleTouchGestureEnablePath) ? <span class="keyword">null</span> :</span><br><span class="line">            <span class="keyword">new</span> File(doubleTouchGestureEnablePath);</span><br><span class="line"></span><br><span class="line">        LocalServices.addService(InputManagerInternal.class, <span class="keyword">new</span> LocalService());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接着看nativeinit方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">nativeInit</span><span class="params">(InputManagerService service,</span></span></span><br><span class="line"><span class="function"><span class="params">            Context context, MessageQueue messageQueue)</span></span>;</span><br></pre></td></tr></table></figure><p>是个native方法，跟着看native层中的实现</p><p><code>frameworks\base\services\core\jni\com_android_server_input_InputManagerService.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">nativeInit</span><span class="params">(JNIEnv* env, jclass <span class="comment">/* clazz */</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        jobject serviceObj, jobject contextObj, jobject messageQueueObj)</span> </span>&#123;</span><br><span class="line">    sp&lt;MessageQueue&gt; messageQueue = android_os_MessageQueue_getMessageQueue(env, messageQueueObj);</span><br><span class="line">    <span class="keyword">if</span> (messageQueue == NULL) &#123;</span><br><span class="line">        jniThrowRuntimeException(env, <span class="string">"MessageQueue is not initialized."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NativeInputManager* im = <span class="keyword">new</span> NativeInputManager(contextObj, serviceObj,</span><br><span class="line">            messageQueue-&gt;getLooper());</span><br><span class="line">    im-&gt;incStrong(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> reinterpret_cast&lt;jlong&gt;(im);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要工作new了一个NativeInputManager对象，下面接着看NativeInputManager的构造函数  </p><p><code>frameworks\base\services\core\jni\com_android_server_input_InputManagerService.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">NativeInputManager::NativeInputManager(jobject contextObj,</span><br><span class="line">        jobject serviceObj, <span class="keyword">const</span> sp&lt;Looper&gt;&amp; looper) :</span><br><span class="line">        mLooper(looper), mInteractive(<span class="keyword">true</span>) &#123;</span><br><span class="line">    JNIEnv* env = jniEnv();</span><br><span class="line"></span><br><span class="line">    mContextObj = env-&gt;NewGlobalRef(contextObj);</span><br><span class="line">    mServiceObj = env-&gt;NewGlobalRef(serviceObj);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</span><br><span class="line">        mLocked.systemUiVisibility = ASYSTEM_UI_VISIBILITY_STATUS_BAR_VISIBLE;</span><br><span class="line">        mLocked.pointerSpeed = <span class="number">0</span>;</span><br><span class="line">        mLocked.pointerGesturesEnabled = <span class="keyword">true</span>;</span><br><span class="line">        mLocked.showTouches = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mInteractive = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    sp&lt;EventHub&gt; eventHub = <span class="keyword">new</span> EventHub();</span><br><span class="line">    mInputManager = <span class="keyword">new</span> InputManager(eventHub, <span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要工作: 创建了EventHub对象以及InputManager对象</p><p>接着看InputManager的构造函数<br><code>frameworks\native\services\inputflinger\InputManager.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">InputManager::InputManager(</span><br><span class="line">        <span class="keyword">const</span> sp&lt;EventHubInterface&gt;&amp; eventHub,</span><br><span class="line">        <span class="keyword">const</span> sp&lt;InputReaderPolicyInterface&gt;&amp; readerPolicy,</span><br><span class="line">        <span class="keyword">const</span> sp&lt;InputDispatcherPolicyInterface&gt;&amp; dispatcherPolicy) &#123;</span><br><span class="line">    mDispatcher = <span class="keyword">new</span> InputDispatcher(dispatcherPolicy);</span><br><span class="line">    mReader = <span class="keyword">new</span> InputReader(eventHub, readerPolicy, mDispatcher);</span><br><span class="line">    initialize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> InputManager::initialize() &#123;</span><br><span class="line">    mReaderThread = <span class="keyword">new</span> InputReaderThread(mReader);</span><br><span class="line">    mDispatcherThread = <span class="keyword">new</span> InputDispatcherThread(mDispatcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建了两个对象: InputDispatcher和InputReader，接着调用了initialize()，initialize()中分别new了两个线程: InputReaderThread和InputDispatcherThread，那这两个线程是在什么时机起来的呢?</p><p>故事回到了文章开始的地方，InputManagerService创建完之后会调用InputManagerService的start方法，这个start方法中又去调用了nativeStart方法<br><code>frameworks\base\services\core\jni\com_android_server_input_InputManagerService.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeStart</span><span class="params">(JNIEnv* env, jclass <span class="comment">/* clazz */</span>, jlong ptr)</span> </span>&#123;</span><br><span class="line">    NativeInputManager* im = reinterpret_cast&lt;NativeInputManager*&gt;(ptr);</span><br><span class="line">    <span class="comment">//注意这里的getInputManager()返回的是一个InputManager对象</span></span><br><span class="line">    status_t result = im-&gt;getInputManager()-&gt;start();</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        jniThrowRuntimeException(env, <span class="string">"Input manager could not be started."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里NativeInputManager的getInputManager()返回的是一个InputManager对象，紧接着调用了start方法<br>所以接下来看下InputManager的start方法主要做了啥</p><p><code>frameworks\native\services\inputflinger\InputManager.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">status_t InputManager::start() &#123;</span><br><span class="line">    status_t result = mDispatcherThread-&gt;run(<span class="string">"InputDispatcher"</span>, PRIORITY_URGENT_DISPLAY);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    result = mReaderThread-&gt;run(<span class="string">"InputReader"</span>, PRIORITY_URGENT_DISPLAY);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里启动了InputManager中initialize()创建的InputReaderThread和InputDispatcherThread这两个线程</p><p>至此InputManagerService的创建流程讨论完毕，流程还是比较简单的，下文将讨论EventHub</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，高考第一天，好紧张</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目中遇到事件没有传到上层的问题，虽然问题最终得以解决，不过在问题处理中感知input系统有些东西遗忘了，觉得有必要再拿出完整的梳理一遍，后续将通过系列文章进行梳理，文章借鉴深入理解Android5.0一书，不过后续文章均会基于Android N分析&lt;/p&gt;
&lt;p&gt;以下
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>一个滑动冲突问题的分析流程</title>
    <link href="http://lihaizhou.top/2018/06/06/%E4%B8%80%E4%B8%AA%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    <id>http://lihaizhou.top/2018/06/06/一个滑动冲突问题的分析流程/</id>
    <published>2018-06-06T13:58:15.000Z</published>
    <updated>2019-04-13T08:44:14.629Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题需求</strong><br>原先效果是用户在<code>ViewPager</code>上长按会弹出一个<code>dialog</code>，现在加了一个需求：用户有时候在长按时出现手指向左或向右微小滑动，此时也需要判断为长按并弹出<code>dialog</code></p><p><strong>初步分析</strong><br>外边的<code>ViewPager</code>是可以左右滑动的，现在希望单个界面即子<code>view</code>接收到触摸事件后能接管本次事件序列中后续事件，即子<code>View</code>接收到触摸事件后，注意此时手指未松开，所以还处于一次完整的事件序列中，等待一段时间<code>Android</code>默认是<code>400ms</code>后会识别为长按事件，此时子<code>View</code>的长按事件被触发。那么问题来了，怎么才能在子<code>view</code>接收到触摸事件并能接管本次事件序列呢？<br>这就要说到老生常谈的事件拦截了，正常拦截事件有外部拦截和内部拦截两种，这里因为代码中子view已写好现成的手势判断的相关方法，故这里为简单起见，采用内部拦截法来实现。</p><p><strong>修改方法</strong><br><code>LauncherPagerAdapter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> mTouchSlop = <span class="number">40</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.launcher_item_layout, <span class="keyword">null</span>);</span><br><span class="line">        ViewGroup parent = (ViewGroup) view.getParent();</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line"><span class="comment">//Add begin</span></span><br><span class="line">        view.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">                    <span class="comment">//省略部分代码</span></span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                        <span class="keyword">if</span> (Math.abs(event.getY() - mDownY) &lt;= ((<span class="keyword">float</span>) mTouchSlop) &amp;&amp; Math.abs(event.getX() - mDownX) &lt;= ((<span class="keyword">float</span>) mTouchSlop)) &#123;</span><br><span class="line">                                view.getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>); <span class="comment">//当出现上下左右距离不超过40时，父view不拦截事件, 交给子view</span></span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Math.abs(event.getX() - mDownX) &gt; ((<span class="keyword">float</span>) mTouchSlop))&#123;</span><br><span class="line">                               view.getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>); <span class="comment">//当出现左右距离超过40时，父view拦截事件并自行消耗</span></span><br><span class="line">                          &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> <span class="comment">//Add end</span></span><br><span class="line">       <span class="comment">//省略部分代码</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>这样的话，再对子<code>view</code>添加长按事件处理，也能顺利的接收到长按事件了。效果上便达到了微小长按滑动也会进入长按事件的处理逻辑中，注意此时微小的向左或向右滑动，<code>viewpager</code>本身并不会移动了，修改之前<code>Viewpager</code>会跟着滑动。</p><p>这个问题里用的是内部拦截法，其实也可以自定义<code>Viewpager</code>中重写<code>canScrool()</code>方法，这里就不介绍了，相比而言稍稍麻烦了一点</p><p>下面顺便说下滑动冲突的一般解决思路，这是个老生常谈的话题，解决方法已形成固定的流程，需要根据具体的实际业务需求灵活改变。</p><p>先介绍几个事件分发处理的几个常见方法<br><code>dispatchTouchEvent</code><br>主要是用来分发事件<br><code>onInterceptTouchEvent</code><br>主要是用来拦截事件的(ViewGroup才有这个方法，View没有这个方法)<br><code>onTouchEvent</code><br>这个方法主要是用来处理事件的<br><code>requestDisallowInterceptTouchEvent(true)</code><br>这个方法能够影响父View是否拦截事件，true 表示父 View 不拦截事件，false 表示父 View 拦截事件</p><p><strong>滑动冲突一般解决方法</strong><br>1.外部拦截法<br>一般是通过重写父控件的<code>onInterceptTouchEvent</code>方法，然后根据具体的需求，来决定父控件是否拦截事件。如果拦截返回返回true，不拦截返回false，比如说希望上下滑动不要拦截，那么就在父控件的<code>onInterceptTouchEvent</code>方法里的<code>MotionEvent.ACTION_MOVE</code>这个case块里返回false就好。如果希望指定位置不拦截，则再进行位置判断即可。</p><p>对于外部拦截法我们的核心工作一般是做在<code>ACTION_MOVE</code>中，不过需要注意的是不要在<code>ACTION_DOWN</code>中返回 true，这里一旦为true，则同一个事件序列<code>ViewGroup</code>的<code>disPatchTouchEvent</code>就不会再调用<code>onInterceptTouchEvent</code>方法了 。那么本次的事件序列后续都由父view接管，子view对这次事件序列也就没有了机会去消耗事件。归纳起来就是一句话: 父控件一旦拦截了事件，那么同一个事件序列的所有事件都将交给它处理。</p><p>2.内部拦截法<br>内部拦截法主要是通过调用父控件的 <code>requestDisallowInterceptTouchEvent</code>方法，传进去一个<code>boolean</code>参数值，true为请求父控件不拦截<br>需要注意的是父控件的<code>onInterceptTouchEvent</code>方法中的<code>ACTION_DOWN</code>事件不要拦截，一旦父控件拦截<code>ACTION_DOWN</code>事件，那么事件无法传递到子元素之中，内部拦截法也就无法起作用了</p><p>Good night!</p><hr><font color="#000000" size="2" face="楷体">住所，晚上，听着歌，洗漱完毕准备休息</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题需求&lt;/strong&gt;&lt;br&gt;原先效果是用户在&lt;code&gt;ViewPager&lt;/code&gt;上长按会弹出一个&lt;code&gt;dialog&lt;/code&gt;，现在加了一个需求：用户有时候在长按时出现手指向左或向右微小滑动，此时也需要判断为长按并弹出&lt;code&gt;dia
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>一个底层内存分配异常导致无法进入launcher问题分析</title>
    <link href="http://lihaizhou.top/2018/05/31/%E4%B8%80%E4%B8%AA%E5%BA%95%E5%B1%82%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%BC%82%E5%B8%B8%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5launcher%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://lihaizhou.top/2018/05/31/一个底层内存分配异常导致无法进入launcher问题分析/</id>
    <published>2018-05-31T02:31:47.000Z</published>
    <updated>2019-04-13T08:44:26.476Z</updated>
    
    <content type="html"><![CDATA[<p>问题平台<br><code>Android go</code></p><p>复现概率<br><code>always</code></p><p>问题现象<br><code>解锁后，Launcher图标未能加载出，按虚拟back,home键，下拉状态栏响应异常缓慢</code></p><p><strong>前言</strong><br><code>Android Go</code>是一个简化版本的<code>Android O</code>（及以上），能够在超低端的Android手机上流畅运行，具体量化就是RAM仅为<code>512MB</code>至<code>1GB</code>的机型</p><p><strong>初步分析</strong><br>首次合入MTK提供的<code>Android Go</code>代码后开机，解锁后<code>Launcher</code>图标没有加载出，鉴于该平台代码是芯片商已经调试稳定后释放，<code>Launcher</code>本身应用出问题的概率比较小，操作发现下拉状态栏异常卡顿</p><p>第一反应是会不会是内存很紧张呢? 有可能的哦，ok, 下面开始分析日志</p><p><strong>Step1：日志分析</strong><br>命令调mtk日志应用, 没调出来？ok….这一点比较异常, 后面会解释原因，既然完整的mtk日志抓取不了，下面通过<code>adb logcat</code>命令抓取</p><p><strong>logcat日志</strong><br>日志中开头部分就看到如下异常，根据日志可以知道对应的操作是用命令调mtk日志应用，正是我上面的操作，报的异常说我们尝试去调用的对象已经挂了, ok…大写的懵逼  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">31.691</span> I/ActivityManager(  <span class="number">619</span>): Start proc <span class="number">5691</span>:com.mediatek.mtklogger/u0a46 <span class="keyword">for</span> activity com.mediatek.mtklogger/.MainActivity</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>): Exception when starting activity com.mediatek.mtklogger/.MainActivity</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>): android.os.DeadObjectException</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transactNative(Native Method)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transact(Binder.java:<span class="number">764</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IApplicationThread$Stub$<span class="built_in">Proxy</span>.scheduleLaunchActivity(IApplicationThread.java:<span class="number">1232</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.realStartActivityLocked(ActivityStackSupervisor.java:<span class="number">1457</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked(ActivityStackSupervisor.java:<span class="number">1579</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStack.makeVisibleAndRestartIfNeeded(ActivityStack.java:<span class="number">2069</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStack.ensureActivitiesVisibleLocked(ActivityStack.java:<span class="number">1873</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.ensureActivitiesVisibleLocked(ActivityStackSupervisor.java:<span class="number">3366</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.attachApplicationLocked(ActivityStackSupervisor.java:<span class="number">988</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplicationLocked(ActivityManagerService.java:<span class="number">7276</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplication(ActivityManagerService.java:<span class="number">7343</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">291</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3013</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.Binder.execTransact(Binder.java:<span class="number">697</span>)</span><br></pre></td></tr></table></figure><p>接着往下看  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">33.035</span> I/ActivityManager(  <span class="number">619</span>): Process com.mediatek.mtklogger (pid <span class="number">5705</span>) has died: fore TOP</span><br></pre></td></tr></table></figure><p>mtk日志这个进程挂了，这种情况头一次见，那会不会Launcher中没有加载出图标也是因为进程挂了, ok, 搜索下<code>&quot;launcher&quot;</code>关键字  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>): Exception <span class="keyword">in</span> <span class="keyword">new</span> application when starting activity com.android.launcher3/.Launcher</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>): android.os.DeadObjectException</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transactNative(Native Method)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transact(Binder.java:<span class="number">764</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IApplicationThread$Stub$<span class="built_in">Proxy</span>.scheduleLaunchActivity(IApplicationThread.java:<span class="number">1232</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.realStartActivityLocked(ActivityStackSupervisor.java:<span class="number">1457</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.attachApplicationLocked(ActivityStackSupervisor.java:<span class="number">974</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplicationLocked(ActivityManagerService.java:<span class="number">7276</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplication(ActivityManagerService.java:<span class="number">7343</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">291</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3013</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.Binder.execTransact(Binder.java:<span class="number">697</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>): Exception thrown launching activities <span class="keyword">in</span> ProcessRecord&#123;<span class="number">922</span>c6e6 <span class="number">5794</span>:com.android.launcher3/u0a12&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>): android.os.DeadObjectException</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transactNative(Native Method)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transact(Binder.java:<span class="number">764</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.app.IApplicationThread$Stub$<span class="built_in">Proxy</span>.scheduleLaunchActivity(IApplicationThread.java:<span class="number">1232</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.realStartActivityLocked(ActivityStackSupervisor.java:<span class="number">1457</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.attachApplicationLocked(ActivityStackSupervisor.java:<span class="number">974</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplicationLocked(ActivityManagerService.java:<span class="number">7276</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplication(ActivityManagerService.java:<span class="number">7343</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">291</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3013</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.os.Binder.execTransact(Binder.java:<span class="number">697</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.886</span> I/ActivityManager(  <span class="number">619</span>): Killing <span class="number">5794</span>:com.android.launcher3/u0a12 (adj <span class="number">0</span>): error during init</span><br></pre></td></tr></table></figure><p>果然<code>Launcher</code>进程也挂了，ok…有意思</p><p>通过<code>adb shell cat /proc/meminfo</code>命令看下机器内存情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MemTotal:        <span class="number">162404</span> kB</span><br><span class="line"></span><br><span class="line">MemFree:            <span class="number">5804</span> kB</span><br><span class="line"></span><br><span class="line">MemAvailable:      <span class="number">40740</span> kB</span><br><span class="line"></span><br><span class="line">Buffers:            <span class="number">672</span> kB</span><br><span class="line"></span><br><span class="line">Cached:            <span class="number">34920</span> kB</span><br><span class="line"></span><br><span class="line">SwapCached:          <span class="number">796</span> kB</span><br><span class="line"></span><br><span class="line">Active:            <span class="number">29176</span> kB</span><br><span class="line"></span><br><span class="line">Inactive:          <span class="number">31516</span> kB</span><br></pre></td></tr></table></figure><p>这里的内存<code>MemTotal</code>为什么这么小？ 同驱动沟通了下，这个项目是<code>512</code>内存，可是现在打印出来<code>MemTotal</code>只有一百多<br>这里顺便说下上面几个重点关键字</p><p><code>MemTotal</code><br>系统从加电开始到引导完成，firmware/BIOS要保留一些内存，kernel本身要占用一些内存，最后剩下可供kernel支配的内存就是MemTotal。这个值在系统运行期间一般是固定不变的。</p><p><code>MemFree</code><br>表示系统尚未使用的内存。[MemTotal-MemFree]就是已被用掉的内存。</p><p><code>MemAvailable</code><br>有些应用程序会根据系统的可用内存大小自动调整内存申请的多少，所以需要一个记录当前可用内存数量的统计值，<code>MemFree</code>并不适用，因为<code>MemFree</code>不能代表全部可用的内存，系统中有些内存虽然已被使用但是可以回收的，比如<code>cache/buffer</code>、<code>slab</code>都有一部分可以回收，所以这部分可回收的内存加上<code>MemFree</code>才是系统可用的内存，即<code>MemAvailable</code>。<code>/proc/meminfo</code>中的<code>MemAvailable</code>是内核使用特定的算法估算出来的，要注意这是一个估计值，并不精确</p><p>这里说下<code>cache</code>和<code>buffers</code>的作用，<code>Linux</code>利用空闲的物理内存，划分出一部份空间，作为<code>cache</code>和<code>buffers</code>，目的是为了提高数据访问性能<br>这里可以看到我们当前的系统可用的内存大约在<code>40M</code>左右，这显然是不够的，现在问题方向指向了内存</p><p>下面抓取一份串口日志，看下其中的内存分配</p><p><strong>串口日志</strong></p><p>如下片段是开机动画完成后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;-(<span class="number">0</span>)[<span class="number">0</span>:swapper]Memory: <span class="number">159860</span>K/<span class="number">454336</span>K available (<span class="number">11264</span>K kernel code, <span class="number">931</span>K rwdata, <span class="number">3320</span>K rodata, <span class="number">1024</span>K init, <span class="number">2701</span>K bss, <span class="number">294476</span>K reserved, <span class="number">0</span>K cma-reserved, <span class="number">0</span>K highmem)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;-(<span class="number">0</span>)[<span class="number">0</span>:swapper]Virtual kernel memory layout:</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    vector  : <span class="number">0xffff0000</span> - <span class="number">0xffff1000</span>  (  <span class="number">4</span> kB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    fixmap  : <span class="number">0xffc00000</span> - <span class="number">0xfff00000</span>  (<span class="number">3072</span> kB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    vmalloc : <span class="number">0xe0800000</span> - <span class="number">0xff800000</span>  ( <span class="number">496</span> MB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    lowmem  : <span class="number">0xc0000000</span> - <span class="number">0xe0000000</span>  ( <span class="number">512</span> MB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    pkmap  : <span class="number">0xbfe00000</span> - <span class="number">0xc0000000</span>  (  <span class="number">2</span> MB)</span><br></pre></td></tr></table></figure><p>这里可以看到<code>lowmem</code>的确是<code>512M</code>(lowmem代表linux最终可支配的物理内存大小)</p><p>这里有个奇怪的地方是<code>reserved</code>占据了<code>294476K</code> ，将近300M，开机结束也没有变化。</p><p>这里对<code>Reserved memory</code>的概念进行一个描述</p><p><code>Linux</code>中保留内存(<code>Reserved memory</code>)是指把系统中的一部分内存保留起来，内核不会为它建立页表，一般的应用程序无法访问到这段内存。在板卡调试、内存测试和设备<code>DAM</code>调试的过程中，可以运用这种办法，先验证系统在只有低端内存的情况下能否顺利启动；</p><p>那么reserved占据的这块内存是提供给谁使用的呢？ 继续看串口日志，看到modem加载的片段如下  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载modem</span></span><br><span class="line">[<span class="number">2030</span>] Enter load_modem_image v2<span class="number">.0</span></span><br><span class="line">[<span class="number">2030</span>] ccci_request_mem: ret:<span class="number">4000000</span>, <span class="attr">smem_limit</span>:<span class="number">78000000</span>, <span class="attr">align</span>:<span class="number">2000000</span></span><br><span class="line">[<span class="number">2031</span>] mblock[<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x3c000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2033</span>] mblock_reserve dbg[<span class="number">0</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2033</span>] mblock[<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x40000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2035</span>] mblock_reserve dbg[<span class="number">1</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2035</span>] mblock[<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x40000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2037</span>] mblock_reserve dbg[<span class="number">2</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2037</span>] mblock[<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x40000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2039</span>] mblock_reserve dbg[<span class="number">3</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2039</span>] mblock[<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x1ab58000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x5a000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2041</span>] mblock_reserve dbg[<span class="number">4</span>]: <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2041</span>] mblock[<span class="number">5</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x5fc50000</span>, <span class="attr">target</span>: <span class="number">4</span>, <span class="attr">reserved_addr</span>: <span class="number">0x5a000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2043</span>] mblock_reserve dbg[<span class="number">5</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2043</span>] mblock[<span class="number">4</span>]: <span class="number">450</span>f8000, <span class="number">14</span>f08000 <span class="keyword">from</span> mblock</span><br><span class="line">mblock[<span class="number">5</span>]: <span class="number">5e000000</span>, <span class="number">1</span>c50000 <span class="keyword">from</span> mblock</span><br><span class="line">[<span class="number">2045</span>] mblock_reserve: <span class="number">5</span>a000000 - <span class="number">5e000000</span> <span class="keyword">from</span> mblock <span class="number">4</span></span><br><span class="line">[<span class="number">2045</span>] mblock_reserve [<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span></span><br><span class="line">[<span class="number">2046</span>] mblock_reserve [<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span></span><br><span class="line">[<span class="number">2046</span>] mblock_reserve [<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span></span><br><span class="line">[<span class="number">2047</span>] mblock_reserve [<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span></span><br><span class="line">[<span class="number">2048</span>] mblock_reserve [<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x14f08000</span></span><br><span class="line">[<span class="number">2048</span>] mblock_reserve [<span class="number">5</span>].start: <span class="number">0x5e000000</span>, <span class="attr">sz</span>: <span class="number">0x1c50000</span></span><br><span class="line">[<span class="number">2049</span>] mblock_reserve [<span class="number">6</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span></span><br><span class="line">[<span class="number">2050</span>] mblock_reserve-R[<span class="number">0</span>].start: <span class="number">0x5ff80000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">1</span> name:log_store</span><br><span class="line">[<span class="number">2051</span>] mblock_reserve-R[<span class="number">1</span>].start: <span class="number">0x44600000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-reserved</span><br><span class="line">[<span class="number">2051</span>] mblock_reserve-R[<span class="number">2</span>].start: <span class="number">0x5fe00000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-log-reserved</span><br><span class="line">[<span class="number">2052</span>] mblock_reserve-R[<span class="number">3</span>].start: <span class="number">0x44000000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">0</span> name:dtb_kernel_addr_mb</span><br><span class="line">[<span class="number">2053</span>] mblock_reserve-R[<span class="number">4</span>].start: <span class="number">0x40008000</span>, <span class="attr">sz</span>: <span class="number">0x3200000</span> map:<span class="number">0</span> name:kernel_addr_mb</span><br><span class="line">[<span class="number">2054</span>] mblock_reserve-R[<span class="number">5</span>].start: <span class="number">0x45000000</span>, <span class="attr">sz</span>: <span class="number">0xf8000</span> map:<span class="number">0</span> name:ramdisk_addr_mb</span><br><span class="line">[<span class="number">2055</span>] mblock_reserve-R[<span class="number">6</span>].start: <span class="number">0x5fc50000</span>, <span class="attr">sz</span>: <span class="number">0x1b0000</span> map:<span class="number">0</span> name:framebuffer</span><br><span class="line">[<span class="number">2056</span>] mblock_reserve-R[<span class="number">7</span>].start: <span class="number">0x5ff70000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:SPM-reserved</span><br><span class="line">[<span class="number">2057</span>] mblock_reserve-R[<span class="number">8</span>].start: <span class="number">0x5ff60000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:MCUPM-reserved</span><br><span class="line">[<span class="number">2058</span>] mblock_reserve-R[<span class="number">9</span>].start: <span class="number">0x5a000000</span>, <span class="attr">sz</span>: <span class="number">0x4000000</span> map:<span class="number">0</span> name:ccci</span><br><span class="line">[<span class="number">2059</span>] request size: <span class="number">0x04000000</span>, get start address: <span class="number">0x5a000000</span></span><br><span class="line">[<span class="number">2060</span>] Using defalut RAT all <span class="keyword">in</span> one</span><br><span class="line">[<span class="number">2060</span>] cust_tel_mode_idx val:<span class="number">-1</span></span><br><span class="line">[<span class="number">2060</span>] [LK_ENV]get_env opt_ps1_rat <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2061</span>] [LK_ENV]get_env opt_md1_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2061</span>] [LK_ENV]get_env opt_md3_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2062</span>] [LK_ENV]get_env opt_c2k_lte_mode <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2063</span>] [LK_ENV]get_env opt_lte_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2063</span>] [LK_ENV]get_env opt_c2k_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2064</span>] <span class="keyword">default</span> rat:LF_LT_W_T_G[<span class="number">0x3b</span>][<span class="number">0x0</span>]</span><br><span class="line">[<span class="number">2064</span>] -- MD1 --</span><br><span class="line">[<span class="number">2064</span>] mblock[<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x30000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2066</span>] mblock_reserve dbg[<span class="number">0</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2066</span>] mblock[<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x34000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2068</span>] mblock_reserve dbg[<span class="number">1</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2069</span>] mblock[<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x34000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2070</span>] mblock_reserve dbg[<span class="number">2</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2071</span>] mblock[<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x34000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2072</span>] mblock_reserve dbg[<span class="number">3</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2073</span>] mblock[<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x14f08000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x4a000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2074</span>] mblock_reserve dbg[<span class="number">4</span>]: <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2075</span>] mblock[<span class="number">5</span>].start: <span class="number">0x5e000000</span>, <span class="attr">sz</span>: <span class="number">0x1c50000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x5a000000</span>, <span class="attr">target</span>: <span class="number">4</span>, <span class="attr">reserved_addr</span>: <span class="number">0x4e000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2076</span>] mblock_reserve dbg[<span class="number">5</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2077</span>] mblock[<span class="number">6</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x5a000000</span>, <span class="attr">target</span>: <span class="number">4</span>, <span class="attr">reserved_addr</span>: <span class="number">0x4e000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2079</span>] mblock_reserve dbg[<span class="number">6</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2079</span>] mblock_reserve: <span class="number">4</span>a000000 - <span class="number">5</span>a000000 <span class="keyword">from</span> mblock <span class="number">4</span></span><br><span class="line">[<span class="number">2080</span>] mblock_reserve [<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span></span><br><span class="line">[<span class="number">2080</span>] mblock_reserve [<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span></span><br><span class="line">[<span class="number">2081</span>] mblock_reserve [<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span></span><br><span class="line">[<span class="number">2082</span>] mblock_reserve [<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span></span><br><span class="line">[<span class="number">2082</span>] mblock_reserve [<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x4f08000</span></span><br><span class="line">[<span class="number">2083</span>] mblock_reserve [<span class="number">5</span>].start: <span class="number">0x5e000000</span>, <span class="attr">sz</span>: <span class="number">0x1c50000</span></span><br><span class="line">[<span class="number">2084</span>] mblock_reserve [<span class="number">6</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span></span><br><span class="line">[<span class="number">2084</span>] mblock_reserve-R[<span class="number">0</span>].start: <span class="number">0x5ff80000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">1</span> name:log_store</span><br><span class="line">[<span class="number">2085</span>] mblock_reserve-R[<span class="number">1</span>].start: <span class="number">0x44600000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-reserved</span><br><span class="line">[<span class="number">2086</span>] mblock_reserve-R[<span class="number">2</span>].start: <span class="number">0x5fe00000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-log-reserved</span><br><span class="line">[<span class="number">2087</span>] mblock_reserve-R[<span class="number">3</span>].start: <span class="number">0x44000000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">0</span> name:dtb_kernel_addr_mb</span><br><span class="line">[<span class="number">2088</span>] mblock_reserve-R[<span class="number">4</span>].start: <span class="number">0x40008000</span>, <span class="attr">sz</span>: <span class="number">0x3200000</span> map:<span class="number">0</span> name:kernel_addr_mb</span><br><span class="line">[<span class="number">2089</span>] mblock_reserve-R[<span class="number">5</span>].start: <span class="number">0x45000000</span>, <span class="attr">sz</span>: <span class="number">0xf8000</span> map:<span class="number">0</span> name:ramdisk_addr_mb</span><br><span class="line">[<span class="number">2090</span>] mblock_reserve-R[<span class="number">6</span>].start: <span class="number">0x5fc50000</span>, <span class="attr">sz</span>: <span class="number">0x1b0000</span> map:<span class="number">0</span> name:framebuffer</span><br><span class="line">[<span class="number">2091</span>] mblock_reserve-R[<span class="number">7</span>].start: <span class="number">0x5ff70000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:SPM-reserved</span><br><span class="line">[<span class="number">2092</span>] mblock_reserve-R[<span class="number">8</span>].start: <span class="number">0x5ff60000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:MCUPM-reserved</span><br><span class="line">[<span class="number">2093</span>] mblock_reserve-R[<span class="number">9</span>].start: <span class="number">0x5a000000</span>, <span class="attr">sz</span>: <span class="number">0x4000000</span> map:<span class="number">0</span> name:ccci</span><br><span class="line">[<span class="number">2093</span>] mblock_reserve-R[<span class="number">10</span>].start: <span class="number">0x4a000000</span>, <span class="attr">sz</span>: <span class="number">0x10000000</span> map:<span class="number">1</span> name:ccci</span><br><span class="line"><span class="comment">//此处modem申请了268左右的内存</span></span><br><span class="line">[<span class="number">2094</span>] request size: <span class="number">0x10000000</span>, get start address: <span class="number">0x4a000000</span></span><br></pre></td></tr></table></figure><p>该问题同驱动同事沟通了下，驱动同事发现<code>modem</code>占据的内存没有释放掉，因为<code>modem</code>加载过程中会request一块比较大的内存，如上述日志中描述大概<code>268</code>的内存，正常加载完<code>modem</code>后会释放掉这块内存  </p><p>这个问题中的软件版本<code>modem</code>因为存在异常没有合入但是内存依旧申请了，导致加载没有完成直接返回，后面<code>modem</code>占据的内存释放的流程没有走，这块内存就一直占据着，这也就是我们上面开始看的串口日志中<code>reserved</code>占用比较大的原因，<code>reserved</code>占据的内存在开机过程中是变化的，后面驱动同事修复<code>modem</code>异常并合入<code>modem</code>后，机器内存分配正常，进入<code>launcher</code>加载图标正常</p><p>该问题很早就定位到内存问题，排查到modem问题耗时较久，ok，问题分析到此</p><p>Have a good day!</p><hr><font color="#000000" size="2" face="楷体">本文写于住所，上传于公司，午休时间，电脑前，雨停了，等外卖</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题平台&lt;br&gt;&lt;code&gt;Android go&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;复现概率&lt;br&gt;&lt;code&gt;always&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题现象&lt;br&gt;&lt;code&gt;解锁后，Launcher图标未能加载出，按虚拟back,home键，下拉状态栏响应异常缓慢&lt;/co
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>一个屏幕滑动无响应问题的分析流程</title>
    <link href="http://lihaizhou.top/2018/05/29/%E4%B8%80%E4%B8%AA%E5%B1%8F%E5%B9%95%E6%BB%91%E5%8A%A8%E6%97%A0%E5%93%8D%E5%BA%94%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    <id>http://lihaizhou.top/2018/05/29/一个屏幕滑动无响应问题的分析流程/</id>
    <published>2018-05-29T11:19:15.000Z</published>
    <updated>2019-04-13T08:44:09.629Z</updated>
    
    <content type="html"><![CDATA[<p>问题现象<br><code>在应用中出现屏幕右滑无响应</code></p><p>复现概率:<br><code>once</code></p><p>问题平台:<br><code>Android N</code>  <code>MT6739</code></p><p><strong>Step1 初步分析</strong><br>考虑到当时按<code>power</code>键能够退出应用回到待机(项目中对<code>power</code>键功能进行了定制)，说明没有发生死机<br>刚接到问题的时候，第一反应是觉得可能发生了<code>ANR</code>，与测试同事沟通，当时没有弹框出来。ok，拿到机器后, 将<code>data/anr</code>文件夹pull出来看下，内容为空。进到<code>event</code>日志中. 搜索<code>&quot;am_anr&quot;</code>关键字，没有搜到。测试同事所言没错，当时没有弹框出来是因为并没有发生<code>ANR</code>。<br>那会不会是低内存呢，这样猜想并不是没有道理的。因为我们机器本身内存比较小，之前经常出现内存不足的情况。进到<code>kernel</code>日志中看下<code>lowmemorykiller</code>杀进程的次数，只有四次且都不在问题发生的时间段，看来当时内存没有紧张<br>ok,大写的懵逼…下面开始分析日志  </p><p><strong>Step2 日志分析</strong><br>测试同事反馈当时因为右滑无法退出(项目中对右滑进行了特殊处理代替虚拟按键返回键)，只能通过power键退出<br>ok,先找到按power键的时间点</p><p><strong>step 2.1 main日志</strong><br>我们知道按键会先到<code>PhoneWindowManager</code>的<code>interceptKeyBeforeQueueing</code>函数进行处理，然后才会分发给应用，power键也不例外，只是power键会做特殊处理不会分发给应用<br>根据测试同事反馈的时间点，在<code>main</code>日志中搜到如下对应时间点的日志片段  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">42.019221</span>  <span class="number">1038</span>  <span class="number">1103</span> D WindowManager: interceptKeyBeforeQueueing: eventKeyEvent &#123; action=ACTION_UP, keyCode=KEYCODE_POWER, scanCode=<span class="number">116</span>, metaState=<span class="number">0</span>, flags=<span class="number">0x8</span>, repeatCount=<span class="number">0</span>, eventTime=<span class="number">667518</span>, downTime=<span class="number">667326</span>, deviceId=<span class="number">1</span>, source=<span class="number">0x101</span> &#125;</span><br></pre></td></tr></table></figure><p>这一处的日志便是<code>PhoneWindowManager</code>的<code>interceptKeyBeforeQueueing</code>函数中打印，问题点确定了在<code>18:12:42.019221</code>之前三四十秒的时间段内，ok，范围缩小了</p><p><strong>step2.2 event日志</strong><br>这里顺便说下，<code>event</code>日志一般记录了各个<code>activity</code>周期及事件，我个人一般看<code>event</code>日志主要看当时的界面变化过程以及确定anr时间点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">53.766062</span>  <span class="number">1038</span>  <span class="number">1091</span> I am_resume_activity: [<span class="number">0</span>,<span class="number">123117617</span>,<span class="number">8</span>,com.XXX.music/.MusicActivity]</span><br><span class="line">....</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">42.130951</span>  <span class="number">1038</span>  <span class="number">1053</span> I am_pause_activity: [<span class="number">0</span>,<span class="number">123117617</span>,com.XXX.music/.MusicActivity]</span><br><span class="line">....</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">42.223856</span>  <span class="number">1038</span>  <span class="number">1274</span> I am_resume_activity: [<span class="number">0</span>,<span class="number">69789570</span>,<span class="number">2</span>,com.XXX.launcher/.activity.MainActivity]</span><br></pre></td></tr></table></figure><p>这里可以确定问题发生时界面停留在音乐应用，后面因为按了<code>power</code>键的缘故回到了待机界面</p><p><strong>step2.3 sys日志</strong><br>对于<code>sys</code>日志呢，一般输出的是系统日志，一般在main日志里找不到可以在<code>sys</code>日志里找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Music应用开始播放音乐</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">01.384340</span>  <span class="number">2827</span>  <span class="number">2827</span> E MusicActivity: Receive: 讲真的</span><br><span class="line">…..</span><br><span class="line"><span class="comment">//按power键点亮屏幕</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">53.771419</span>  <span class="number">1038</span>  <span class="number">1103</span> D WindowManager: interceptKeyBeforeQueueing: eventKeyEvent &#123; action=ACTION_UP, keyCode=KEYCODE_POWER, scanCode=<span class="number">116</span>, metaState=<span class="number">0</span>, flags=<span class="number">0x8</span>, repeatCount=<span class="number">0</span>, eventTime=<span class="number">619270</span>, downTime=<span class="number">619127</span>, deviceId=<span class="number">1</span>, source=<span class="number">0x101</span> &#125;</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">53.843990</span>  <span class="number">1558</span>  <span class="number">1558</span> D LauncherMainActivity: screen on</span><br><span class="line">......</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.195224</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: mSwipeFireable=<span class="literal">false</span> mSwipeType=<span class="number">1</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.866527</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down pointerIndex=<span class="number">0</span> trackingIndex=<span class="number">0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.866599</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down x=<span class="number">0.0</span> y=<span class="number">100.58091</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.874044</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">100.58091</span>-&gt;<span class="number">253.94191</span>) <span class="keyword">in</span> <span class="number">10</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.883822</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">100.58091</span>-&gt;<span class="number">0.0</span>) <span class="keyword">in</span> <span class="number">19</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.893310</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">20.912863</span>,<span class="number">100.58091</span>-&gt;<span class="number">203.15353</span>) <span class="keyword">in</span> <span class="number">29</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.895061</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: Firing onSwipeFromLeft</span><br><span class="line">.....</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">32.243408</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: mSwipeFireable=<span class="literal">false</span> mSwipeType=<span class="number">4</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">32.414854</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down pointerIndex=<span class="number">0</span> trackingIndex=<span class="number">0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">32.415105</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down x=<span class="number">0.0</span> y=<span class="number">0.0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">32.423284</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">0.0</span>-&gt;<span class="number">253.94191</span>) <span class="keyword">in</span> <span class="number">10</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">32.423391</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: Firing onSwipeFromTop</span><br><span class="line">.....</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.611702</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: mSwipeFireable=<span class="literal">false</span> mSwipeType=<span class="number">1</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.861078</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down pointerIndex=<span class="number">0</span> trackingIndex=<span class="number">0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.861215</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down x=<span class="number">0.0</span> y=<span class="number">86.63901</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.868822</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">86.63901</span>-&gt;<span class="number">253.94191</span>) <span class="keyword">in</span> <span class="number">9</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.878235</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">86.63901</span>-&gt;<span class="number">0.0</span>) <span class="keyword">in</span> <span class="number">19</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.888622</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">31.86722</span>,<span class="number">86.63901</span>-&gt;<span class="number">179.25311</span>) <span class="keyword">in</span> <span class="number">29</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.888704</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: Firing onSwipeFromLeft</span><br><span class="line">.....</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">37.952528</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: mSwipeFireable=<span class="literal">false</span> mSwipeType=<span class="number">4</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">38.195578</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down pointerIndex=<span class="number">0</span> trackingIndex=<span class="number">0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">38.195683</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down x=<span class="number">0.0</span> y=<span class="number">0.0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">38.201532</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">0.0</span>-&gt;<span class="number">253.94191</span>) <span class="keyword">in</span> <span class="number">9</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">38.201606</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: Firing onSwipeFromTop</span><br><span class="line">......</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">40.888861</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: mSwipeFireable=<span class="literal">false</span> mSwipeType=<span class="number">1</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.131752</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down pointerIndex=<span class="number">0</span> trackingIndex=<span class="number">0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.131874</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down x=<span class="number">0.0</span> y=<span class="number">95.60166</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.137845</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">95.60166</span>-&gt;<span class="number">253.94191</span>) <span class="keyword">in</span> <span class="number">9</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.147534</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">95.60166</span>-&gt;<span class="number">0.0</span>) <span class="keyword">in</span> <span class="number">19</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.157208</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">20.912863</span>,<span class="number">95.60166</span>-&gt;<span class="number">209.12863</span>) <span class="keyword">in</span> <span class="number">29</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.157279</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: Firing onSwipeFromLeft</span><br><span class="line">......</span><br><span class="line"><span class="comment">//按power键返回待机界面</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">42.019221</span>  <span class="number">1038</span>  <span class="number">1103</span> D WindowManager: interceptKeyBeforeQueueing: eventKeyEvent &#123; action=ACTION_UP, keyCode=KEYCODE_POWER, scanCode=<span class="number">116</span>, metaState=<span class="number">0</span>, flags=<span class="number">0x8</span>, repeatCount=<span class="number">0</span>, eventTime=<span class="number">667518</span>, downTime=<span class="number">667326</span>, deviceId=<span class="number">1</span>, source=<span class="number">0x101</span> &#125;</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">42.036468</span>  <span class="number">1558</span>  <span class="number">1558</span> D LauncherService: goback to homescreen and clear all background apps</span><br><span class="line">......</span><br><span class="line"><span class="comment">//此时通过launcher菜单再次进入Music应用，提示处于高温下</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">21</span>:<span class="number">56.784003</span>  <span class="number">1558</span>  <span class="number">1558</span> I LauncherMainActivity: onItemClick, position = <span class="number">10</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">21</span>:<span class="number">56.784848</span>  <span class="number">1558</span>  <span class="number">1558</span> D LauncherMainActivity: isNetwrokOk = :<span class="literal">true</span>,isBinded = :<span class="literal">true</span>,isHighTemper = :<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这段日志呢可以看出屏幕无响应的一段时间内，是有手势滑动发生的</p><p><strong>step2.4 代码分析</strong><br>既然有手势滑动为什么界面不能退出呢，是不是我们自己写的判断条件出了问题，上面日志中这些片段  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">20.912863</span>,<span class="number">95.60166</span>-&gt;<span class="number">209.12863</span>) <span class="keyword">in</span> <span class="number">29</span></span><br></pre></td></tr></table></figure><p>代表什么意思呢, 跟到代码里看一看<br><code>frameworks/base/services/core/java/com/android/server/policy/SystemGesturesPointerEventListener.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">detectSwipe</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> time, <span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> fromX = mDownX[i];</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> fromY = mDownY[i];</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> elapsed = time - mDownTime[i];</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">"pointer "</span> + mDownPointerId[i]</span><br><span class="line">                + <span class="string">" moved ("</span> + fromX + <span class="string">"-&gt;"</span> + x + <span class="string">","</span> + fromY + <span class="string">"-&gt;"</span> + y + <span class="string">") in "</span> + elapsed);</span><br><span class="line">         <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志打印的代表<code>X坐标</code>,<code>Y坐标</code>的滑动变化以及滑动时间</p><p>此时再来看看日志中问题发生时测试同事滑动轨迹,<code>Y坐标</code>看上去没有问题,<code>X坐标</code>看着有点奇怪，怎么都是从0开始的呢,且松开时移动距离非常小<br>那么如此小的移动距离，有没有满足滑动退出的条件呢？因为这一块判断条件是客制化的，需要<code>X坐标</code>滑动起码达到<code>60</code>才能满足滑动退出的条件，这里就不贴出具体代码</p><p>小结：<br>在测试同事反应屏幕滑动无响应的时间段内，40秒的时间段内有四次手势发生，手指滑动的X坐标变化幅度很小<br>鉴于<code>SystemGesturesPointerEventListener.java</code>这支文件中的<code>detectSwipe</code>函数会对<code>X坐标</code>的变化幅度进行判断，至少达到<code>60</code>以上才会返回SWIPE_BACK(该type类型是根据项目客制化添加的)<br>很显然上面日志中X坐标变化幅度没有达到这个要求，也就导致了onPointerEvent函数中走不到inject back action逻辑中，从而系统判断没有返回事件发生<br>同测试同事沟通当时是正常的尝试滑动退出，故上面的X坐标变化历程显然有误，数值过小且起始点坐标与落下点坐标也与实际情况不符</p><p><strong>综合下来: 判定是屏幕报点不准导致</strong></p><p>Have a good day!</p><hr><font color="#000000" size="2" face="楷体">公司，上班前，听着歌，惬意</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题现象&lt;br&gt;&lt;code&gt;在应用中出现屏幕右滑无响应&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;复现概率:&lt;br&gt;&lt;code&gt;once&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题平台:&lt;br&gt;&lt;code&gt;Android N&lt;/code&gt;  &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>开源框架Zxing生成二维码流程分析(Android)</title>
    <link href="http://lihaizhou.top/2018/05/28/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6Zxing%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90-Android/"/>
    <id>http://lihaizhou.top/2018/05/28/开源框架Zxing生成二维码流程分析-Android/</id>
    <published>2018-05-28T07:55:37.000Z</published>
    <updated>2019-04-13T08:44:35.467Z</updated>
    
    <content type="html"><![CDATA[<p>项目中用到了<code>Zxing</code>的开源框架，使用起来比较简单，依赖包导入，根据官方说明demo做就可以了。接下来梳理下其生成二维码的流程，所谓知其然知其所以然，ok, let’s go</p><p>应用端核心代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hashtable hints= <span class="keyword">new</span> Hashtable();</span><br><span class="line">hints.put(EncodeHintType.CHARACTER_SET, <span class="string">"utf-8"</span>);</span><br><span class="line">hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">hints.put(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br><span class="line">BitMatrix bitMatrix = <span class="keyword">new</span> QRCodeWriter().encode(url, BarcodeFormat.QR_CODE, width, height,hints);</span><br></pre></td></tr></table></figure><p><code>url</code>: 即数据源，可以根据项目需求传入指定的url，比如一个下载应用的链接网址<br><code>width height</code> : 应用端设置的二维码宽高<br><code>hints</code>: 主要用于配置二维码的一些参数，比如纠错级别，白边宽度等  </p><p>最核心的一句代码即:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BitMatrix bitMatrix = <span class="keyword">new</span> QRCodeWriter().encode(url, BarcodeFormat.QR_CODE, width, height,hints);</span><br></pre></td></tr></table></figure><p>接下来以此为切入点展开分析</p><p><strong>源码分析流程</strong></p><p>如下代码均摘自Zxing github项目(<a href="https://github.com/zxing/zxing/" target="_blank" rel="noopener">https://github.com/zxing/zxing/</a>)</p><p><strong>Step1</strong><br><code>QRCodeWriter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BitMatrix <span class="title">encode</span><span class="params">(String contents,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BarcodeFormat format,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">                          Map&lt;EncodeHintType,?&gt; hints)</span> <span class="keyword">throws</span> WriterException </span>&#123;</span><br><span class="line">    <span class="comment">//检查传入内容是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (contents.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Found empty contents"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不是QR_CODE直接跑出异常, 我们前面应用端传入的正是QR_CODE</span></span><br><span class="line">    <span class="keyword">if</span> (format != BarcodeFormat.QR_CODE) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Can only encode QR_CODE, but got "</span> + format);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检测宽高数值是否异常</span></span><br><span class="line">    <span class="keyword">if</span> (width &lt; <span class="number">0</span> || height &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Requested dimensions are too small: "</span> + width + <span class="string">'x'</span> +</span><br><span class="line">          height);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//纠错级别初始值是Low</span></span><br><span class="line">    ErrorCorrectionLevel errorCorrectionLevel = ErrorCorrectionLevel.L;</span><br><span class="line">    <span class="keyword">int</span> quietZone = QUIET_ZONE_SIZE;</span><br><span class="line">    <span class="comment">//检测hints是否为空即用户是否有设置</span></span><br><span class="line">    <span class="keyword">if</span> (hints != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">//检测hints中用户是否设置了纠错级别，有的话使用用户自己设置的纠错级别</span></span><br><span class="line">      <span class="keyword">if</span> (hints.containsKey(EncodeHintType.ERROR_CORRECTION)) &#123;</span><br><span class="line">        errorCorrectionLevel =                         ErrorCorrectionLevel.valueOf(hints.get(EncodeHintType.ERROR_CORRECTION).toString());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//检测hints中用户是否设置了白边宽度，有的话使用用户自己设置的白边宽度</span></span><br><span class="line">      <span class="keyword">if</span> (hints.containsKey(EncodeHintType.MARGIN)) &#123;</span><br><span class="line">        quietZone = Integer.parseInt(hints.get(EncodeHintType.MARGIN).toString());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    如下两句代码是这个函数最核心的两句</span><br><span class="line">    <span class="comment">//这里是将传入的contents转换成QRcode</span></span><br><span class="line">    QRCode code = Encoder.encode(contents, errorCorrectionLevel, hints);</span><br><span class="line">   <span class="comment">//这里将QRcode转换为BitMatrix并jhi加入白边</span></span><br><span class="line">    <span class="keyword">return</span> renderResult(code, width, height, quietZone);(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step2</strong><br><code>Encoder.java</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_BYTE_MODE_ENCODING = <span class="string">"ISO-8859-1"</span>; <span class="comment">//如果hints中不设置编码格式的话，默认使用此编码</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> QRCode <span class="title">encode</span><span class="params">(String content,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ErrorCorrectionLevel ecLevel,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Map&lt;EncodeHintType,?&gt; hints)</span> <span class="keyword">throws</span> WriterException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine what character encoding has been specified by the caller, if any</span></span><br><span class="line">    String encoding = DEFAULT_BYTE_MODE_ENCODING;</span><br><span class="line">    <span class="comment">//hint不为空且其中包含key为CHARACTER_SET的值</span></span><br><span class="line">    <span class="keyword">boolean</span> hasEncodingHint = hints != <span class="keyword">null</span> &amp;&amp; hints.containsKey(EncodeHintType.CHARACTER_SET);</span><br><span class="line">    <span class="keyword">if</span> (hasEncodingHint) &#123;</span><br><span class="line">      <span class="comment">//从hints中取key为CHARACTER_SET的值，即对应的编码方式</span></span><br><span class="line">      encoding = hints.get(EncodeHintType.CHARACTER_SET).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pick an encoding mode appropriate for the content. Note that this will not attempt to use</span></span><br><span class="line">    <span class="comment">// multiple modes / segments even if that were more efficient. Twould be nice.</span></span><br><span class="line">    <span class="comment">//根据传入的内容选择合适的编码模型</span></span><br><span class="line">    Mode mode = chooseMode(content, encoding);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This will store the header information, like mode and</span></span><br><span class="line">    <span class="comment">// length, as well as "header" segments like an ECI segment.</span></span><br><span class="line">    BitArray headerBits = <span class="keyword">new</span> BitArray();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Append ECI segment if applicable</span></span><br><span class="line">    <span class="keyword">if</span> (mode == Mode.BYTE &amp;&amp; (hasEncodingHint || !DEFAULT_BYTE_MODE_ENCODING.equals(encoding))) &#123;</span><br><span class="line">      CharacterSetECI eci = CharacterSetECI.getCharacterSetECIByName(encoding);</span><br><span class="line">      <span class="keyword">if</span> (eci != <span class="keyword">null</span>) &#123;</span><br><span class="line">        appendECI(eci, headerBits);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (With ECI in place,) Write the mode marker</span></span><br><span class="line">    appendModeInfo(mode, headerBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Collect data within the main segment, separately, to count its size if needed. Don't add it to</span></span><br><span class="line">    <span class="comment">// main payload yet.</span></span><br><span class="line">    BitArray dataBits = <span class="keyword">new</span> BitArray();</span><br><span class="line">    appendBytes(content, mode, dataBits, encoding);</span><br><span class="line"></span><br><span class="line">    Version version;</span><br><span class="line">    <span class="comment">//查询hints是否指定了使用的版本，没有的话则使用默认版本</span></span><br><span class="line">    <span class="keyword">if</span> (hints != <span class="keyword">null</span> &amp;&amp; hints.containsKey(EncodeHintType.QR_VERSION)) &#123;</span><br><span class="line">      <span class="keyword">int</span> versionNumber = Integer.parseInt(hints.get(EncodeHintType.QR_VERSION).toString());</span><br><span class="line">      version = Version.getVersionForNumber(versionNumber);</span><br><span class="line">      <span class="keyword">int</span> bitsNeeded = calculateBitsNeeded(mode, headerBits, dataBits, version);</span><br><span class="line">      <span class="keyword">if</span> (!willFit(bitsNeeded, version, ecLevel)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> WriterException(<span class="string">"Data too big for requested version"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      version = recommendVersion(ecLevel, mode, headerBits, dataBits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BitArray headerAndDataBits = <span class="keyword">new</span> BitArray();</span><br><span class="line">    headerAndDataBits.appendBitArray(headerBits);</span><br><span class="line">    <span class="comment">// Find "length" of main segment and write it</span></span><br><span class="line">    <span class="keyword">int</span> numLetters = mode == Mode.BYTE ? dataBits.getSizeInBytes() : content.length();</span><br><span class="line">    appendLengthInfo(numLetters, version, mode, headerAndDataBits);</span><br><span class="line">    <span class="comment">// Put data together into the overall payload</span></span><br><span class="line">    headerAndDataBits.appendBitArray(dataBits);</span><br><span class="line"></span><br><span class="line">    Version.ECBlocks ecBlocks = version.getECBlocksForLevel(ecLevel);</span><br><span class="line">    <span class="keyword">int</span> numDataBytes = version.getTotalCodewords() - ecBlocks.getTotalECCodewords();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Terminate the bits properly.</span></span><br><span class="line">    terminateBits(numDataBytes, headerAndDataBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Interleave data bits with error correction code.</span></span><br><span class="line">    BitArray finalBits = interleaveWithECBytes(headerAndDataBits,</span><br><span class="line">                                              version.getTotalCodewords(),</span><br><span class="line">                                              numDataBytes,</span><br><span class="line">                                              ecBlocks.getNumBlocks());</span><br><span class="line"></span><br><span class="line">    QRCode qrCode = <span class="keyword">new</span> QRCode();</span><br><span class="line"></span><br><span class="line">    qrCode.setECLevel(ecLevel);<span class="comment">// 纠错级别</span></span><br><span class="line">    qrCode.setMode(mode);</span><br><span class="line">    qrCode.setVersion(version);<span class="comment">// 设置Qrcode包的版本</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Choose the mask pattern and set to "qrCode".</span></span><br><span class="line">    <span class="keyword">int</span> dimension = version.getDimensionForVersion();</span><br><span class="line">    ByteMatrix matrix = <span class="keyword">new</span> ByteMatrix(dimension, dimension);</span><br><span class="line">    <span class="comment">//这里遍历所有的Mask Pattern并根据一定的判定准则来选择最佳的Mask Pattern</span></span><br><span class="line">    <span class="keyword">int</span> maskPattern = chooseMaskPattern(finalBits, ecLevel, version, matrix);</span><br><span class="line">    qrCode.setMaskPattern(maskPattern);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build the matrix and set it to "qrCode".</span></span><br><span class="line">    MatrixUtil.buildMatrix(finalBits, ecLevel, version, maskPattern, matrix);</span><br><span class="line">    qrCode.setMatrix(matrix);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> qrCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step3</strong><br>这一步最为关键，将上一步得到的<code>QRcode</code>转换为<code>BitMatrix</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses</span></span><br><span class="line">  <span class="comment">// 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BitMatrix <span class="title">renderResult</span><span class="params">(QRCode code, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> quietZone)</span> </span>&#123;</span><br><span class="line">    ByteMatrix input = code.getMatrix();</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> inputWidth = input.getWidth();</span><br><span class="line">    <span class="keyword">int</span> inputHeight = input.getHeight();</span><br><span class="line">    <span class="comment">//这里在原始数据基础上加上边距即白边的距离，分别计算出二维码宽高</span></span><br><span class="line">    <span class="keyword">int</span> qrWidth = inputWidth + (quietZone * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> qrHeight = inputHeight + (quietZone * <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//这里进一步根据应用端传入的宽高进行对比，得出最终要输出的宽高</span></span><br><span class="line">    <span class="keyword">int</span> outputWidth = Math.max(width, qrWidth);</span><br><span class="line">    <span class="keyword">int</span> outputHeight = Math.max(height, qrHeight);</span><br><span class="line">    <span class="comment">//计算缩放比例</span></span><br><span class="line">    <span class="keyword">int</span> multiple = Math.min(outputWidth / qrWidth, outputHeight / qrHeight);</span><br><span class="line">    <span class="comment">// Padding includes both the quiet zone and the extra white pixels to accommodate the requested</span></span><br><span class="line">    <span class="comment">// dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.</span></span><br><span class="line">    <span class="comment">// If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will</span></span><br><span class="line">    <span class="comment">// handle all the padding from 100x100 (the actual QR) up to 200x160.</span></span><br><span class="line">    <span class="comment">//计算左边白边的宽度</span></span><br><span class="line">    <span class="keyword">int</span> leftPadding = (outputWidth - (inputWidth * multiple)) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//计算顶部白边的宽度</span></span><br><span class="line">    <span class="keyword">int</span> topPadding = (outputHeight - (inputHeight * multiple)) / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    BitMatrix output = <span class="keyword">new</span> BitMatrix(outputWidth, outputHeight);</span><br><span class="line">    <span class="comment">//双重循环, 将ByteMatrix内容进行padding计算后转换为BitMatrix</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> inputY = <span class="number">0</span>, outputY = topPadding; inputY &lt; inputHeight; inputY++, outputY += multiple) &#123;</span><br><span class="line">      <span class="comment">// Write the contents of this row of the barcode</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> inputX = <span class="number">0</span>, outputX = leftPadding; inputX &lt; inputWidth; inputX++, outputX += multiple) &#123;</span><br><span class="line">        <span class="keyword">if</span> (input.get(inputX, inputY) == <span class="number">1</span>) &#123;</span><br><span class="line">          output.setRegion(outputX, outputY, multiple, multiple);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里白边宽度在应用端是根据属性<code>Margin</code>来设置, 示例如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hints.put(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Step4</strong><br>拿到<code>BitMatrix</code>后就可以转换为<code>bitmap</code>进而转换为<code>image</code>显示</p><p>如下是将BitMatrix转成bitmap的过程 </p><pre><code class="java"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) {       <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) {             <span class="keyword">if</span> (bitMatrix.get(x, y)) {                 pixels[y * width+ x] = <span class="number">0xff000000</span>;              } <span class="keyword">else</span> {                 pixels[y * width+ x] = <span class="number">0xFFF1C900</span>;               }          } }Bitmap bitmap = Bitmap.createBitmap(width,height, Bitmap.Config.ARGB_8888);bitmap.setPixels(pixels, <span class="number">0</span>,width, <span class="number">0</span>, <span class="number">0</span>,width,height);  </code></pre><p>这里的height,width代表应用端设置的宽高值</p><p><strong>Step5</strong><br>添加logo，这个比较简单，在Bitmap中间再绘制一个Bitmap就可以了  </p><pre><code class="java"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">addLogo</span><span class="params">(Bitmap src, Bitmap logo)</span> </span>{  <span class="keyword">if</span> (logo == <span class="keyword">null</span>) {      <span class="keyword">return</span> src;  }  <span class="comment">// 获取图片的宽高</span>  <span class="keyword">int</span> srcWidth = src.getWidth();  <span class="keyword">int</span> srcHeight = src.getHeight();  <span class="keyword">int</span> logoWidth = logo.getWidth();  <span class="keyword">int</span> logoHeight = logo.getHeight();  <span class="keyword">if</span> (logoWidth == <span class="number">0</span> || logoHeight == <span class="number">0</span>) {      <span class="keyword">return</span> src;  }  <span class="comment">// logo大小为二维码整体大小的1/5</span> <span class="keyword">float</span> scaleFactor = srcWidth * <span class="number">1.0f</span> / <span class="number">5</span> / logoWidth; Bitmap bitmap = Bitmap.createBitmap(srcWidth, srcHeight, Bitmap.Config.ARGB_8888); <span class="keyword">try</span> {      Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);      canvas.drawBitmap(src, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);      canvas.scale(scaleFactor, scaleFactor, srcWidth / <span class="number">2</span>, srcHeight / <span class="number">2</span>);      canvas.drawBitmap(logo, (srcWidth - logoWidth) / <span class="number">2</span>, (srcHeight - logoHeight) / <span class="number">2</span>, <span class="keyword">null</span>);      canvas.save(Canvas.ALL_SAVE_FLAG);      canvas.restore(); } <span class="keyword">catch</span> (Exception e) {      bitmap = <span class="keyword">null</span>;      e.getStackTrace(); }      <span class="keyword">return</span> bitmap;}</code></pre><p>Zxing中的功能较多且支持多平台，这里讨论的是Android平台上的生成二维码流程，到此讨论完毕</p><p>Have a good day!</p><hr><font color="#000000" size="2" face="楷体">本文写于公司午休时间，电脑前，头顶蓝牙耳机，听着惬意的歌</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目中用到了&lt;code&gt;Zxing&lt;/code&gt;的开源框架，使用起来比较简单，依赖包导入，根据官方说明demo做就可以了。接下来梳理下其生成二维码的流程，所谓知其然知其所以然，ok, let’s go&lt;/p&gt;
&lt;p&gt;应用端核心代码  &lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>一个无法开机问题的分析流程</title>
    <link href="http://lihaizhou.top/2018/05/17/%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    <id>http://lihaizhou.top/2018/05/17/一个无法开机问题的分析流程/</id>
    <published>2018-05-17T02:42:27.000Z</published>
    <updated>2019-04-13T08:43:57.292Z</updated>
    
    <content type="html"><![CDATA[<p>问题平台<br><code>Android7.1.1</code>  <code>MT6739</code></p><p>问题现象<br><code>走完一部分开机动画后停留在recovery界面，无法进入系统</code></p><p>初步分析:<br>开机后进入<code>recovery</code> ，以往经验来看猜测是重要进程启动异常，可能被连续被kill</p><p><strong>Step1 日志分析</strong><br>需要的日志：eng版本<code>uart log</code>+<code>main log</code>(如果已经进入Android的话)+<code>data/aee_exp</code>下的db文件(如果有db生成的话)</p><p><strong>Step1.1  抓取串口日志</strong><br>首先说下串口日志的获取方式:<br>串口线中的白色接<code>TX</code>，黑色线接地，我这里是在windows下抓取，使用了一个<code>SSCOM</code>的工具，<code>MTK</code>平台上波特率需要选择<code>921600</code>, 这个工具使用之前需要安装<code>usb to serial</code>驱动，不然会出现识别不了设备的情况<br>这里需要说明的是需要使用eng版本获取日志，如果是user版本的话，需要做一些额外工作</p><p><strong>Step1.2 分析串口日志</strong><br>首先先看下系统走到了哪一步，关键步骤都是会有对应的日志输出，从过往的项目以及分析经验，已形成了一套既定的分析流程<br>这里说下分析串口日志中的一些关键字如下  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="string">"Preparing for EL3 exit to normal world, LK"</span></span><br><span class="line">   如果串口log里面没有走到这里，说明在PL就卡住了，这句表示进入LK</span><br><span class="line"><span class="number">2</span>、<span class="string">"lk finished --&gt; jump to linux kernel"</span></span><br><span class="line">   如果串口log里面没有走到这里，但是上面走到了，说明在lk卡住了，这句表示进入kernel</span><br><span class="line"><span class="number">3</span>、<span class="string">"Kernel_init_done"</span></span><br><span class="line">   这句表示kernel初始化完成了，正准备启动init进程，如果这就没有走到：请搜索关键字initcall，</span><br><span class="line">   initcall是顺序执行例如module_init注册的init函数，看看卡在哪个call back上</span><br><span class="line"><span class="number">4</span>、<span class="string">"BOOTPROF"</span></span><br><span class="line">   这是开机过程中，每走过一个重要阶段都会打印的标志，例如上面Kernel_init_done这一句就会打上这个标志</span><br><span class="line"><span class="number">5</span>、<span class="string">"init: init first stage started"</span></span><br><span class="line">   这句表示init进程正常起来执行</span><br><span class="line"><span class="number">6</span>、<span class="string">"fs_mgr"</span> 和<span class="string">"e2fsck"</span></span><br><span class="line">   这里标志是在检查和mount 文件系统，如果失败会有如下log：fs_mgr_mount_all returned an error fs_mgr_mount_all returned unexpected error <span class="number">255</span></span><br><span class="line"><span class="number">7</span>、<span class="string">"zygote"</span></span><br><span class="line">   Starting service <span class="string">'zygote'</span>：这里表示要启动zygote,如果没有这一句表示zygote还没启动，则要检查之前的initrc执行情况，文件系统mount情况</span><br><span class="line"><span class="number">8</span>、<span class="string">"SysServerInit_START"</span></span><br><span class="line">   启动system_server</span><br><span class="line"><span class="number">9</span>、<span class="string">"system_server"</span></span><br><span class="line">   这里表示system_server有起来</span><br><span class="line"><span class="number">10</span>、<span class="string">"BOOT_Animation:END"</span></span><br><span class="line">   表示开机动画正常结束，进入安卓</span><br></pre></td></tr></table></figure><p>我们的这份日志中1-9均有打印，说明已经进入了Android部分，在init进程起来后，如下片段  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[  <span class="number">29.560029</span>] &lt;<span class="number">1</span>&gt;.(<span class="number">1</span>)[<span class="number">1</span>:init]init: Service <span class="string">'healthd'</span> (pid <span class="number">310</span>) killed by signal <span class="number">11</span></span><br></pre></td></tr></table></figure><p>后面紧跟着很多关键进程均打出sig 9即被kill掉<br>关于linux signal信号表对应关系如下(只列出部分)  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SIGHUP      <span class="number">1</span>           Term    终端的挂断或进程死亡</span><br><span class="line">SIGINT      <span class="number">2</span>           Term    来自键盘的中断信号</span><br><span class="line">SIGQUIT     <span class="number">3</span>           Core    来自键盘的离开信号</span><br><span class="line">SIGILL      <span class="number">4</span>           Core    非法指令</span><br><span class="line">SIGABRT     <span class="number">6</span>           Core    来自abort的异常信号</span><br><span class="line">SIGFPE      <span class="number">8</span>           Core    浮点例外</span><br><span class="line">SIGKILL     <span class="number">9</span>           Term    杀死</span><br><span class="line">SIGSEGV     <span class="number">11</span>          Core    段非法错误(内存引用无效)</span><br></pre></td></tr></table></figure><p>这里大概明白问题出在了<code>healthd</code>上，这是与电量相关的进程，在user space中</p><p>对于是否需要抓取logcat日志，可以看看串口日志中是否有如下片段  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Starting service <span class="string">'zygote'</span></span><br></pre></td></tr></table></figure><p>这一步代表<code>zygote</code>起来了，这时候就必须要抓取logcat进一步分析，我们这笔问题中该日志片段有打印出来，所以需要抓取logcat进一步分析</p><p><strong>Step1.3 分析logcat日志</strong><br>找到如下片段，说明<code>data/aee_exp</code>下面也有<code>db</code>文件生成了  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-02</span> <span class="number">04</span>:<span class="number">52</span>:<span class="number">48.578</span> I/AEE_AED (  <span class="number">350</span>): Revision: <span class="string">'0'</span></span><br><span class="line"><span class="number">05</span><span class="number">-02</span> <span class="number">04</span>:<span class="number">52</span>:<span class="number">48.578</span> I/AEE_AED (  <span class="number">350</span>): ABI: <span class="string">'arm'</span></span><br><span class="line"><span class="number">05</span><span class="number">-02</span> <span class="number">04</span>:<span class="number">52</span>:<span class="number">48.579</span> I/AEE_AED (  <span class="number">350</span>): pid: <span class="number">310</span>, <span class="attr">tid</span>: <span class="number">310</span>, <span class="attr">name</span>: healthd  &gt;&gt;&gt; <span class="regexp">/sbin/</span>healthd &lt;&lt;&lt;</span><br><span class="line">05-02 04:52:48.580 I/AEE_AED (  350): signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x2</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    r0 00000002  r1 00000002  r2 0000089c  r3 00000006</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    r4 ffffffff  r5 00000001  r6 00000000  r7 00000002</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    r8 becc68bc  r9 0008819e  sl ffffffff  fp becc6680</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    ip 00000002  sp becc6678  lr 0005d494  pc 0005e16c  cpsr 20070030</span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350): </span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350): backtrace:</span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350):    #00 pc 0005e16c  /sbin/healthd</span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350):    #01 pc 0005d490  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #02 pc 00056c04  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #03 pc 00064ef4  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #04 pc 00027e00  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #05 pc 0000b291  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #06 pc 0000b10d  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #07 pc 000088c9  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #08 pc 00008d73  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #09 pc 00008c3f  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #10 pc 00008afb  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #11 pc 0005e055  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #12 pc 000086c8  /sbin/healthd</span><br></pre></td></tr></table></figure><p>这里出现了段错误，这个时候需要拿出看家小工具<code>addr2line</code>来定位到代码出错的位置，这里顺便说下<code>Addr2line</code>的作用  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Addr2line （它是标准的 GNU Binutils 中的一部分）是一个可以将指令的地址和可执行映像转换成文件名、函数名和源代码行数的工具。这种功能对于将跟踪地址转换成更有意义的内容来说简直是太棒了</span><br></pre></td></tr></table></figure><p>我这里的addr2line使用的是代码工程中的，代码工程下有很多addr2line，这里就随便用了一个目录下的addr2line，另外分析还需要<code>out/target/product/XXX/symbols/sbin/healthd</code>文件，注意这里的<code>healthd</code>文件必须和日志中是同一套代码，否则可能分析出来的代码位置会有偏差</p><p>使用命令如下:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lihaizhou@ubuntu:~<span class="regexp">/Code/</span>sw710/<span class="number">6739</span>$ <span class="string">'/home/lihaizhou/Code/sw710/6739/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.8/bin/x86_64-linux-addr2line'</span> -e <span class="string">'/home/lihaizhou/Code/sw710/6739/out/target/product/lcsh6739_35_sw730/symbols/sbin/healthd'</span> <span class="number">0000</span>b291</span><br></pre></td></tr></table></figure><p>得到如下结果  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/cwd/system/core/healthd/BatteryMonitor.cpp:<span class="number">861</span></span><br></pre></td></tr></table></figure><p>进到<code>BatteryMonitor.cpp</code>第861行，是一句最近添加的日志  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KLOG_INFO(LOG_TAG, <span class="string">"BatteryMonitor cmd_send props.batteryStatus '%s'\n"</span>, props.batteryStatus);</span><br></pre></td></tr></table></figure><p><strong>Step2 问题解决</strong><br>仔细查看了这行日志, 发现是类型写错了，<code>props.batteryStatus</code>是整型，这里使用了字串类型打印，当然会报错了<br>ok，将类型修改为整型，重新编译烧录img到机器中，开机正常了</p><p><strong>小结</strong><br>对系统启动流程以及<code>addr2line</code>的使用比较熟悉的话，这笔问题分析还是比较容易的，ok，这笔问题分析到此为止</p><p>Have a good day！</p><font color="#000000" size="3" face="楷体"><br>另:<br>关于串口日志MTK online有相关FAQ可以参考<br>FAQ15320 不同模式下如何保持uart log一直打开<br><a href="http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ15320" target="_blank" rel="noopener">http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ15320</a><br>FAQ03891如何在User版本开启串口(Uart),抓取上层Log,开启输入控制台<br><a href="http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ03891" target="_blank" rel="noopener">http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ03891</a></font><hr><font color="#000000" size="2" face="楷体">公司午休时间，电脑前，黑眼圈，脑袋一片空白，肚子有点饿，等外卖</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题平台&lt;br&gt;&lt;code&gt;Android7.1.1&lt;/code&gt;  &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题现象&lt;br&gt;&lt;code&gt;走完一部分开机动画后停留在recovery界面，无法进入系统&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;初步分析:&lt;br&gt;开机后进入&lt;c
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>基于开源框架SlidingUpPanel二次开发</title>
    <link href="http://lihaizhou.top/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    <id>http://lihaizhou.top/2018/05/14/基于开源框架SlidingUpPanel二次开发/</id>
    <published>2018-05-14T13:52:57.000Z</published>
    <updated>2019-04-13T08:44:40.836Z</updated>
    
    <content type="html"><![CDATA[<p><strong>项目需求</strong><br>写一个SystemUI，默认是隐藏，手指在Launcher界面顶部往下滑动时，SystemUI显示并随着手指滑动高度不断变化，直到往下铺满屏幕</p><p><strong>初步分析</strong><br>最初的想法是在原生SystemUI基础上进行修改，在看了原生SystemUI代码后，word天，原生SystemUI代码量十分庞大且代码结构比较复杂，很多地方耦合比较高，初步估计厘清需要耗费的时间会比较长。于是有了单独写一个的想法，这样代码比较简洁，以后项目上也方便复用。</p><p><strong>设计框架</strong><br>下拉面板显然需要一个自定义布局，这个自定义View高度能够手指滑动变化，ok，理论上并不复杂<br>github兜一圈，看看有没有类似的框架，茫茫大海中找到了一个<code>SlidingUpPanel</code>的开源框架<br>github主页地址: <a href="https://github.com/umano/AndroidSlidingUpPanel" target="_blank" rel="noopener">https://github.com/umano/AndroidSlidingUpPanel</a><br>确认过眼神，是需要找的框架，看了下介绍是一个能够向上滑动的时候往上飞出一个显示区域的控件，star较多且仍在维护，是个靠谱青年，so，就在此基础上进行修改吧，就这么愉快的决定了。</p><p><strong>源码效果图</strong></p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E6%95%88%E6%9E%9C%E5%9B%BE.jpg?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br>最开始下面有一个栏目布局，随着手指拖动高度不断变化直到往上完全铺满屏幕</p><p><strong>Step1：研究框架源码</strong><br>源码中有三支主要文件，如下</p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br>其中核心文件是<code>SlidingUpPanelLayout.java</code>，对应的是面板的UI界面，继承自ViewGroup，整支文件有1490行之多，好在代码结构清晰明了，阅读起来比较顺利，后面的修改主要针对<code>SlidingUpPanelLayout</code>这支文件以及布局文件</p><p><strong>Step2：实做部分</strong><br>在阅读了源码流程之后，开始撸起袖子干活，主要的修改有下面一些点</p><p><strong>面板默认状态修改</strong><br>PanelState提供的面板五种不同状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PanelState &#123;</span><br><span class="line">     EXPANDED, <span class="comment">//全部展开状态</span></span><br><span class="line">     COLLAPSED, <span class="comment">//默认状态</span></span><br><span class="line">     ANCHORED, <span class="comment">//锚点</span></span><br><span class="line">     HIDDEN, <span class="comment">//隐藏状态</span></span><br><span class="line">     DRAGGING <span class="comment">//拖动状态</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们的systemUI样式只需要其中的<code>EXPANDED</code>，<code>HIDDEN</code>，<code>DRAGGING</code>这三种状态，其他两种状态相关牵扯到的代码都可以移除<br>源码默认的状态是<code>COLLAPSED</code>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Default initial state for the component</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> PanelState DEFAULT_SLIDE_STATE = PanelState.COLLAPSED;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> PanelState mSlideState = DEFAULT_SLIDE_STATE;</span><br></pre></td></tr></table></figure><p>构造函数中从配置值获取了默认状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSlideState = PanelState.values()[ta.getInt(R.styleable.SlidingUpPanelLayout_umanoInitialState, DEFAULT_SLIDE_STATE.ordinal())];</span><br></pre></td></tr></table></figure><p>后面<code>onMeasure</code>,<code>onLayout</code>将根据<code>mSlideState</code>得值来绘制初始化界面</p><p>我们systemUI初始化界面默认需要是<code>HIDDEN</code>状态，故后面更改xml中的配置值调整为hidden即可</p><p><strong>去掉一栏布局部分(红色部分)</strong></p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E5%8E%BB%E6%8E%89%E5%BA%95%E9%83%A8%E9%BB%98%E8%AE%A4%E9%AB%98%E5%BA%A6.jpg?raw=true" align="left" style=" width:200px;height:200 px"><br><br><br><br><br><br><br><br><br><br><br></p><p>对应<code>PanelHeight</code>这个的值，这个值在构造函数中会去xml中获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mPanelHeight = ta.getDimensionPixelSize(R.styleable.SystemUiPanel_umanoPanelHeight, -<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>将布局文件中SlidingUpPanelLayout节点下的umanoPanelHeight样式值改为0dp即可  </p><p><strong>默认划出面板方向</strong><br>github上给的demo例子里，是将<code>SlidingUpPanelLayout</code>设置<code>android:gravity=&quot;bottom&quot;</code>，改为<code>top</code>即可</p><p><strong>添加手势事件</strong><br>源码中面板默认不是隐藏，有一定高度，根据点击事件响应展开还是隐藏，我们的systemUI中面板默认是完全隐藏状态，所以就没有了可见的view来响应事件，需要依据手指在顶部滑动的方向以及滑动距离来判断是否打开面板<br><code>SlidingUpPanelLayout</code>这支文件中添加手势滑动事件判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLauncherTouchEvent</span><span class="params">(MotionEvent ev, <span class="keyword">boolean</span> result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                pointDownY1 = ev.getY();</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                pointDownY2 = ev.getY();</span><br><span class="line">                <span class="keyword">if</span> (pointDownY2 - pointDownY1 &gt; FLIP_DISTANCE &amp;&amp; pointDownY1 &lt; FLIP_DISTANCE) &#123;</span><br><span class="line">                    setPanelState(PanelState.EXPANDED);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>隐藏状态下无法划出面板</strong><br>源码设计中对于隐藏状态是无法划出面板的  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//省略部分代码</span></span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">                mIsUnableToDrag = <span class="keyword">false</span>;</span><br><span class="line">                mInitialMotionX = x;</span><br><span class="line">                mInitialMotionY = y;</span><br><span class="line">                <span class="keyword">if</span> (!isViewUnder(mDragView, (<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y)) &#123;</span><br><span class="line">                    mDragHelper.cancel();</span><br><span class="line">                    mIsUnableToDrag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将上面代码中if代码块全部注释掉<br>并将如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTouchEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> mIsTouchEnabled &amp;&amp; mSlideableView != <span class="keyword">null</span> &amp;&amp; mSlideState != PanelState.HIDDEN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉<code>mSlideState != PanelState.HIDDEN</code>判断条件<br>因为源码设计是当面板状态为hidden时，isTouchEnabled返回false，而setDragView中滑动面板前会先判断isTouchEnabled值，如果为false，直接return  </p><p><strong>存在概率性卡在半拉状态</strong><br>项目上线后测试反馈过一个问题，测试步骤比较风骚，手指按住不放下拉到一半左右位置快速转过一个弧度上滑并松开，概率性出现面板卡在一个点上  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDragStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (mDragHelper != <span class="keyword">null</span> &amp;&amp; mDragHelper.getViewDragState() == ViewDragHelper.STATE_IDLE) &#123;</span><br><span class="line">         mSlideOffset = computeSlideOffset(mSlideableView.getTop());</span><br><span class="line">         <span class="comment">//applyParallaxForCurrentSlideOffset();</span></span><br><span class="line">         <span class="keyword">if</span> (mSlideOffset == <span class="number">1</span>) &#123;</span><br><span class="line">             updateObscuredViewVisibility();</span><br><span class="line">             setPanelStateInternal(PanelState.EXPANDED);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSlideOffset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">             setPanelStateInternal(PanelState.HIDDEN);</span><br><span class="line">             mSlideableView.setVisibility(View.INVISIBLE);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSlideOffset == <span class="number">0</span>) &#123;</span><br><span class="line">             setPanelStateInternal(PanelState.HIDDEN);</span><br><span class="line">             mSlideableView.setVisibility(View.INVISIBLE);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             setPanelStateInternal(PanelState.ANCHORED);</span><br><span class="line">             mSlideableView.setVisibility(View.INVISIBLE);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>问题复现时，<code>mSlideOffset</code>大于0且小于1，此时会走到setPanelStateInternal(PanelState.ANCHORED);即将面板抛锚到固定点上，界面上表现为卡在一个半拉的状态，这显然不是我们的systemUI需要的，将此处更改为setPanelStateInternal(PanelState.HIDDEN);</p><p><strong>核心API</strong><br>addPanelSlideListener(面板状态的监测)其中复写两个方法:onPanelSlide(获取到偏移量)和onPanelStateChanged(获取面板状态)<br>界面层主要用到了这个方法</p><p><strong>移除无关代码</strong><br>如下修改均针对SlidingUpPanelLayout这支文件<br>1.将setDragView中将对mDragView的点击事件相关逻辑全部移除<br>2.构造函数中将setgravity相关代码移除<br>3.移除shadow所有的相关的代码<br>4.移除ANCHORED相关的代码逻辑，因为我们的systemUI并不要在下拉过程中卡在某一高度<br>5.移除drawChild以及draw(Canvas c)代码</p><p><strong>布局文件</strong><br>如下是针对我们的项目定制修改后的布局(项目名相关打了马赛克，我也不知道为啥这么做，反正就是这么做了) </p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E5%B8%83%E5%B1%80%E6%96%87%E4%BB%B6.png?raw=true" align="left" style=" width:500px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>  </p><p>id为dragView的内容代表滑动的内容，id为viewpager代表的是面板隐藏后的界面内容即不随手指滑动的内容  </p><p>注:<br>SlidingUpPanelLayout为布局根元素，请确保它有且只有两个子view，第一个是主要布局，即固定不随手指滑动的区域，第二个滑动面板布局<br>如果子VIew不为2，则会抛出异常  </p><pre><code class="java"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>{    <span class="comment">//省略部分代码</span>     <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();     <span class="keyword">if</span> (childCount != <span class="number">2</span>) {         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sliding up panel layout must have exactly 2 children!"</span>);     }    <span class="comment">//省略部分代码</span> }</code></pre><p>起初遇到这个异常，看了源码才知道有这个限制，不过可以修改源码突破这个这个限制，有源码了不起嘛？嗨呀嗨呀，十分了不起，有源码真的可以为所欲为，哈哈哈</p><hr><font color="#000000" size="2" face="楷体">住所，晚上，汗衫，电脑前，听着歌，胖橘在门外叫</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;项目需求&lt;/strong&gt;&lt;br&gt;写一个SystemUI，默认是隐藏，手指在Launcher界面顶部往下滑动时，SystemUI显示并随着手指滑动高度不断变化，直到往下铺满屏幕&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初步分析&lt;/strong&gt;&lt;br&gt;最初的想法是在原
      
    
    </summary>
    
      <category term="移动开发" scheme="http://lihaizhou.top/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>低内存引发的一点思考</title>
    <link href="http://lihaizhou.top/2018/05/13/%E4%BD%8E%E5%86%85%E5%AD%98%E5%BC%95%E5%8F%91%E7%9A%84LowMemoryKiller%E6%80%9D%E8%80%83/"/>
    <id>http://lihaizhou.top/2018/05/13/低内存引发的LowMemoryKiller思考/</id>
    <published>2018-05-13T12:37:55.000Z</published>
    <updated>2019-04-13T08:45:02.302Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题平台</strong><br><code>Android 7.1.1</code>  <code>MT6739</code></p><p><strong>问题现象</strong><br><code>需要常驻的进程经常被kill，界面操作不流畅</code></p><p><strong>日志分析</strong><br>鉴于当前的手表机器内存512M，机器运行一段时间后，界面不流畅，第一时间怀疑是此时的内存比较吃紧，LMK频繁被触发kill进程，LMK的工作本身比较费时间，会拖慢系统运行速度。查看kernel日志后，发现有很多LMK触发的信息，ok，果然如猜想一样</p><p><strong>LMK机制简介</strong><br>在系统内存不足的情况下，系统开始依据自身的一套进程回收机制来判断要kill掉哪些进程，以腾出内存来供给需要的app。<br>总的来说，进程的<code>oom_adj</code>越大，表示此进程优先级越低，越容易被杀回收；越小，表示进程优先级越高，越不容易被杀回收，kill进程是通过发送SIGKILL信息。这套杀进程回收内存的机制就叫<code>Low Memory Killer</code> ，简称<code>LMK</code>，它是基于Linux内核的<code>OOM Killer</code>机制诞生<br>如果LMK都无法释放出足够的内存空间，那么当为新的进程分配应用程序时将发生<code>Out of Memory</code>异常，这时候<code>OOM_killer</code>开始工作，<code>OOM_killer</code>会在系统内存耗尽的情况下，启用自己算法有选择性的kill 掉一些进程</p><p><strong>常见的提升应用存活率</strong><br>这种问题老生常谈，网上资料一抓一大把，其中不乏各种旁门左道，诸如一像素，互相唤醒，防杀死重启服务之类。<br>这些方法不一定通用，是否奏效依赖Android版本以及手机厂商。<br>比较常规的做法是标记为系统应用，相比于三方应用来讲，系统应用的优先级高一些，当然这个做法前提是有条件且需要。<br>另外一种常见的方式是加入<code>android:persistent=&quot;true&quot;</code>属性，这种方式只对系统应用奏效，这样做的目的是使进程持续占据 Memory不被杀死，现在的512内存手表项目中的Launcher里使用了，该种方式的使用务必谨慎，切记不可滥用<br>还有一个就是降低应用的占用内存，LMK工作时往往会先挑肥的来kill</p><p><strong>如何判断某个应用的进程的oom_adj</strong><br>两个shell命令即可<br>1.<code>ps | grep PackageName</code><br>获取到指定应用的进程ID<br>2.<code>cat /proc/</code><br>进程ID/oom_adj获取到<code>oom_adj</code>数值</p><p><strong>如何判别LMK是否太频繁呢</strong><br>这个其实没有什么标准，从过往的情况来看，看<code>kernel日志</code>中LMK触发的次数，1分钟超过20次就是非常多了</p><p><strong>LMK kill进程顺序的判别依据</strong><br>根据adj的值以及占用内存值<br>现在不少程序会做成进程组形式，以前的项目上有遇到过，一个进程被kill了，另一个好兄弟再把它唤起来，这种互相唤醒的好基友方式会导致RAM无法真正释放，释放的 RAM 马上被吃掉。</p><p><strong>如何修改系统层级的LMK阈值</strong><br>这种修改做法比较少见，之前项目有过一次调整了minfree的值<br>LMK的阈值分两个数组，一个是adj数组，描述process对应的oom_adj，另外一个是minfree数组，描述process所对应的memory的阈值<br>上层可以直接通过读写:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/sys/<span class="keyword">module</span>/lowmemorykiller/parameters/adj</span><br><span class="line">/sys/<span class="keyword">module</span>/lowmemorykiller/parameters/minfree</span><br></pre></td></tr></table></figure></p><p>来进行调整，<code>minfree</code>以KB 为单位<br>当AMS起来后，将根据屏幕分辨率以及内存大小通过调用<code>updateOomLevel</code>方法(<font color="#000000" size="2" face="楷体">Frameworks/base/services/java/com/android/server/am/ProcessList.java</font>)来调整默认的LMK的阈值</p><p><strong>分析LMK问题的常用shell命令</strong><br>如下是分析LMK问题时常用的命令，看名字比较好理解就不一一解释了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps -t &gt; ps.txt</span><br><span class="line">adb shell procrank -s &gt; procrank.txt  </span><br><span class="line">adb shell cat /proc/sys/vm/swappiness  </span><br><span class="line">adb shell cat /proc/meminfo &gt; meminfo.txt</span><br><span class="line">adb shell cat /proc/buddyinfo &gt; buddyinfo.txt</span><br><span class="line">adb shell dumpsys meminfo &gt; dumpsysmemoryinfo.txt</span><br><span class="line">adb shell cat /sys/<span class="keyword">module</span>/lowmemorykiller/parameters/adj &gt; adj.txt</span><br><span class="line">adb shell cat /sys/<span class="keyword">module</span>/lowmemorykiller/parameters/minfree &gt; minfree.txt</span><br></pre></td></tr></table></figure></p><p><strong>小结</strong><br>优先从应用自身角度触发，尽可能降低应用的占用内存，不可一上来就搞一些旁门左道，慎重调整进程的优先级！切记切记<br>像我现在遇到的这个512内存的项目，很多不需要常驻的进程也将自己的优先级设置的很高，打印出来的adj清一色都很低，几乎和systemUI持平，这点实在太不可取，这导致了LMK触发时有些该杀的进程没有kill，反而一些很重要的进程被kill<br>原则上不是用户可以感知的进程没必要将优先级拉的很高，除非是慎重考虑再三觉得十分重要的进程，可以考虑拉高优先级</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，汗衫，顶着酷似三胖的发型</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题平台&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Android 7.1.1&lt;/code&gt;  &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题现象&lt;/strong&gt;&lt;br&gt;&lt;code&gt;需要常驻的进程经常被kill，界面操作不流畅&lt;/co
      
    
    </summary>
    
      <category term="性能" scheme="http://lihaizhou.top/categories/%E6%80%A7%E8%83%BD/"/>
    
    
  </entry>
  
</feed>
