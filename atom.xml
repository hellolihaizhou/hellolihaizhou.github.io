<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李海洲的成长之路</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lihaizhou.top/"/>
  <updated>2018-05-13T13:01:03.410Z</updated>
  <id>http://lihaizhou.top/</id>
  
  <author>
    <name>steven li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>低内存引发的一点思考</title>
    <link href="http://lihaizhou.top/2018/05/13/%E4%BD%8E%E5%86%85%E5%AD%98%E5%BC%95%E5%8F%91%E7%9A%84LowMemoryKiller%E6%80%9D%E8%80%83/"/>
    <id>http://lihaizhou.top/2018/05/13/低内存引发的LowMemoryKiller思考/</id>
    <published>2018-05-13T12:37:55.000Z</published>
    <updated>2018-05-13T13:01:03.410Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题平台</strong><br><code>Android 7.1.1</code>  <code>MT6739</code></p><p><strong>问题现象</strong><br><code>需要常驻的进程经常被kill，界面操作不流畅</code></p><p><strong>日志分析</strong><br>鉴于当前的手表机器内存512M，机器运行一段时间后，界面不流畅，第一时间怀疑是此时的内存比较吃紧，LMK频繁被触发kill进程，LMK的工作本身比较费时间，会拖慢系统运行速度。查看kernel日志后，发现有很多LMK触发的信息，ok，果然如猜想一样</p><p><strong>LMK机制简介</strong><br>在系统内存不足的情况下，系统开始依据自身的一套进程回收机制来判断要kill掉哪些进程，以腾出内存来供给需要的app。<br>总的来说，进程的<code>oom_adj</code>越大，表示此进程优先级越低，越容易被杀回收；越小，表示进程优先级越高，越不容易被杀回收，kill进程是通过发送SIGKILL信息。这套杀进程回收内存的机制就叫<code>Low Memory Killer</code> ，简称<code>LMK</code>，它是基于Linux内核的<code>OOM Killer</code>机制诞生<br>如果LMK都无法释放出足够的内存空间，那么当为新的进程分配应用程序时将发生<code>Out of Memory</code>异常，这时候<code>OOM_killer</code>开始工作，<code>OOM_killer</code>会在系统内存耗尽的情况下，启用自己算法有选择性的kill 掉一些进程</p><p><strong>常见的提升应用存活率</strong><br>这种问题老生常谈，网上资料一抓一大把，其中不乏各种旁门左道，诸如一像素，互相唤醒，防杀死重启服务之类。<br>这些方法不一定通用，是否奏效依赖Android版本以及手机厂商。<br>比较常规的做法是标记为系统应用，相比于三方应用来讲，系统应用的优先级高一些，当然这个做法前提是有条件且需要。<br>另外一种常见的方式是加入<code>android:persistent=&quot;true&quot;</code>属性，这种方式只对系统应用奏效，这样做的目的是使进程持续占据 Memory不被杀死，现在的512内存手表项目中的Launcher里使用了，该种方式的使用务必谨慎，切记不可滥用<br>还有一个就是降低应用的占用内存，LMK工作时往往会挑肥的经常kill</p><p><strong>如何判断某个应用的进程的oom_adj</strong><br>两个shell命令即可<br>1.<code>ps | grep PackageName</code><br>获取到指定应用的进程ID<br>2.<code>cat /proc/</code><br>进程ID/oom_adj获取到<code>oom_adj</code>数值</p><p><strong>如何判别LMK是否太频繁呢</strong><br>这个其实没有什么标准，从过往的情况来看，看<code>kernel日志</code>中LMK触发的次数，1分钟超过20次就是非常多了</p><p><strong>LMK kill进程顺序的判别依据</strong><br>根据adj的值以及占用内存值<br>现在不少程序会做成进程组形式，以前的项目上有遇到过，一个进程被kill了，另一个好兄弟再把它唤起来，这种互相唤醒的好基友方式会导致RAM无法真正释放，释放的 RAM 马上被吃掉。</p><p><strong>如何修改系统层级的LMK阈值</strong><br>这种修改做法比较少见，之前项目有过一次调整了minfree的值<br>LMK的阈值分两个数组，一个是adj数组，描述process对应的oom_adj，另外一个是minfree数组，描述process所对应的memory的阈值<br>上层可以直接通过读写:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/sys/<span class="keyword">module</span>/lowmemorykiller/parameters/adj</span><br><span class="line">/sys/<span class="keyword">module</span>/lowmemorykiller/parameters/minfree</span><br></pre></td></tr></table></figure></p><p>来进行调整，<code>minfree</code>以KB 为单位<br>当AMS起来后，将根据屏幕分辨率以及内存大小通过调用<code>updateOomLevel</code>方法(<font color="#000000" size="2" face="楷体">Frameworks/base/services/java/com/android/server/am/ProcessList.java</font>)来调整默认的LMK的阈值</p><p><strong>分析LMK问题的常用shell命令</strong><br>如下是分析LMK问题时常用的命令，看名字比较好理解就不一一解释了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps -t &gt; ps.txt</span><br><span class="line">adb shell procrank -s &gt; procrank.txt  </span><br><span class="line">adb shell cat /proc/sys/vm/swappiness  </span><br><span class="line">adb shell cat /proc/meminfo &gt; meminfo.txt</span><br><span class="line">adb shell cat /proc/buddyinfo &gt; buddyinfo.txt</span><br><span class="line">adb shell dumpsys meminfo &gt; dumpsysmemoryinfo.txt</span><br><span class="line">adb shell cat /sys/<span class="keyword">module</span>/lowmemorykiller/parameters/adj &gt; adj.txt</span><br><span class="line">adb shell cat /sys/<span class="keyword">module</span>/lowmemorykiller/parameters/minfree &gt; minfree.txt</span><br></pre></td></tr></table></figure></p><p><strong>小结</strong><br>优先从应用自身角度触发，尽可能降低应用的占用内存，不可一上来就搞一些旁门左道，慎重调整进程的优先级！切记切记<br>像我现在遇到的这个512内存的项目，很多不需要常驻的进程也将自己的优先级设置的很高，打印出来的adj清一色都很低，几乎和systemUI持平，这点实在太不可取，这导致了LMK触发时有些该杀的进程没有kill，反而一些很重要的进程被kill<br>原则上不是用户可以感知的进程没必要将优先级拉的很高，除非是慎重考虑再三觉得十分重要的进程，可以考虑拉高优先级</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，汗衫，顶着酷似三胖的发型</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题平台&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Android 7.1.1&lt;/code&gt;  &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题现象&lt;/strong&gt;&lt;br&gt;&lt;code&gt;需要常驻的进程经常被kill，界面操作不流畅&lt;/co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>忧虑下的感悟</title>
    <link href="http://lihaizhou.top/2018/05/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0--%E9%A1%BF%E6%82%9F/"/>
    <id>http://lihaizhou.top/2018/05/12/第一篇文章--顿悟/</id>
    <published>2018-05-12T13:01:42.557Z</published>
    <updated>2018-05-11T07:43:17.842Z</updated>
    
    <content type="html"><![CDATA[<p>这是该网址写的第一篇文章，想写点东西上来，算是对过去的一些回顾以及对接下来一段时间的计划想法</p><p><strong>过去一年状态</strong><br>过去的一年，经历了一些事，比较大的事：<code>无锡置业</code>，<code>重回单身狗</code>，<code>换了工作</code></p><ul><li><p>无锡置业<br>买房对我的影响还是比较大的，开始的一段时间积蓄一夜回到解放前，不过心里也踏实了许多，算是明智的选择</p></li><li><p>重回单身狗<br>这件事对我的触动很大，比较长的一段时间都比较沮丧，觉得自己很是没用。后来有些事情慢慢想通了，也就放下了。她是个好姑娘，单纯而又善良，祝愿她能过得开心</p></li><li><p>换工作<br>当时正准备买房了，离职一方面是薪资的考虑，上家公司是那种典型的国企氛围从不加班，这在做通讯行业里很是少见。没有条条框框的规则，项目周期比较长，所以工作内容没有压力，只是氛围稍稍沉闷了点，总得来说还是很不错。</p></li></ul><p><strong>当前状态</strong><br>现在的公司是个小公司，整个氛围比较轻松，也不沉闷。工作内容的话，除了项目开始时自己写了一两个模块，后面的工作主要是维护自己写的代码。<br>总得来说工作内容比较简单，说简单倒不是因为我技术好，的确是工作内容比较简单。</p><p>现在开始逐渐意识到，现状的处境其实很危险，像是在温水煮青蛙，没有足够的挑战，时间久了，人会变得懒散，缺乏足够的驱动力去学习，一直呆在大缸里，等有一天想跳出去看看外边的世界，却发现已经没有了力气。</p><p>过去的一年过得真的是太安逸，也太懒散。想起毕业那会，也是努力的奋斗过，每周都会列出学习计划，为什么后来就没有坚持下来了呢。是膨胀了？ 好像是的，身体的发福让我日益膨胀，迷失自我。</p><p><strong>后续改善计划</strong><br>接下来的时间会通过该网址持续更新技术文章，多思考多总结。具体的行动计划大纲如下</p><ol><li><p>每天学习时间满4小时</p></li><li><p>每周写两篇技术文章</p></li><li><p>每个月写一个月度总结</p></li></ol><p>鉴于过往的经历，很多时候计划是列出了，执行的时候却不能至始至终的执行，可恶的惰性啊。</p><p>后面每个月的月度总结会说明本月的执行情况，如果月度总结也没写的话，那我多半是废了，无可救药了。</p><p><strong>以此文为证！You can do it ！come on！ steven！</strong></p><p><strong>厚积而薄发！</strong></p><hr><font color="#000000" size="2" face="楷体">写于2018.5.4号11号线地铁上, 站着, 打完本文</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是该网址写的第一篇文章，想写点东西上来，算是对过去的一些回顾以及对接下来一段时间的计划想法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过去一年状态&lt;/strong&gt;&lt;br&gt;过去的一年，经历了一些事，比较大的事：&lt;code&gt;无锡置业&lt;/code&gt;，&lt;code&gt;重回单身狗&lt;/code&gt;，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个定屏重启的问题分析</title>
    <link href="http://lihaizhou.top/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://lihaizhou.top/2018/05/11/一个定屏重启的问题分析/</id>
    <published>2018-05-11T09:26:17.000Z</published>
    <updated>2018-05-11T10:02:19.687Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题平台</strong><br><code>Android 7.1.1</code>    <code>MT6739</code></p><p><strong>问题现象</strong><br><code>界面定屏并重启</code></p><p><strong>初步分析</strong><br>拿到完整的MTK日志，该问题是小米内测发现，了解到当时测试人员的操作就是随便划着划着就卡住了然后重启了，ok，还是乖乖看日志吧<br>日志目录如下：<br><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E6%97%A5%E5%BF%97%E7%9B%AE%E5%BD%95.png" align="left" style=" width:300px;height:50 px"><br><br><br><br>看到了aee_exp_backup这个文件夹，一切尽在意料之中，进去看看<br><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/db%E6%96%87%E4%BB%B6.png" align="left" style=" width:300px;height:23 px"><br><br></p><p align="left">是一个JE的问题导致的重启，猜测是systemServer挂了</p>  <p><strong>Step1：分析日志</strong><br>拿出看家小工具GAT，对于db文件的分析离不开GAT，用GAT解析下来究竟发生了what让我们的小机器重启了呢，解析后文件目录如下</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/db%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E7%9B%AE%E5%BD%95.png" align="left" style=" width:900px;height:500 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>(这里将产品名称马赛克一下，我也不知道为什么这么做，反正就是这么做了，哈哈哈（￣︶￣）↗)</p><p>这里可以看到果然是systemServer进程重启了，发生问题点在systemServer进程中，接着看原因，是个数组越界异常，下标为1，数组长度为2(见上图红色框)，唉？没越界啊，为什么会报越界呢？</p><p>分析具体的堆栈代码之前，先看下日志判断下死机发生时用户当时具体做了些啥  </p><p>首先看下main日志，找到IndexOutOfBoundsException发生时间点<code>09:43:33.818111</code><br>测试人员使用的是user版本，user版本的kernel日志不会打出每行时间戳，userdebug以及eng版本的kernel日志会有具体的时间戳，所以分析user版本的kernel日志会稍稍麻烦一点，通过搜索关键字”UTC”来查看时间戳，这份日志中UTC时间戳每隔二十秒打印<br>异常发生时间点09:43:33.818111，所以是在如下两行之间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Line <span class="number">176236</span>: &lt;7&gt;[ 1762.546722]  (0)[249:wdtk-0][thread:249][RT:1762546695292] 2018-04-26 01:43:27.105173 UTC;android time 2018-04-26 09:43:27.105173</span><br><span class="line">Line 179752: &lt;7&gt;[ 1782.556698]  (0)[249:wdtk-0][thread:249][RT:1782556690801] 2018-04-26 01:43:47.115173 UTC;android time 2018-04-26 09:43:47.115173</span><br></pre></td></tr></table></figure></p><p><code>9.43.27</code>这行往下数6s左右，大概在<code>178800</code>行附近，ok，去这个行数附近看看<br>在<code>178891</code>行看到了如下信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">7</span>&gt;[ <span class="number">1777.097776</span>] -(<span class="number">0</span>)[<span class="number">1085</span>:android.ui][signal][<span class="number">1085</span>:android.ui]send death sig <span class="number">9</span> to[<span class="number">1068</span>:system_server:R]</span><br></pre></td></tr></table></figure></p><p>sig 9代表SIGNAL_KILL，这里杀掉了system_server进程，在此上面有大量连续的手指触摸日志信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.923619</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: finger dwon [<span class="number">00</span>] x = <span class="number">302</span>, y = <span class="number">148</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.923695</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler before_event  foubin1 irq_flag = <span class="number">8490</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.923712</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler after_event  foubin1 irq_flag = <span class="number">8491</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.925815</span>]  (<span class="number">1</span>)[<span class="number">4051</span>:kworker/u8:<span class="number">0</span>][DISP][xun] _ovl_fence_release_callback </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.933972</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler before_disable_irq foubin1 irq_flag = <span class="number">8491</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.934001</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler after_disable_irq  foubin1 irq_flag = <span class="number">8492</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.934944</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: touch_info.status=<span class="number">0x904</span></span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.935112</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: finger dwon [<span class="number">00</span>] x = <span class="number">303</span>, y = <span class="number">143</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.935157</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler before_event  foubin1 irq_flag = <span class="number">8492</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.935169</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler after_event  foubin1 irq_flag = <span class="number">8493</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.938970</span>]  (<span class="number">0</span>)[<span class="number">412</span>:disp_queue_P0][DISP]primary_display_trigger_nolock+++blocking=<span class="number">0</span> ,dst_mode=<span class="number">0</span>,dispmode = <span class="number">0</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.939000</span>]  (<span class="number">0</span>)[<span class="number">412</span>:disp_queue_P0][DISP]primary_display_trigger_nolock pgc-&gt;state = <span class="number">240</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.939014</span>]  (<span class="number">0</span>)[<span class="number">412</span>:disp_queue_P0][DISP]primary_display_trigger_nolock pgc-&gt;session_mode = <span class="number">1</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.942542</span>]  (<span class="number">0</span>)[<span class="number">4051</span>:kworker/u8:<span class="number">0</span>][DISP][xun] _ovl_fence_release_callback </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.946983</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler before_disable_irq foubin1 irq_flag = <span class="number">8493</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.947013</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler after_disable_irq  foubin1 irq_flag = <span class="number">8494</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.947971</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: touch_info.status=<span class="number">0x9</span></span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.948138</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: finger [<span class="number">00</span>] up <span class="number">11111</span></span><br></pre></td></tr></table></figure></p><p>可见当时测试人员与屏幕一直在互动，符合测试人员所说的当时在滑动屏幕</p><p><strong>Step2：跟踪源码流程</strong><br>看具体的堆栈信息</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E5%85%B7%E4%BD%93%E5%A0%86%E6%A0%88.png" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br></p><p>emmm…没有看到具体的应用堆栈信息，都是framework里的堆栈，其实看到这里心里大概有数了，应该不是应用的问题，而是系统层面的问题</p><p>好的，撸起袖子打开源码，开始看具体的代码</p><font color="#000000" size="2" face="楷体">libcore/ojluni/src/main/java/java/util/ArrayList.java</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里抛出了越界异常，接着往下看</p><font color="#000000" size="2" face="楷体">/frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find the task whose outside touch area (for resizing) (x, y) falls within.</span></span><br><span class="line"><span class="comment"> * Returns null if the touch doesn't fall into a resizing area.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Task <span class="title">findTaskForControlPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> delta = mService.dipToPixel(RESIZE_HANDLE_WIDTH_IN_DP, mDisplayMetrics);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> stackNdx = mStacks.size() - <span class="number">1</span>; stackNdx &gt;= <span class="number">0</span>; --stackNdx) &#123;</span><br><span class="line">        TaskStack stack = mStacks.get(stackNdx);</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里出现了异常，理论上不会出现越界的问题，不过如果是多线程访问的情况，鉴于这里并没有同步机制，<br>mStacks又是公用的，很多地方会对其增删修改，这样的话就难以保证不会出现异常了</p><p><strong>问题小结：</strong><br>这个问题看起来是谷歌的bug，避免这种情况可以选择加同步机制。同步机制难免会牺牲性能，不过也增强了代码的稳定性<br>考虑到这个问题至今只是出现了一次，后续没有再出现过，选择忽略不做修改</p><font color="#000000" size="2" face="楷体">本文写于公司，电脑前，慵懒的午后</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题平台&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Android 7.1.1&lt;/code&gt;    &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题现象&lt;/strong&gt;&lt;br&gt;&lt;code&gt;界面定屏并重启&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;s
      
    
    </summary>
    
    
  </entry>
  
</feed>
