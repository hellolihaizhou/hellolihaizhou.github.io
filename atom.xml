<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李海洲的沉淀之路</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lihaizhou.top/"/>
  <updated>2020-06-21T04:45:08.787Z</updated>
  <id>http://lihaizhou.top/</id>
  
  <author>
    <name>Steven Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内存屏障</title>
    <link href="http://lihaizhou.top/2020/06/20/Memory-Barrier%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://lihaizhou.top/2020/06/20/Memory-Barrier读书笔记/</id>
    <published>2020-06-20T07:56:03.000Z</published>
    <updated>2020-06-21T04:45:08.787Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章开始之前需要了解一些背景知识</p><h1 id="Cache-Memory"><a href="#Cache-Memory" class="headerlink" title="Cache Memory"></a>Cache Memory</h1><p>我们都知道程序是运行在 RAM之中，RAM 就是我们常说的DDR（例如 DDR3、DDR4等），我们称之为main memory（主存）当我们需要运行一个进程的时候，首先会从Flash设备（例如，eMMC、UFS等）中将可执行程序load到main memory中，然后开始执行。</p><p>在CPU内部存在一堆的通用寄存器（register），如果CPU需要将一个变量（假设地址是A）加1，一般分为以下3个步骤</p><ol><li>CPU 从主存中读取地址A的数据到内部通用寄存器 x0（ARM64架构的通用寄存器之一）</li><li>通用寄存器 x0 加1</li><li>CPU 将通用寄存器 x0 的值写入主存</li></ol><p>但是存在一个问题，CPU通用寄存器的速度和主存之间存在着太大的差异<br>从这个网址<a href="https://gist.github.com/jboner/2841832" target="_blank" rel="noopener">https://gist.github.com/jboner/2841832</a> 摘了一段数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Latency Comparison <span class="title">Numbers</span> <span class="params">(~<span class="number">2012</span>)</span></span></span><br><span class="line"><span class="function">----------------------------------</span></span><br><span class="line"><span class="function">L1 cache reference                           0.5 ns</span></span><br><span class="line"><span class="function">Branch mispredict                            5   ns</span></span><br><span class="line"><span class="function">L2 cache reference                           7   ns                      14x L1 cache</span></span><br><span class="line"><span class="function">Mutex lock/unlock                           25   ns</span></span><br><span class="line"><span class="function">Main memory reference                      100   ns                      20x L2 cache, 200x L1 cache</span></span><br><span class="line"><span class="function">Compress 1K bytes with Zippy             3,000   ns        3 us</span></span><br><span class="line"><span class="function">Send 1K bytes over 1 Gbps network       10,000   ns       10 us</span></span><br><span class="line"><span class="function">Read 4K randomly from SSD*             150,000   ns      150 us          ~1GB/sec SSD</span></span><br><span class="line"><span class="function">Read 1 MB sequentially from memory     250,000   ns      250 us</span></span><br><span class="line"><span class="function">Round trip within same datacenter      500,000   ns      500 us</span></span><br><span class="line"><span class="function">Read 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory</span></span><br><span class="line"><span class="function">Disk seek                           10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip</span></span><br><span class="line"><span class="function">Read 1 MB sequentially from disk    20,000,000   ns   20,000 us   20 ms  80x memory, 20X SSD</span></span><br><span class="line"><span class="function">Send packet CA-&gt;Netherlands-&gt;CA    150,000,000   ns  150,000 us  150 ms</span></span><br></pre></td></tr></table></figure></p><p>这里没有列出寄存器速度，看到L1 cache是0.5ns，可以肯定的是寄存器一定是低于1ns，Main memory是100ns，这里的数据仅供参考<br>所以上面的从主存读取数值三个步骤中的第一和第三步实际上速度很慢相对于寄存器而言</p><p>当CPU试图从主存中load/store 操作时，由于主存的速度限制，CPU不得不等待这漫长的65ns时间。如果我们可以提升主存的速度，那么系统将会获得很大的性能提升。如今的DDR存储设备，动不动就是几个GB，容量很大。如果我们采用更快材料制作更快速度的主存，并且拥有几乎差不多的容量。其成本将会大幅度上升。<br>我们试图提升主存的速度和容量，又期望其成本很低，这就有点难为人了。因此，我们有一种折中的方法，那就是制作一块速度极快但是容量极小的存储设备。那么其成本也不会太高。这块存储设备我们称之为cache memory。在硬件上，我们将cache放置在CPU和主存之间，作为主存数据的缓存。当CPU试图从主存中load/store数据的时候， CPU会首先从cache中查找对应地址的数据是否缓存在cache 中。如果其数据缓存在cache中，直接从cache中拿到数据并返回给CPU。<br><strong>CPU和主存之间直接数据传输的方式转变成CPU和cache之间直接数据传输。cache负责和主存之间数据传输。</strong></p><p>当存在cache的时候，以上程序如何运行的例子的流程将会变成如下：<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/memory-barrier01.png" alt=""></p><p>cahe的速度在一定程度上同样影响着系统的性能。一般情况cache的速度可以达到1ns，几乎可以和CPU寄存器速度媲美。但是，这就满足人们对性能的追求了吗？并没有。当cache中没有缓存我们想要的数据的时候，依然需要漫长的等待从主存中load数据。为了进一步提升性能，引入多级cache。前面提到的cache，称之为L1 cache（第一级cache）。<br>我们在L1 cache 后面连接L2 cache，在L2 cache 和主存之间连接L3 cache。等级越高，速度越慢，容量越大。但是速度相比较主存而言，依然很快</p><p>多级cache不是本文重点，详细可参考如下两篇文章，写的比较详细<br><a href="http://www.wowotech.net/memory_management/458.html" target="_blank" rel="noopener">浅谈Cache Memory</a><br><a href="https://zhuanlan.zhihu.com/cpu-cache" target="_blank" rel="noopener">高速缓存与一致性</a></p><h2 id="Cacheline"><a href="#Cacheline" class="headerlink" title="Cacheline"></a>Cacheline</h2><p>本文后续会涉及到一个名词Cacheline，cache的大小称之为cahe size，代表cache可以缓存最大数据的大小。<br>我们将cache平均分成相等的很多块，每一个块大小称之为cache line，其大小是cache line size。例如一个64 Bytes大小的cache<br>如果我们将64 Bytes平均分成64块，那么cache line就是1字节，总共64行cache line。如果我们将64 Bytes平均分成8块，那么cache line就是8字节，总共8行cache line<br>有一点需要注意，cache line是cache和主存之间数据传输的最小单位。什么意思呢？当CPU试图load一个字节数据的时候，如果cache缺失，那么cache控制器会从主存中一次性的load cache line大小的数据到cache中。</p><p>例如，cache line大小是8字节。CPU即使读取一个byte，在cache缺失后，cache会从主存中load 8字节填充整个cache line，至于原因可以参见这篇文章:<br><a href="http://www.wowotech.net/memory_management/458.html" target="_blank" rel="noopener">浅谈Cache Memory</a></p><p>有了前面的基础知识的认知，不难理解下面这个极简的抽象CPU架构图<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/memory-barrier02.gif" alt=""></p><h1 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h1><p>考虑到多线程读写环境中，不免会有个疑问，如果一个数据是多个cpu都共享，其中一个修改了是不是要想办法使得其他cpu也能更新<br>一个cpu去读取一个数值时，怎么确定是最新的呢？说到底就是要保证在使用cache后如何确保各 CPU 看到的数据是一致的<br>这个就引出另外一个名词“cache-coherence protocol”即缓存一致性协议<br>其中，MESI protocol 是一个基本版，从 MESI protocol 可以了解 CPU 之间如何维持看到一致的资料，可以参见MESI的维基定义:   <a href="https://zh.wikipedia.org/wiki/MESI%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">MESI协议</a></p><p>这里摘取英文文档中的对于MESI拆解开来的四种状态的解释<br><code>A line in the “modified” state has been subject to a recent memory store from the corresponding CPU, and the corresponding memory is guaranteed not to appear in any other CPU’s cache. Cache lines in the “modified”state can thus be said to be “owned” by the CPU. Because this cache holds the only up-to-date copy of the data, thiscache is ultimately responsible for either writing it back to memory or handing it off to some other cache, and must do so before reusing this line to hold other data.</code><br>处于modified状态的cacheline说明近期有过来自对应cpu的写操作，同时也说明该该数据不会存在其他cpu对应的cache中。因此，处于modified状态的cacheline也可以说是被该CPU独占。而又因为只有该CPU的cache保存了最新的数据（最终的memory中都没有更新），所以，该cache需要对该数据负责到底。例如根据请求，该cache将数据及其控制权传递到其他cache中，或者cache需要负责将数据写回到memory中，而这些操作都需要在reuse该cache line之前完成。<br><code>The “exclusive” state is very similar to the “modified”state, the single exception being that the cache line has not yet been modified by the corresponding CPU, which in turn means that the copy of the cache line’s data that resides in memory is up-to-date. However, since the CPU can store to this line at any time, without consulting other CPUs, a line in the “exclusive” state can still be said to be owned by the corresponding CPU. That said, because the corresponding value in memory is up to date, this cache can discard this data without writing it back to memory or handing it off to some other CPU.</code><br>exclusive状态和modified状态非常类似，唯一的区别是对应CPU还没有修改cacheline中的数据，也正因为还没有修改数据，因此memory中对应的data也是最新的。在exclusive状态下，cpu也可以不通知其他CPU cache而直接对cacheline进行操作，因此，exclusive状态也可以被认为是被该CPU独占。由于memory中的数据和cacheline中的数据都是最新的，因此，cpu不需对exclusive状态的cacheline执行写回的操作或者将数据以及归属权转交其他cpu cache，而直接reuse该cacheline（将cacheine中的数据丢弃，用作他用）<br><code>A line in the “shared” state might be replicated in at least one other CPU’s cache, so that this CPU is not permitted to store to the line without first consulting with other CPUs. As with the “exclusive” state, because thecorresponding value in memory is up to date, this cache can discard this data without writing it back to memory or handing it off to some other CPU.</code><br>处于share状态的cacheline，其数据可能在一个或者多个CPU cache中，因此，处于这种状态的cache line，CPU不能直接修改cacheline的数据，而是需要首先和其他CPU cache进行沟通。和exclusive状态类似，处于share状态的cacheline对应的memory中的数据也是最新的，因此，cpu也可以直接丢弃cacheline中的数据而不必将其转交给其他CPU cache或者写回到memory中。<br><code>A line in the “invalid” state is empty, in other words, it holds no data. When new data enters the cache, it is placed into a cache line that was in the “invalid” state if possible. This approach is preferred because replacing a line in any other state could result in an expensive cache miss should the replaced line be referenced in the future.</code><br>处于invalid状态的cacheline是空的，没有数据。当新的数据要进入cache的时候，优选状态是invalid的cacheline，之所以如此是因为如果选中其他状态的cacheline，则说明需要替换cacheline数据，而未来如果再次访问这个被替换掉的cacheline数据的时候将遇到开销非常大的cache miss  </p><font color="red"> 个人理解:<br>1. 对于modified状态的cacheline，别的cpu如果需要其中的数据，必须要写回到memory或者转移<br>2. exclusive可以理解为是modified的轻量版，exclusive状态的cacheline数据此时还没有被cpu修改，也就是说它的数据和memory中是一致的，当别的cpu需要状态是exclusive的cacheline数据时，可以直接提供数据不需要写回到memory<br>3. share状态的cacheline不能直接被修改，如果一个cpu需要对这个cacheline进行修改了，需要先通知其他cpu让他们将各自对应的cacheline置为invalid，然后再切换cacheline的状态到exclusive，再然后就是M状态<br>4. invalid状态的cacheline之前可能是有数据的，比如之前是shared状态，后来其他cpu要修改这个cacheline了，就发通知过来了要求置为invalid的，不然读取出来的就是错误的<br><br> </font><p>有一个MESI动画的网址，可以模拟各个cacheline的状态切换，比起文字描述来讲更好理解，可以不断的模拟测试，对理解MESI很有帮助<br><a href="https://www.scss.tcd.ie/Jeremy.Jones/VivioJS/caches/MESIHelp.htm" target="_blank" rel="noopener">VivioJS - Interactive Reversible E-Learning Animations for the WWW</a></p><p>比如当前状态<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/memory-barrier03.png" alt=""></p><font color="red"><br>个人理解添加<br>此时CPU0上a1数据对应的cacheline此时的状态是M状态，可以看到此时的数值是11，比memory要新，其他两个cpu1，cpu2上的a1对应的cacheline是invalid状态。如果此时cpu2上对a1进行写值加1，会是什么样子的呢？<br>根据上面的理论知识，此时应该会通过总线通知cpu0让其写入到memory中，然后cpu2才能读取到最新的值此时再进行修改此时数值应该是12并将状态置为E并且写回memory，此时CPU0上的a1对应cacheline状态理论上应该是invalid。<br></font><br>实际的cpu2对a1加1后效果图如下：<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/memory-barrier04.png" alt=""><br><font color="red"> 个人理解添加<br>此时如果对cpu2的cacheline进行写加1，cacheline状态会切换到M状态，如果一直写，数值一直增加一直是M状态，其他cpu无变化。因为此时M是最新的，只有其他cpu比如此时cpu1需要读取a1的值，这个时候cpu2会将这个值写回到memory并且此时cpu1和cpu2上a1对应的cacheline状态都是S。<br>如果这个时候，对cpu2的a1进行写操作呢？其状态会切换到E，其他cpu对应的a1-cacheline都切到invalid<br>介绍完MESI后，我们知道有了MESI protocol，任何一个CPU 要写入资料前，都要先确保其它CPU 已invalid 同一位置的cache 后(希望写入的CPU 广播invalidate，其它CPU 回invalidate ack)， 才能写资料到自己的cache，并在稍后补写回memory。<br></font><br>这个设计确保资料的一致性，不用担心同一时间同一个位置的资料会有不同的值，但是代价是写入 cache 的速度会有点慢，让 CPU 闲置，下图中的stall就是cpu等待的时长<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/memory-barrier05.png" alt=""><br><br><font color="red">  个人理解添加<br>想象一下这个场景：<br><em> CPU 0 打算写入值到位置 X，CPU 1 的 cache 有 X 的值。因为缓存一致性的缘故，这个时候CPU0给CPU1发送一个invalid的广播告知其需要将其对应数值置于无效</em> 这个时候呢cpu0就开始傻乎乎的等 CPU 1 回 invalidate ack，但是此时CPU 1 的 cache 可能太忙而拖慢了回覆时间 (比方同时从 cache 大量的读写资料，或是短时间收到大量 invalidate ack)。<br>这样就导致了CPU0白白耗费时间在等待上，这对于宝贵的cpu资源是一种很大的浪费，其实没必要等待这么长的时间，毕竟物理CPU 1中的cacheline保存有什么样子的数据，其实都没有意义，这个值都会被CPU 0新写入的值覆盖的，所以能不能不等呢？这也就引出了另外一个名词StoreBuffer，还有另外一个名词对应刷新的Invalidate Queue<br></font> <h2 id="Store-Buffer-amp-Invalidate-Queue"><a href="#Store-Buffer-amp-Invalidate-Queue" class="headerlink" title="Store Buffer &amp; Invalidate Queue"></a>Store Buffer &amp; Invalidate Queue</h2><p>在CPU和cache之间增加store buffer这个HW block</p><font color="red">  个人理解添加<br>1. CPU 0 不等 invalidate ack：先写入 store buffer，然后继续作事。之后收到 invalidate ack 再更新 cache 的状态。因为最新的资料可能存在 store buffer，CPU 读资料的顺序变成 store buffer → cache → memory。<br>2. CPU 1 立即回 invalidate ack：收到 invalidate 时，记录到 invalidate queue 里，先回 invalidate ack，稍后再处理 invalidate。<br>3. 为啥有了store buffer后还会冒出来一个invalidate queue，因为 store buffer 很小，store buffer 满的时候，CPU 0 还是得等 invalidate ack，所以加上 invalidate queue，双管齐下减少 CPU 0 等待时间<br>这里还有一个细节后面会提到，如果有数据加了写内存屏障的话，加入storebuffer，其后面的写操作不管有没有写屏障都要加到storebuffer中，这就造成了storebuffer更容易满了，一旦满了又要开始等ack了，这就引入了<br>invalidate queue，后面还会继续讲它的作用<br>其实这里出现了一个重排序的“现象”，就是一旦某一条写指令放到storebuffer中了继续后面的指令操作，这就造成了下一条指令跑到这条指令前面执行的”假象”，这种重排序就是为了充分利用cpu的性能避免白白的浪费等待<br>CPU 为了提升效率而出现的这种”改指令”执行的顺序，只要最后結果和 single thread 预期的結果一样即可。这句话可以细品下，所以多线程的情况下需要我们研发人员自己控制<br></font>  <p>有了StoreBuffer以及Invalidate Queue之后的cpu cache架构如下<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/memory-barrier06.png" alt=""></p><p>下面摘自perfbook文档关于StoreBuffer以及Invalidate Queue的解释</p><p><code>These store buffers are local to a given CPU or, on systems with hardware multithreading, local to a given core. Either way, a given CPU is permitted to access only the store buffer assigned to it. For example, in Figure C.5, CPU 0 cannot access CPU 1’s store buffer and vice versa. This restriction simplifies the hardware by separating concerns: The store buffer improves performance for consecutive writes, while the responsibility for communicating among CPUs (or cores, as the case may be) is fully shouldered by the cache-coherence protocol. However, even given this restriction, there are complications that must be addressed, which are covered in the next two sections.</code></p><p>这些store buffer对于cpu而言是local的，如果系统是硬件多线程， 那么每一个cpu core拥有自己私有的stroe buffer，一个cpu只能访问自己私有的那个store buffer。在上图中，cpu 0不能访问cpu1的store buffer，反之亦然。之所以做这样的限制是为了模块划分（各个cpu core模块关心自己的事情，让cache系统维护自己的操作），让硬件设计变得简单一些。store buffer增加了CPU连续写的性能，同时把各个CPU之间的通信的任务交给维护cache一致性的协议。即便给每个CPU分配私有的store buffer，仍然引入了一些复杂性，我们会在下面两个小节中描述。</p><p><code>Unfortunately, each store buffer must be relatively small, which means that a CPU executing a modest sequence of stores can fill its store buffer (for example, if all of them result in cache misses). At that point, the CPU must once again wait for invalidations to complete in order to drain its store buffer before it can continue executing. This same situation can arise immediately after a memory barrier, when all subsequent store instructions must wait for invalidations to complete, regardless of whether or not these stores result in cache misses.</code></p><p>不幸的是：每个cpu的store buffer不能实现的太大，其entry的数目不会太多。当cpu以中等的频率执行store操作的时候（假设所有的store操作导致了cache miss），store buffer会很快的被填满。在这种状况下，CPU只能又进入等待状态，直到cache line完成invalidation和ack的交互之后，可以将store buffer的entry写入cacheline，从而为新的store让出空间之后，CPU才可以继续执行。这种状况也可能发生在调用了memory barrier指令之后，因为一旦store buffer中的某个entry被标记了，那么随后的store都必须等待invalidation完成，因此不管是否cache miss，这些store都必须进入store buffer。</p><p><code>This situation can be improved by making invalidate acknowledge messages arrive more quickly. One way of accomplishing this is to use per-CPU queues of invalidate messages, or “invalidate queues”.</code></p><p>引入invalidate queues可以缓解这个状况。store buffer之所以很容易被填充满，主要是其他CPU回应invalidate acknowledge比较慢，如果能够加快这个过程，让store buffer尽快进入cacheline，那么也就不会那么容易填满了。</p><p><code>Invalidate QueuesOne reason that invalidate acknowledge messages can take so long is that they must ensure that the correspondingcache line is actually invalidated, and this invalidation can be delayed if the cache is busy, for example, if the CPU is intensively loading and storing data, all of which resides in the cache. In addition, if a large number of invalidate messages arrive in a short time period, a given CPU might fall behind in processing them, thus possibly stalling all the other CPUs.</code></p><p>invalidate acknowledge不能尽快回复的主要原因是invalidate cacheline的操作没有那么快完成，特别是cache比较繁忙的时候，这时，CPU往往进行密集的loading和storing的操作，而来自其他CPU的，对本CPU local cacheline的操作需要和本CPU的密集的cache操作进行竞争，只要完成了invalidate操作之后，本CPU才会发生invalidate acknowledge。此外，如果短时间内收到大量的invalidate消息，CPU有可能跟不上处理，从而导致其他CPU不断的等待。</p><p><code>However, the CPU need not actually invalidate the cache line before sending the acknowledgement. It could instead queue the invalidate message with the understanding that the message will be processed before the CPU sends any further messages regarding that cache line.</code></p><p>然而，CPU其实不需要完成invalidate操作就可以回送acknowledgement消息，这样，就不会阻止发生invalidate请求的那个CPU进入无聊的等待状态。CPU可以buffer这些invalidate message（放入Invalidate Queues），然后直接回应acknowledgement，表示自己已经收到请求，随后会慢慢处理。当然，再慢也要有一个度，例如对a变量cacheline的invalidate处理必须在该CPU发送任何关于a变量对应cacheline的操作到bus之前完成。</p><p>有了Invalidate Queue的CPU，在收到invalidate消息的时候首先把它放入Invalidate Queue，同时立刻回送acknowledge 消息，无需等到该cacheline被真正invalidate之后再回应。当然，如果本CPU想要针对某个cacheline向总线发送invalidate消息的时候，那么CPU必须首先去Invalidate Queue中看看是否有相关的cacheline，如果有，那么不能立刻发送，需要等到Invalidate Queue中的cacheline被处理完之后再发送。</p><p><code>Placing an entry into the invalidate queue is essentially a promise by the CPU to process that entry before transmitting any MESI protocol messages regarding that cache line. As long as the corresponding data structures are not highly contended, the CPU will rarely be inconvenienced by such a promise.</code></p><p>一旦将一个invalidate（例如针对变量a的cacheline）消息放入CPU的Invalidate Queue，实际上该CPU就等于作出这样的承诺：在处理完该invalidate消息之前，不会发送任何相关（即针对变量a的cacheline）的MESI协议消息。只要是对该cacheline的竞争不是那么剧烈，CPU还是对这样的承诺很有信心的</p><p>因为多了 store buffer 和 invalidate queue，cache 之间的资料就没有完全一致了</p><h2 id="一个小案例"><a href="#一个小案例" class="headerlink" title="一个小案例"></a>一个小案例</h2><p>有了上面一连串理论知识的铺垫，下面看一个小例子，这个例子是老演员了，其实也是摘自perfbook中的，在查阅资料过程中发现很多博客都是用的这个图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = b = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (b == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">  <span class="keyword">assert</span>(a == <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑 CPU 0 执行 foo()， CPU 1 执行 bar()，也就是我们常说的多线程环境，假设 cache 的状态如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">        a       b</span><br><span class="line">------------------------</span><br><span class="line">CPU <span class="number">0</span>:  Shared  Modified</span><br><span class="line">CPU <span class="number">1</span>:  Shared  Invalid</span><br></pre></td></tr></table></figure></p><p>其实可以理解为假设 a,b 初始值为 0 ，a 被 CPU0 和 CPU1 共同持有，b 被 CPU0 独占</p><p>试想，即便在多线程环境下，foo 和 bar 如若严格按照理想的顺序执行，是无论如何都不会出现 assert failed 的情况的。但往往事与愿违，这种看似很诡异的且有一定几率发生的 assert failed ，结合上面所说的 Store Buffer 就一点都不难理解了<br>我们来还原 assert failed 的整个过程</p><ol><li>CPU0 处理 a=1 之前发送 Invalidate 消息给 CPU1 ，并将其放入 Store Buffer ，尚未及时刷入缓存，所以这时候 cache 里a的值仍是 0；</li><li>CPU 0 转而处理 b=1 ，注意这里我们上面假设的是此时b 的状态已是 Modified，所以 b=1 直接被刷入缓存；</li><li>CPU 1 发出 Read 消息读取 b 的值，CPU 1 从 CPU 0 的 cache 读到 b = 1 ，跳出 while 语句；</li><li>CPU 1 发出 Read 消息读取 a 的值，发现 a 却为旧值 0，assert failed，然后收到 CPU 0 送来 “invalidate a” 的讯息，但已太迟了</li></ol><p>上面这个还原过程摘自一个台湾人写的博客&lt;從硬體觀點了解 memory barrier 的實作和效果&gt;<br>个人感觉这个描述过程不完全准确，既然已经有了Invalidate Queue，这个时候cpu1理论上是立刻给cpu0发ack的，可能由于当前要回复的ack很多，导致发送给cpu0的ack并没有达到”立刻”的效果<br>所以出现上面描述的过程也是有可能的，但是其实还有一种可能，就是读取a的时候最新值Invalidate Queue中，详细在下面的个人理解环节中  </p><font color="red"><br>个人理解如下<br>1. 大致流程是CPU0这个时候想要对a进行写值，发现a对应的cacheline对应的状态是S，也就是这里的cpu1上也有a的值，所以需要通知cpu1，通过总线发个消息告知cpu1进行invalid，因为有storebuffer这玩意所以直接放到storebuffer，又因为有invalidate queue的存在<br>2. 所以CPU1立刻回复了“已更新”的ack回去了，其实并没有实际更新，只是先放在了invalidate queue中待更改标记为invalid，CPU0收到这个ack后将数据回写到内存中<br>3. 此时CPU0开始了执行下一条对b写值，因为b是M状态也是说是cpu0独占的，所以直接写到缓存就完事了<br>4. 再来到cpu1这边看看，此时cpu1读取b的值，因为cpu1上没有对应的cacheline，cpu0上b对应的cacheline是M状态，所以此时cpu0会将b的值写回到memory,并且这个时候cpu1读取到的值是最新的和memory一样，此时cpu1和cpu0上b对于的cacheline状态变为S<br>5. 这个时候再看assert(a == 1);  此时CPU1读取到的数值a仍然是S状态，所以直接读取了，读取出来自然是0，因为此时并没有去invalidate queue看看有没有值，所以看到的值不是最新的，出现assert fail<br><br>如何解决这个问题呢？可以在foo函数a=1下面加一个写内存屏障，这样的话当a=1的值放到storebuffer中后，发现后面有一个写内存屏障指令，这个时候就会把后面的写指令都会顺序放到storebuffer中。另外在bar函数第二行读取a的时候需要看下invalidqueue中有没有值，有的话一定要将对应值得cacheline标记为无效，然后去读取最新值，这就引入了读内存屏障，强制标记队列中所有的值对应cacheline为无效<br></font> <p>上面的这个程序在实际开发中也是有可能会遇到的，于是 CPU提供了write memory barrier 以及 read memory barrier，让软件有机会避免这个问题</p><h2 id="write-memory-barrier"><a href="#write-memory-barrier" class="headerlink" title="write memory barrier"></a>write memory barrier</h2><p>比如在上面的 foo 方法中，a 的赋值和 b 的赋值之间加上这个write memory barrier<br>会使得 CPU 在后续变量变更写入之前，把 Store Buffer 的变更写入 flush 到缓存；CPU 要么就等待 flush 完成后写入，要么就把后续的写入变更放到 Store Buffer 中，直到 Store Buffer 数据顺序刷到缓存。<br><strong>write memory barrier 确保之前在 store buffer 里的资料会先更新到 cache，然后才能写入 barrier 之后的资料到 cache。</strong></p><p>假设我们在 foo() 的 a=1 和 b=1 之间插一个 write memory barrier，过程变为</p><ol><li>write memory barrier 先设 store buffer 里的资料为 “marked” (即 a=1)</li><li>写入 b 的时候，因为发现 store buffer 里有 marked 的栏位，所以即使 b 已处于 Modified，仍需写入 b=1 到 store buffer，不过状态是 “unmarked”</li><li>待收到 a 的 invalidate ack 后，cache 中 a 的状态改为 Modified，然后先写入有 marked 栏位的值到 cache，再写入 unmarked 栏位的值到 cache。</li></ol><p>这样其它 CPU 就会依序看到 a、b 更新的值了</p><h2 id="read-memory-barrier"><a href="#read-memory-barrier" class="headerlink" title="read memory barrier"></a>read memory barrier</h2><p>还是以上面的例子说明，假设 CPU 1 的 cache 里 a 处于 Shared。 CPU 0 已更新 a、b 到它的 cache，CPU 1 的 invalidate queue 里有 “invalidate a”，但还没处理。<br>这时 CPU 1 依序读 b、a 的值，会从 CPU 0 的 cache 读到 b=1，然后从自己的 cache 读到 a=0 (因为还没 invalidate a)。和上面的写入情况本质一样的，invalidate queue破坏了缓存一致性<br>invalidate queue是最新的，但是 a 处于 Shared，所以会从cache中直接拿，拿得是0，不是最新的<br>所以即便在foo函数给a,b分别赋值中间加上写栅栏，还是不能完全保证得到的结果是我们想要的，其实这个时候，可以猜到需要在assert之前也就是读取a之前加上一个读栅栏read memory barrier<br>目的很明确确保先清空 invalidate queue 再继续读资料。<br>在 assert(a==1) 之前插入 read memory barrier，执行顺序变成这样:</p><ol><li>CPU 1 执行 read memory barrier 时会设 invalidate queue 里的资料为 “marked”</li><li>CPU 1 读 cache 里 a 的值时，发现 invalidate queue 里有标记 a，于是会先执行 invalidate a 再继续读 a 的值</li><li>执行 invalidate a 后，就不会读自己 cache 的值，而改从 CPU 0 的 cache 读到最新的值，达到「依序读 b、a 的值」的效果</li></ol><h2 id="第二个小案例"><a href="#第二个小案例" class="headerlink" title="第二个小案例"></a>第二个小案例</h2><p>再摘一句perfbook的话，说的有点意思</p><p><code>Since the standard synchronization primitives preserve the illusion of ordering, your path of least resistance is to stop reading this section and simply use these primitives.However, if you need to implement the synchronization primitives themselves, or if you are simply interested in understanding how memory ordering and memory barriers work, read on!</code></p><p>你也许面对CPU的这种out of order的行为有本能的抵抗，没有关系，放轻松，你的抵抗之路可以到此结束，只要你愿意使用各种同步原语来保护你程序中的共享资源，因为透过这些标准的同步原语，你看到的是一个顺序执行的世界。当然，这会引入一些小小的遗憾：你不知道底层到底是如何把“乱序”变成“有序”的。不过，实现同步原语的那些软件工程师没有这个豁免权，他们必须要深入理解memory order和memory barrier。此外，那些想要“打破沙锅问到底”以及想要“知其然知其所以然”的工程师也可以跟随我们继续。</p><p>再举一个例子，摘自 perfbook memory barrier（14.2章节）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> thread0(<span class="keyword">void</span>)</span><br><span class="line"><span class="number">2</span> &#123;</span><br><span class="line"><span class="number">3</span> A = <span class="number">1</span>;</span><br><span class="line"><span class="number">4</span> smp_wmb();</span><br><span class="line"><span class="number">5</span> B = <span class="number">1</span>;</span><br><span class="line"><span class="number">6</span> &#125;</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span> thread1(<span class="keyword">void</span>)</span><br><span class="line"><span class="number">9</span> &#123;</span><br><span class="line"><span class="number">10</span> <span class="keyword">while</span> (B != <span class="number">1</span>)</span><br><span class="line"><span class="number">11</span> <span class="keyword">continue</span>;</span><br><span class="line"><span class="number">12</span> barrier();</span><br><span class="line"><span class="number">13</span> C = <span class="number">1</span>;</span><br><span class="line"><span class="number">14</span> &#125;</span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span> thread2(<span class="keyword">void</span>)</span><br><span class="line"><span class="number">17</span> &#123;</span><br><span class="line"><span class="number">18</span> <span class="keyword">while</span> (C != <span class="number">1</span>)</span><br><span class="line"><span class="number">19</span> <span class="keyword">continue</span>;</span><br><span class="line"><span class="number">20</span> barrier();</span><br><span class="line"><span class="number">21</span> <span class="keyword">assert</span>(A != <span class="number">0</span>);</span><br><span class="line"><span class="number">22</span> &#125;</span><br></pre></td></tr></table></figure></p><p>开始，变量A，B，C的初始值都是0。根据程序逻辑：thread0中，A先于B赋值，thread1中，程序逻辑是一直等到B变量被赋值为1之后，再给C赋值。这里，人类的直觉告诉我们，如果变量C已经被赋值为1的时候（第13行程序），A一定已经被赋值为1了。同样的，在thread2中，第21行程序的assert一定是不会被触发的。</p><p><code>This line of reasoning, intuitively obvious though it may be, is completely and utterly incorrect. Please note that this is not a theoretical assertion: actually running this code on real-world weakly-ordered hardware (a 1.5GHz 16-CPU POWER 5 system) resulted in the assertion firing 16 times out of 10 million runs. Clearly, anyone who produces code with explicit memory barriers should do some extreme testing – although a proof of correctness might be helpful, the strongly counter-intuitive nature of the behavior of memory barriers should in turn strongly limit one’s trust in such proofs. The requirement for extreme testing should not be taken lightly, given that a number of dirty hardware-dependent tricks were used to greatly increase the probability of failure in this run.</code></p><p>上一节的推理从直觉上看是对的，但是在实际的CPU上运行的结果确是完全错误的。特别需要指出的是这个结果不是理论推导得出来的，是在真实的1.5GHz 16核的POWER 5系统（该cpu的内存模型属于weakly order）上观测得到的，平均每1千万次执行会有16次在21行代码处出现assert失败。很显然，当我们撰写显式调用memory barrier的代码的时候，必须进行非常大量的实际测试。在理论上进行正确性的推导是否有意义呢？也许有帮助，但是，你知道的，在使用memory barrier的时候会发生很多和你的直觉相悖的东西，这让理论的推导变得不那么确定。别小看那些看起来愚蠢的、非常重复性的大量测试，要知道不同的CPU会使用不同的硬件设计方法，因此在memory order和memory barrier方面表现各不相同，你的程序想要在各种硬件上，每次都运行成功不是一件容易的事情。</p><font color="red"><br>个人理解:<br>到底发生了什么让程序在21行的assert上失败？我们一起分析一下。我们假设CPU0、CPU1和CPU2分别执行thread0、thread1和thread2<br>1. 对于thread 0，我们假设A在CPU0的local cache中，但是状态是shared，因此当执行A=1的语句的时候，不能立刻执行，需要和其他CPU cache进行沟通（发送invalidate message去其他CPU），当然，cpu不会停下其脚步，将A的新值1放入store buffer，继续执行。<br>2. smp_wmb可以mark store buffer中A值，并且阻止后续的store操作进入cache，这时候，即便B在CPU0的local cache中，B=1的赋值也不能操作到cache，而是要进入store buffer，当然状态是unmarked。前面说过，后面进cache的话是marked先进然后unmarked进，由于存在Invalidate Queue这中东西，因此，CPU 0很快就可以收到来自其他CPU的响应，这时候，CPU0可以越过write memory barrier，完成对B的赋值。此时A的状态切到M，回写到cache中，B也跟着回写到cache中了。<br>3. 因此，对于thread1，很快可以感知B的新值“1”并执行了对C变量的赋值。来到thread2，同样的，对C变量的load操作也可以感知到thread1中的赋值因此跳出while循环。<br>4. 最关键的来了，第20行的barrier这个优化屏障不能阻止CPU对A变量的访问，但是，可能由于这时CPU cache操作非常繁忙，A变量的invalidate message还在其invalidate queue中，因此load A得到了旧的值0。<br><br>当然，要修正这个问题非常简单，修改20行代码为smp_rmb即可。一旦执行了smp_rmb，就会mark invalidate queue中的entry，这时候，CPU执行后续的load操作都必须要等到Invalidate queue中的所有缓存的invalidate message（当然，状态必须是marked）被处理并体现到cache中。因此，使用smp_rmb即可以在21行的load A操作中总是获取A的新值“1”从而避免了assert fail。<br>这里有个疑问就是例子中的barrier();这玩意到底到底代表啥意思，按照作者想要表达的意思是barrier()起不到读屏障的功能，要改为smp_rmb<br></font> <h2 id="简要归纳"><a href="#简要归纳" class="headerlink" title="简要归纳"></a>简要归纳</h2><p>硬件为了减少读写 memory 而有 cache。有 cache 就要确保 cache 之间的资料一致 (同一时间同一位置只有一个值)。但确保 cache 资料完全一致容易让 CPU 闲置，于是有了 store buffer 和 invalidate queue 降少 CPU 闲置。代价是只保证 CPU 自己会读到自己写入的最新数据，但其它 CPU 不一定。<br><strong>为了让其它 CPU 有需要的时候也能读到最新的资料，针对 store buffer 和 invalidate queue 的副作用设计了 write/read memory barrier</strong><br>于是写程序的人在需要的时候可以用 memory barrier 确保关键的数据有依正确的顺序更新 (没保证更新的时间)。 CPU 在多数情况下仍能避免闲置。<br>到此可以了解为什么这两种操作合在一起比较符合 CPU 架构：</p><ul><li>一个 thread 「先 write X 后执行 write memory barrier」</li><li>另一个 thread 「先执行 read memory barrier 后 read X」</li></ul><h1 id="java内存模型"><a href="#java内存模型" class="headerlink" title="java内存模型"></a>java内存模型</h1><p>这里再谈一下java的内存模型，这个模型是抽象出来的，下面这个图网上找的也是老演员了，最初来自深入理解虚拟机一书<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/memory-barrier07.png" alt=""></p><font color="red"><br>个人理解:<br>这里的java线程对应着cpu，工作内存其实是不存在的，可以简单的理解为是cpu的cache，save和load其实对应的是缓存一致性协议<br></font> <h2 id="JVM-barrier"><a href="#JVM-barrier" class="headerlink" title="JVM barrier"></a>JVM barrier</h2><ul><li>LoadLoad：两个 Load 操作之间内存屏障，smp_rmb 就是典型实现；</li><li>StoreStore：两个Store 操作之间的内存屏障，smp_wmb 典型实现；</li><li>LoadStore：在 Load 操作和 Store 操作之间的内存屏障；</li><li>StoreLoad：在 Store 操作和  Load 操作之间的内存屏障</li></ul><font color="red"><br>个人理解添加<br>以StoreLoad为例，这个是上面四个中最重的，最耗性能的，storeload其实能涵盖上面三个，因为它既保证了写也保证了读，它和loadstore的侧重点不一样，loadstore对于后面的那个写什么时候能写进去不是非常要求，更侧重的是前面的写。前一个是写后一个是读，后一个读取不能重排到这个写操作之前，也就是load时要看到前面写的值，这也就要保证前一个写的内容如果在storebuffer中就一定要写到cache中.<br>然后load的时候不能直接去读cache的值，要将invalidqueue中的值处理掉，该标记无效的都要进行标记，确保读取出来的是最新的。<br></font>   <p>对于java中的volatile防止重排网上博客一大堆，有些文章从汇编角度来分析加了volatile前后的对比，本地测试过hsdis可以用来将java转换为对应的汇编，这里就不展开了     </p><p><font color="red"> 个人理解<br>volatile最重要的使命是为了可见性，为了达到可见性这个目的不得不设计出防止指令重排，因为如果不限制重排，就达不到可见性这个目的<br>所以可以理解防止重排只是达到可见性的一个不得已手段<br></font><br><br>   </p><p><strong>参考文章</strong><br><a href="https://www.infoq.com/articles/memory_barriers_jvm_concurrency/" target="_blank" rel="noopener">Memory Barriers and JVM Concurrency</a><br><a href="http://www.wowotech.net/kernel_synchronization/memory-barrier.html" target="_blank" rel="noopener">Linux内核同步机制之（三）：memory barrier</a><br><a href="https://medium.com/fcamels-notes/%E5%BE%9E%E7%A1%AC%E9%AB%94%E8%A7%80%E9%BB%9E%E4%BA%86%E8%A7%A3-memry-barrier-%E7%9A%84%E5%AF%A6%E4%BD%9C%E5%92%8C%E6%95%88%E6%9E%9C-416ff0a64fc1" target="_blank" rel="noopener">從硬體觀點了解 memory barrier 的實作和效果</a><br><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0098r0.pdf" target="_blank" rel="noopener">P0098R0: Towards Implementation and Use ofmemoryorderconsume</a><br><a href="https://createpoint.qti.qualcomm.com/search/contentdocument/stream/35553?refererRoute=search%2FsearchArgs%2Fq%7C%7CMemory%20Barriers%7C%7Crows%7C%7C10%7C%7CsortField%7C%7Cscore%7C%7CsortOrder%7C%7Cdesc&amp;dcn=80-N5603-1&amp;currentPage=1&amp;itemTotalIndex=1" target="_blank" rel="noopener">LINUX MEMORY ORDERING ON SCORPION-MP AND KRAIT APPLICATION PROCESSORS</a><br><a href="https://preshing.com/20120710/memory-barriers-are-like-source-control-operations/" target="_blank" rel="noopener">Memory Barriers Are Like Source Control Operations</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzUzMDk3NjM3Mg==&amp;mid=2247483755&amp;idx=1&amp;sn=50f80e73f46fab04d8a799e8731432c6&amp;chksm=fa48da70cd3f5366d9658277cccd9e36fca540276f580822d41aef7d8af4dda480fc85e3bde4&amp;token=630636109&amp;lang=zh_CN#rd" target="_blank" rel="noopener">从 Java 内存模型看内部细节</a><br><a href="http://www.4e00.com/blog/java/2018/10/21/inside-java-memory-model.html" target="_blank" rel="noopener">深入理解 java 内存模型</a><br><a href="http://www.wowotech.net/memory_management/458.html" target="_blank" rel="noopener">浅谈Cache Memory</a><br><a href="http://www.wowotech.net/kernel_synchronization/Why-Memory-Barriers.html" target="_blank" rel="noopener">Why Memory Barriers</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇文章开始之前需要了解一些背景知识&lt;/p&gt;
&lt;h1 id=&quot;Cache-Memory&quot;&gt;&lt;a href=&quot;#Cache-Memory&quot; class=&quot;headerlink&quot; title=&quot;Cache Memory&quot;&gt;&lt;/a&gt;Cache Memory&lt;/h1&gt;&lt;p&gt;我们都知
      
    
    </summary>
    
      <category term="Linux" scheme="http://lihaizhou.top/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>mmap机制初探</title>
    <link href="http://lihaizhou.top/2020/05/25/mmap%E6%9C%BA%E5%88%B6%E5%88%9D%E6%8E%A2/"/>
    <id>http://lihaizhou.top/2020/05/25/mmap机制初探/</id>
    <published>2020-05-25T11:18:16.000Z</published>
    <updated>2020-06-02T03:37:05.927Z</updated>
    
    <content type="html"><![CDATA[<p>在Unix/Linux系统下读写文件，一般有两种方式</p><p><code>第一种方式：传统的read/write方式</code></p><p>常规文件系统操作的调用过程：</p><ul><li><p>进程发起读文件请求</p></li><li><p>内核通过查找进程文件符表，定位到内核已打开文件集上的文件信息，从而找到此文件的inode</p></li><li><p>inode在address_space上查找要请求的文件页是否已经缓存在页缓存中。如果存在，则直接返回这片文件页的内容。</p></li><li><p>如果不存在，则通过inode定位到文件磁盘地址，将数据从磁盘复制到页缓存。之后再次发起读页面过程，进而将页缓存中的数据发给用户进程。</p></li></ul><p>总结来说，常规文件操作为了提高读写效率和保护磁盘，使用了页缓存机制。这样造成读文件时需要先将文件页从磁盘拷贝到页缓存中，由于页缓存处在内核空间，不能被用户进程直接寻址，所以还需要将页缓存中数据页再次拷贝到内存对应的用户空间中。这样，通过了两次数据拷贝过程，才能完成进程对文件内容的获取任务。写操作也是一样，待写入的buffer在内核空间不能直接访问，必须要先拷贝至内核空间对应的主存，再写回磁盘中（延迟写回），也是需要两次数据拷贝。</p><p>当存在多个进程同时读取同一个文件时，每一个进程中的地址空间都会保存一份副本，这样肯定不是最优方式的，造成了物理内存的浪费</p><p><code>第二种方式：内存映射</code></p><p>具体操作方式是：<br>open一个文件，然后调用mmap系统调用，将文件的内容的全部或一部分直接映射到进程的地址空间，映射完成后，进程可以像访问普通内存一样做其他的操作，比如memcpy等等。</p><p>mmap并不分配物理地址空间，它只是占有进程的虚拟地址空间。这跟第一种方式不一样的，第一种方式需要预先分配好物理内存，内核才能将页高速缓冲中的文件数据拷贝到用户进程指定的内存空间中。</p><p>而第二种方式，当多个进程需要同时访问同一个文件时，每个进程都将文件所存储的内核高速缓冲映射到自己的进程地址空间。当第一个进程访问内核中的缓冲区时候，前面讲过并没有实际拷贝数据，这时MMU在地址映射表中是无法找到与地址空间相对应的物理地址的，也就是MMU失败，就会触发缺页中断。内核将文件的这一页数据读入到内核高速缓冲区中，并更新进程的页表，使页表指向内核缓冲中的这一页。之后有其他的进程再次访问这一页的时候，该页已经在内存中了，内核只需要将进程的页表登记并且指向内核的页高速缓冲区即可</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/mmap-1-1.jpg" alt=""></p><p>异步IO<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/mmap-1-2.jpg" alt=""></p><p>mmap内存映射具体流程如下：</p><p>1、用户进程调用内存映射函数库mmap，当前进程在虚拟地址空间中，寻找一段空闲的满足要求的虚拟地址。</p><p>2、此时内核收到相关请求后会调用内核的mmap函数，注意，不同于用户空间库函数。内核mmap函数通过虚拟文件系统定位到文件磁盘物理地址，既实现了文件地址和虚拟地址区域的映射关系。 此时，这片虚拟地址并没有任何数据关联到主存中。</p><p>注意，前两个阶段仅在于创建虚拟区间并完成地址映射，但是并没有将任何文件数据的拷贝至主存。真正的文件读取是当进程发起读或写操作时。</p><p>3、进程的读或写操作访问虚拟地址空间这一段映射地址，现这一段地址并不在物理页面上。因为目前只建立了地址映射，真正的硬盘数据还没有拷贝到内存中，因此引发缺页中断。</p><p>4、由于引发了缺页中断，内核则调用nopage函数把所缺的页从磁盘装入到主存中。</p><p>5、之后用户进程即可对这片主存进行读或者写的操作，如果写操作改变了其内容，一定时间后系统会自动回写脏页面到对应磁盘地址，也即完成了写入到文件的过程。</p><p>注意：这里拷贝磁盘内容到主存，这里的主存是指处于内核空间的Page Cache，而不是用户空间的内存。用户地址要访问内核空间中的数据，需使用MMU把虚拟地址映射到内核的内存地址中，即可对数据进行操作。整个mmap工作流程大体如下：</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/mmap-2.png" alt=""></p><p>这里我们可以看出mmap系统调用与read/write调用的区别在于：</p><p>mmap只需要一次系统调用（一次拷贝），后续操作不需要系统调用。访问的数据不需要在page cache和用户缓冲区之间拷贝。 访问的数据不需要在page cache和用户缓冲区之间拷贝。<br>从上所述，当频繁对一个文件进行读取操作时，mmap会比read/write更高效</p><p>既然建立内存映射没有进行实际的数据拷贝，那么进程又怎么能最终直接通过内存操作访问到硬盘上的文件呢？那就要看内存映射之后的几个相关的过程了。</p><p>mmap()会返回一个指针ptr，它指向进程逻辑地址空间中的一个地址，这样以后，进程无需再调用read或write对文件进行读写，而只需要通过ptr就能够操作文件。但是ptr所指向的是一个逻辑地址，要操作其中的数据，必须通过MMU将逻辑地址转换成物理地址，这个过程与内存映射无关。 </p><p>前面讲过，建立内存映射并没有实际拷贝数据，这时，MMU在地址映射表中是无法找到与ptr相对应的物理地址的，也就是MMU失败，将产生一个缺页中断，缺页中断的中断响应函数会在swap中寻找相对应的页面，如果找不到（也就是该文件从来没有被读入内存的情况），则会通过mmap()建立的映射关系，从硬盘上将文件读取到物理内存中，这个过程与内存映射无关。</p><p>如果在拷贝数据时，发现物理内存不够用，则会通过虚拟内存机制（swap）将暂时不用的物理页面交换到硬盘上，这个过程也与内存映射无关。</p><p>使用mmap操作文件中，创建新的虚拟内存区域和建立文件磁盘地址和虚拟内存区域映射这两步，没有任何文件拷贝操作。而之后访问数据时发现内存中并无数据而发起的缺页异常过程，可以通过已经建立好的映射关系，只使用一次数据拷贝，就从磁盘中将数据传入内存的用户空间中，供进程使用。</p><p>总而言之，常规文件操作需要从磁盘到页缓存再到用户主存的两次数据拷贝。而mmap操控文件，只需要从磁盘到用户主存的一次数据拷贝过程。说白了，mmap的关键点是实现了用户空间和内核空间的数据直接交互而省去了空间不同数据不通的繁琐过程。因此mmap效率更高</p><p>mmap使用过程中的几个细节点：</p><p>细节点一： mmap映射区域大小必须是物理页大小(page_size)的整倍数（在Linux中内存页通常是4k）。原因是，内存的最小粒度是页，而进程虚拟地址空间和内存的映射也是以页为单位。为了匹配内存的操作，mmap从磁盘到虚拟地址空间的映射也必须是页。</p><p>例如，有一个文件的大小是5K，mmap函数从文件的起始位置映射5K到虚拟内存中，由于内存物理页是4K，虽然映射的文件只有5K，但是实际上映射到内存区域的内存是8K，以便满足物理页大小的整数倍。映射后对5~8K的内存区域用零填充，对这部分的操作不会报错也不会写入到原文件中。</p><p>细节点二 ： 映射建立之后，即使文件关闭，映射依然存在。因为映射的是磁盘的地址，不是文件本身，和文件句柄无关。同时可用于进程间通信的有效地址空间不完全受限于被映射文件的大小，因为是按页映射。</p><p>平时会遇到应用OOM的问题，日志中有时候会有如下内容<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">07</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">43</span>:<span class="number">55.266</span> <span class="number">10181</span>  <span class="number">4737</span>  <span class="number">6529</span> E filemap : mmap(<span class="number">6078464</span>,<span class="number">299753</span>) failed: Out of memory</span><br></pre></td></tr></table></figure></p><p>对应的Code</p><p>system/core/libutils/FileMap.cpp</p><p>这里谷歌在2020.5.7号有修改，之前是调用的mmap，mmap中继而调用mmap64</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* ptr = mmap64(nullptr, adjLength, prot, flags, fd, adjOffset);</span><br><span class="line"><span class="keyword">if</span> (ptr == MAP_FAILED) &#123;</span><br><span class="line">    <span class="keyword">if</span> (errno == EINVAL &amp;&amp; length == <span class="number">0</span>) &#123;</span><br><span class="line">        ptr = nullptr;</span><br><span class="line">        adjust = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ALOGE(<span class="string">"mmap(%lld,%zu) failed: %s\n"</span>, (<span class="keyword">long</span> <span class="keyword">long</span>)adjOffset, adjLength, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bionic/libc/bionic/mmap.cpp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* mmap64(<span class="keyword">void</span>* addr, size_t size, <span class="keyword">int</span> prot, <span class="keyword">int</span> flags, <span class="keyword">int</span> fd, off64_t offset) &#123;</span><br><span class="line">  <span class="keyword">if</span> (offset &lt; <span class="number">0</span> || (offset &amp; ((<span class="number">1</span>UL &lt;&lt; MMAP2_SHIFT)-<span class="number">1</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line">    errno = EINVAL;</span><br><span class="line">    <span class="keyword">return</span> MAP_FAILED;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// prevent allocations large enough for `end - start` to overflow</span></span><br><span class="line">  size_t rounded = __BIONIC_ALIGN(size, PAGE_SIZE);</span><br><span class="line">  <span class="keyword">if</span> (rounded &lt; size || rounded &gt; PTRDIFF_MAX) &#123;</span><br><span class="line">    errno = ENOMEM;</span><br><span class="line">    <span class="keyword">return</span> MAP_FAILED;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  bool is_private_anonymous =</span><br><span class="line">      (flags &amp; (MAP_PRIVATE | MAP_ANONYMOUS)) == (MAP_PRIVATE | MAP_ANONYMOUS);</span><br><span class="line">  bool is_stack_or_grows_down = (flags &amp; (MAP_STACK | MAP_GROWSDOWN)) != <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">void</span>* result = __mmap2(addr, size, prot, flags, fd, offset &gt;&gt; MMAP2_SHIFT);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (result != MAP_FAILED &amp;&amp; kernel_has_MADV_MERGEABLE &amp;&amp;</span><br><span class="line">      is_private_anonymous &amp;&amp; !is_stack_or_grows_down) &#123;</span><br><span class="line">    ErrnoRestorer errno_restorer;</span><br><span class="line">    <span class="keyword">int</span> rc = madvise(result, size, MADV_MERGEABLE);</span><br><span class="line">    <span class="keyword">if</span> (rc == -<span class="number">1</span> &amp;&amp; errno == EINVAL) &#123;</span><br><span class="line">      kernel_has_MADV_MERGEABLE = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mmap常见的错误类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">EACCES：访问出错</span><br><span class="line">EAGAIN：文件已被锁定，或者太多的内存已被锁定</span><br><span class="line">EBADF：fd不是有效的文件描述词</span><br><span class="line">EINVAL：一个或者多个参数无效 这里的参数常指的是start len offset 但是按照unlinx高级环境编程中描述，start一般会被命名为<span class="keyword">null</span>的空指针，这样告诉内核自己去选择起始地址，offset一般情况下设置为；那么出现这个问题通常就是len出错了，那么可以用printf大法来找到具体的错误。</span><br><span class="line">ENFILE：已达到系统对打开文件的限制</span><br><span class="line">ENODEV：指定文件所在的文件系统不支持内存映射</span><br><span class="line">ENOMEM：内存不足，或者进程已超出最大内存映射数量</span><br><span class="line">EPERM：权能不足，操作不允许</span><br><span class="line">ETXTBSY：已写的方式打开文件，同时指定MAP_DENYWRITE标志</span><br><span class="line">SIGSEGV：试着向只读区写入</span><br><span class="line">SIGBUS：试着访问不属于进程的内存区</span><br></pre></td></tr></table></figure><p><strong>mmap优点总结</strong></p><p>由上文讨论可知，mmap优点共有一下几点：</p><p>1、对文件的读取操作跨过了页缓存，减少了数据的拷贝次数，用内存读写取代I/O读写，提高了文件读取效率。</p><p>2、实现了用户空间和内核空间的高效交互方式, 两空间的各自修改操作可以直接反映在映射的区域内，从而被对方空间及时捕捉。</p><p>3、提供进程间共享内存及相互通信的方式。不管是父子进程还是无亲缘关系的进程，都可以将自身用户空间映射到同一个文件或匿名映射到同一片区域。从而通过各自对映射区域的改动，达到进程间通信和进程间共享的目的。</p><pre><code>同时，如果进程A和进程B都映射了区域C，当A第一次读取C时通过缺页从磁盘复制文件页到内存中；但当B再读C的相同页面时，虽然也会产生缺页异常，但是不再需要从磁盘中复制文件过来，而可直接使用已经保存在内存中的文件数据。</code></pre><p>4、可用于实现高效的大规模数据传输。内存空间不足，是制约大数据操作的一个方面，解决方案往往是借助硬盘空间协助操作，补充内存的不足。但是进一步会造成大量的文件I/O操作，极大影响效率。这个问题可以通过mmap映射很好的解决。换句话说，但凡是需要用磁盘空间代替内  存的时候，mmap都可以发挥其功效</p><p><strong>mmap使用细节</strong><br>1、使用mmap需要注意的一个关键点是mmap映射区域大小必须是物理页大小(page_size)的整倍数（32位系统中通常是4k字节）。原因是内存的最小粒度是页，而进程虚拟地址空间和内存的映射也是以页为单位。为了匹配内存的操作，mmap从磁盘到虚拟地址空间的映射也必须是页。</p><p>2、内核可以跟踪被内存映射的底层对象（文件）的大小，进程可以合法的访问在当前文件大小以内又在内存映射区以内的那些字节。也就是说，如果文件的大小一直在扩张，只要在映射区域范围内的数据，进程都可以合法得到，这和映射建立时文件的大小无关。</p><p>3、映射建立之后，即使文件关闭，映射依然存在。因为映射的是磁盘的地址，不是文件本身，和文件句柄无关。同时可用于进程间通信的有效地址空间不完全受限于被映射文件的大小，因为是按页映射。</p><p>在上面的知识前提下，我们下面看看如果大小不是页的整倍数的具体情况：</p><p>情形一：一个文件的大小是5000字节，mmap函数从一个文件的起始位置开始，映射5000字节到虚拟内存中。</p><p>分析：因为单位物理页面的大小是4096字节，虽然被映射的文件只有5000字节，但是对应到进程虚拟地址区域的大小需要满足整页大小，因此mmap函数执行后，实际映射到虚拟内存区域8192个 字节，5000~8191的字节部分用零填充。映射后的对应关系如下图所示：</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/mmap-3.png" alt=""></p><p>此时：</p><p>（1）读/写前5000个字节（0~4999），会返回操作文件内容。</p><p>（2）读字节5000~8191时，结果全为0。写5000~8191时，进程不会报错，但是所写的内容不会写入原文件中 。</p><p>（3）读/写8192以外的磁盘部分，会返回一个SIGSECV错误。</p><p>情形二：一个文件的大小是5000字节，mmap函数从一个文件的起始位置开始，映射15000字节到虚拟内存中，即映射大小超过了原始文件的大小。</p><p>分析：由于文件的大小是5000字节，和情形一一样，其对应的两个物理页。那么这两个物理页都是合法可以读写的，只是超出5000的部分不会体现在原文件中。由于程序要求映射15000字节，而文件只占两个物理页，因此8192字节~15000字节都不能读写，操作时会返回异常。如下图所示：</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/mmap-4.png" alt=""></p><p>此时：</p><p>（1）进程可以正常读/写被映射的前5000字节(0~4999)，写操作的改动会在一定时间后反映在原文件中。</p><p>（2）对于5000~8191字节，进程可以进行读写过程，不会报错。但是内容在写入前均为0，另外，写入后不会反映在文件中。</p><p>（3）对于8192~14999字节，进程不能对其进行读写，会报SIGBUS错误。</p><p>（4）对于15000以外的字节，进程不能对其读写，会引发SIGSEGV错误。</p><p>情形三：一个文件初始大小为0，使用mmap操作映射了1000*4K的大小，即1000个物理页大约4M字节空间，mmap返回指针ptr。</p><p>分析：如果在映射建立之初，就对文件进行读写操作，由于文件大小为0，并没有合法的物理页对应，如同情形二一样，会返回SIGBUS错误。</p><p>但是如果，每次操作ptr读写前，先增加文件的大小，那么ptr在文件大小内部的操作就是合法的。例如，文件扩充4096字节，ptr就能操作ptr ~ [ (char)ptr + 4095]的空间。只要文件扩充的范围在1000个物理页（映射范围）内，ptr都可以对应操作相同的大小。</p><p>这样，方便随时扩充文件空间，随时写入文件，不造成空间浪费</p><p>Binder进程间通信用到的mmap</p><p>Linux 下的传统 IPC 通信原理<br>传统的 IPC 方式中，进程之间是如何实现通信的。<br>通常的做法是消息发送方将要发送的数据存放在内存缓存区中，通过系统调用进入内核态。然后内核程序在内核空间分配内存，开辟一块内核缓存区，调用 copyfromuser() 函数将数据从用户空间的内存缓存区拷贝到内核空间的内核缓存区中。同样的，接收方进程在接收数据时在自己的用户空间开辟一块内存缓存区，然后内核程序调用 copytouser() 函数将数据从内核缓存区拷贝到接收进程的内存缓存区。这样数据发送方进程和数据接收方进程就完成了一次数据传输，我们称完成了一次进程间通信</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/mmap-5.jpeg" alt=""></p><p>这种传统的 IPC 通信方式有两个问题：</p><pre><code>1.性能低下，一次数据传递需要经历：内存缓存区 --&gt; 内核缓存区 --&gt; 内存缓存区，需要 2 次数据拷贝；2.接收数据的缓存区由数据接收进程提供，但是接收进程并不知道需要多大的空间来存放将要传递过来的数据，因此只能开辟尽可能大的内存空间或者先调用 API 接收消息头来获取消息体的大小，这两种做法不是浪费空间就是浪费时间</code></pre><p>Binder采用一种全新策略：由Binder驱动负责管理数据接收缓存。我们注意到Binder驱动实现了mmap()系统调用，这对字符设备是比较特殊的，因为mmap()通常用在有物理存储介质的文件系统上，而象Binder这样没有物理介质，纯粹用来通信的字符设备没必要支持mmap()。Binder驱动当然不是为了在物理介质和用户空间做映射，而是用来创建数据接收的缓存空间。先看mmap()是如何使用的：<br>fd = open(“/dev/binder”, O_RDWR);<br>mmap(NULL, MAP_SIZE, PROT_READ, MAP_PRIVATE, fd, 0);<br>这样Binder的接收方就有了一片大小为MAP_SIZE的接收缓存区。mmap()的返回值是内存映射在用户空间的地址，不过这段空间是由驱动管理，用户不必也不能直接访问（映射类型为PROT_READ，只读映射）</p><p>一次完整的 Binder IPC 通信过程通常是这样：</p><p>1.Server端在启动之后，调用对/dev/binder设备调用mmap<br>2.内核中的binder_mmap函数进行对应的处理：申请一块物理内存，然后在Server端的用户空间和内核空间同时进行映射。内核中的binder_mmap函数进行对应的处理：申请一块物理内存，然后在Server端的用户空间和内核空间同时进行映射<br>3.Client发送请求，这个请求将先到驱动中，同时需要将数据从Client进程的用户空间拷贝（Client发送请求，这个请求将先到驱动中，同时需要将数据从Client进程的用户空间拷贝（copy_from_user）到内核空间<br>4.驱动通过请求通知Server端有人发出请求，Server进行处理。由于内核空间和Server端进程的用户空间存在内存映射，因此Server进程的代码可以直接访问。这样便完成了一次进程间的通信</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/mmap-6.png" alt=""></p><p>而使用mmap操作文件中，创建新的虚拟内存区域和建立文件磁盘地址和虚拟内存区域映射这两步，没有任何文件拷贝操作。而之后访问数据时发现内存中并无数据而发起的缺页异常过程，可以通过已经建立好的映射关系，只使用一次数据拷贝，就从磁盘中将数据传入内存的用户空间中，供进程使用。</p><p>总而言之，常规文件操作需要从磁盘到页缓存再到用户主存的两次数据拷贝。而mmap操控文件，只需要从磁盘到用户主存的一次数据拷贝过程。说白了，mmap的关键点是实现了用户空间和内核空间的数据直接交互而省去了空间不同数据不通的繁琐过程。因此mmap效率更高</p><p>通过上面介绍可以看到，驱动为接收方分担了最为繁琐的任务：分配/释放大小不等，难以预测的有效负荷缓存区，而接收方只需要提供缓存来存放大小固定，最大空间可以预测的消息头即可。在效率上，由于mmap()分配的内存是映射在接收方用户空间里的，所有总体效果就相当于对有效负荷数据做了一次从发送方用户空间到接收方用户空间的直接数据拷贝，省去了内核中暂存这个步骤，提升了一倍的性能。顺便再提一点，Linux内核实际上没有从一个用户空间到另一个用户空间直接拷贝的函数，需要先用copy_from_user()拷贝到内核空间，再用copy_to_user()拷贝到另一个用户空间。为了实现用户空间到用户空间的拷贝，mmap()分配的内存除了映射进了接收方进程里，还映射进了内核空间。所以调用copy_from_user()将数据拷贝进内核空间也相当于拷贝进了接收方的用户空间，这就是Binder只需一次拷贝的‘秘密’</p><p>Binder 并不存在物理介质，因此 Binder 驱动使用 mmap() 并不是为了在物理介质和用户空间之间建立映射，而是用来在内核空间创建数据接收的缓存空间。</p><p>一次完整的 Binder IPC 通信过程通常是这样：</p><pre><code>首先 Binder 驱动在内核空间创建一个数据接收缓存区；接着在内核空间开辟一块内核缓存区，建立内核缓存区和内核中数据接收缓存区之间的映射关系，以及内核中数据接收缓存区和接收进程用户空间地址的映射关系；发送方进程通过系统调用 copyfromuser() 将数据 copy 到内核中的内核缓存区，由于内核缓存区和接收进程的用户空间存在内存映射，因此也就相当于把数据发送到了接收进程的用户空间，这样便完成了一次进程间的通信</code></pre><p><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/mmap-7.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Unix/Linux系统下读写文件，一般有两种方式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;第一种方式：传统的read/write方式&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;常规文件系统操作的调用过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;进程发起读文件请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内核通
      
    
    </summary>
    
      <category term="Linux" scheme="http://lihaizhou.top/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>为何连接wifi后系统会卡顿一下?</title>
    <link href="http://lihaizhou.top/2020/03/05/%E4%B8%BA%E4%BD%95%E8%BF%9E%E6%8E%A5wifi%E5%90%8E%E7%B3%BB%E7%BB%9F%E4%BC%9A%E5%8D%A1%E9%A1%BF%E4%B8%80%E4%B8%8B/"/>
    <id>http://lihaizhou.top/2020/03/05/为何连接wifi后系统会卡顿一下/</id>
    <published>2020-03-05T03:00:05.000Z</published>
    <updated>2020-03-05T07:32:03.153Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong><br>数据流量使用过程中切换到wifi连接，系统全局会卡一下</p><p><strong>初步分析</strong><br>抓取systrace时手指在桌面不停的滑动，可以看到很明确的一段没有帧，但是这个时间段手指一直在滑动<br>我们都知道vsync是APP最终通过框架层请求上来的，Choreographer收到回调后开始渲染帧。<br>自然而然对应到sf中的vsync-sf也没有帧合成，所以界面上表现为卡顿，现象和jank类似，都是屏幕上没有及时更新画面<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/wifi%E5%88%97%E8%A1%A8%E5%8D%A1%E9%A1%BF4.png" alt=""><br>其实这个时间段可以发现deliverInputEvent也没有，其实这一点也可以从Launcher的PendingInputEventQueue区域看出来<br>PS: PendingInputEventQueue 里面记录的是 App 需要处理的 Input 事件，这个阶段对应的是用户进程中了<br>开始卡顿后即红圈后面便没有波峰出现, 说明压根没有input送到应用进程<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/%E5%88%87%E6%8D%A2%E5%88%B0wifi%E5%90%8E%E5%8D%A1%E9%A1%BF-2.png" alt=""></p><p>这个时候，自然而然就有一个疑问:<br>既然应用进程没有收到input事件，那么会不会是input上报的过程中哪个环节出了问题呢？</p><p>再科普下input事件上报的大概流程</p><ol><li>InputReader 读取 Input 事件</li><li>InputReader 将读取的 Input 事件放到 InboundQueue 中</li><li>InputDispatcher 从 InboundQueue 中取出 Input 事件派发到各个 App(连接) 的 OutBoundQueue<br> 同时将事件记录到各个 App(连接) 的 WaitQueue</li><li>App 接收到 Input 事件，同时记录到 PaddingQueue ，然后对事件进行分发处理<br> App 处理完成后，回调 InputManagerService 将负责监听的 WaitQueue 中对应的 Input 移除</li></ol><p>InputReader和InputDispatcher是跑在SystemServer里面的两个Native线程，负责读取和分发Input 事件<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/%E5%88%87%E6%8D%A2%E5%88%B0wifi%E5%90%8E%E5%8D%A1%E9%A1%BF-3.png" alt=""><br>到这里可以明显看出，卡顿时间段内InputReader在不断的读取事件，说明driver没问题，注意这个时候InputDispatcher 没有收到任何input事件并且处于S状态<br>其实InputDispatcher 没有获取到事件的话，不用说oq区域和wq区域肯定也是没有事件的<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/%E5%88%87%E6%8D%A2%E5%88%B0wifi%E5%90%8E%E5%8D%A1%E9%A1%BF-4.png" alt=""><br>意料之中，空空如也，难怪应用进程苦苦等不来事件<br>这里再简要科普下这几个概念<br>说明</p><ul><li>InputReader 负责从 EventHub 里面把 Input 事件读取出来，然后交给 InputDispatcher 进行事件分发</li><li>InputDispatcher 在拿到 InputReader 获取的事件之后，对事件进行包装和分发 (也就是发给对应的)<ul><li>OutboundQueue 里面放的是即将要被派发给对应 AppConnection 的事件</li></ul></li><li>WaitQueue 里面记录的是已经派发给 AppConnection 但是 App 还在处理没有返回处理成功的事件</li><li>PendingInputEventQueue 里面记录的是 App 需要处理的 Input 事件，这里可以看到已经到了应用进程</li><li>deliverInputEvent 标识 App UI Thread 被 Input 事件唤醒</li><li>InputResponse 标识 Input 事件区域</li><li>App 响应 Input 事件 ： 这里是滑动然后松手，也就是我们熟悉的桌面滑动的操作，桌面随着手指的滑动更新画面，松手后触发 Fling 继续滑动，从 Systrace 就可以看到整个事件的流程</li></ul><p>这个时候，事件上报大致问题区域知道了，再回到InputDispatcher ，看下最后是被1726唤醒的<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/%E5%88%87%E6%8D%A2%E5%88%B0wifi%E5%90%8E%E5%8D%A1%E9%A1%BF-5.png" alt=""></p><p>跟到tid 1726区域，居然定位到了systemserver区域，InputDispatcher正常来讲都是由InputReader 唤醒的，这里不免有些困惑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//cs.android.com/android/platform/superproject/+/master:frameworks/native/services/inputflinger/dispatcher/InputDispatcher.cpp;l=2719?q=InputDispatcher.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> InputDispatcher::notifyMotion(<span class="keyword">const</span> NotifyMotionArgs* args) &#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">    bool needWake;</span><br><span class="line">    &#123; <span class="comment">// acquire lock</span></span><br><span class="line">        mLock.lock();</span><br><span class="line">        <span class="keyword">if</span> (shouldSendMotionToInputFilterLocked(args)) &#123;</span><br><span class="line">            mLock.unlock();</span><br><span class="line">            MotionEvent event;</span><br><span class="line">            event.initialize(args-&gt;deviceId, args-&gt;source, args-&gt;displayId, args-&gt;action,</span><br><span class="line">                             args-&gt;actionButton, args-&gt;flags, args-&gt;edgeFlags, args-&gt;metaState,</span><br><span class="line">                             args-&gt;buttonState, args-&gt;classification, <span class="number">0</span>, <span class="number">0</span>, args-&gt;xPrecision,</span><br><span class="line">                             args-&gt;yPrecision, args-&gt;downTime, args-&gt;eventTime, args-&gt;pointerCount,</span><br><span class="line">                             args-&gt;pointerProperties, args-&gt;pointerCoords);</span><br><span class="line">            policyFlags |= POLICY_FLAG_FILTERED;</span><br><span class="line">            <span class="keyword">if</span> (!mPolicy-&gt;filterInputEvent(&amp;event, policyFlags)) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// event was consumed by the filter</span></span><br><span class="line">            &#125;</span><br><span class="line">            mLock.lock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Just enqueue a new motion event.</span></span><br><span class="line">        MotionEntry* newEntry =</span><br><span class="line">                <span class="keyword">new</span> MotionEntry(args-&gt;sequenceNum, args-&gt;eventTime, args-&gt;deviceId, args-&gt;source,</span><br><span class="line">                                args-&gt;displayId, policyFlags, args-&gt;action, args-&gt;actionButton,</span><br><span class="line">                                args-&gt;flags, args-&gt;metaState, args-&gt;buttonState,</span><br><span class="line">                                args-&gt;classification, args-&gt;edgeFlags, args-&gt;xPrecision,</span><br><span class="line">                                args-&gt;yPrecision, args-&gt;downTime, args-&gt;pointerCount,</span><br><span class="line">                                args-&gt;pointerProperties, args-&gt;pointerCoords, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        needWake = enqueueInboundEventLocked(newEntry);</span><br><span class="line">        mLock.unlock();</span><br><span class="line">    &#125; <span class="comment">// release lock</span></span><br><span class="line">    <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">        mLooper-&gt;wake();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数里主要做的事是读取线程InputReaderThread在处理事务并将读取的事件放到队列中<br>可以看到最后mLooper-&gt;wake();这里的looper对应的是InputDispatcher的looper，也就是最后会唤醒InputDispatcher线程<br>而我们这笔问题中InputDispatcher在卡顿期间处于S状态，往上看哪里return了导致没有执行，其实在mPolicy-&gt;filterInputEvent处返回了false并且return了，这里的代码层层追踪会跟到InputManagerService的filterInputEvent()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//cs.android.com/android/platform/superproject/+/master:frameworks/base/services/core/java/com/android/server/input/InputManagerService.java;l=1828?q=InputManagerService</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Native callback.</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">filterInputEvent</span><span class="params">(InputEvent event, <span class="keyword">int</span> policyFlags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mInputFilterLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInputFilter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mInputFilter.filterInputEvent(event, policyFlags);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    <span class="comment">/* ignore */</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        event.recycle();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里主要是判断InputFilter是否为空，如果不为空，则会走到mInputFilter.filterInputEvent，可以注意下，这里已经位于IMS也就是systemserver进程<br>我们这个问题始终不为空，原因在于开启了手势识别会设置一个InputFilter导致这里不为空，以便做进一步的事件加工处理，InputManagerService的filterInputEvent()最后调用到injectInputEvent()将这个事件送入mInBoundQueue，并唤醒InputDispatcher，不是本文重点所以代码就不展开叙述<br>至此明白了为何InputReader的唤醒源会跑到systemserver(UI线程)中</p><p>继续看systemserver(UI线程)这段区域，在执行一个广播的onReceive中等锁导致的sleep<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/%E5%88%87%E6%8D%A2%E5%88%B0wifi%E5%90%8E%E5%8D%A1%E9%A1%BF-6.png" alt=""></p><p>这里顺便对Contended on monitor with owner NetworkPolicy进行解读:<br>Monitor指的是当前锁对象的池，在Java中，每个对象都有两个池，锁(monitor)池和等待池：</p><p>锁池（同步队列 SynchronizedQueue ）：假设线程 A 已经拥有了某个对象(注意:不是类 )的锁，而其它的线程想要调用这个对象的某个 synchronized 方法(或者 synchronized 块)，由于这些线程在进入对象的 synchronized 方法之前必须先获得该对象的锁的拥有权，但是该对象的锁目前正被线程 A 拥有，所以这些线程就进入了该对象的锁池中。</p><p>这里用了争夺(contention)这个词，意思是这里由于在和目前对象的锁正被其他对象（Owner）所持有，所以没法得到该对象的锁的拥有权，所以进入该对象的锁池</p><p>Owner : 指的是当前拥有这个对象的锁的对象，这里是NetworkPolicy</p><p>讲的通俗一点<br>systemserver(UI线程)在执行一个广播的onReceive中等一个锁，这个锁此时被NetworkPolicy持有</p><p>自然而然继续看NetworkPolicy区域<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/%E5%88%87%E6%8D%A2%E5%88%B0wifi%E5%90%8E%E5%8D%A1%E9%A1%BF-7.png" alt=""></p><p>可以看到这段时间NetworkPolicy基本处于S状态，此时netd得到调度运行，这点在cpu区域也可以得到证实</p><p>再看下netd区域，卡顿开始的时候也正是netd得到调度的时候，是被2835这个进程唤醒，2835正是NetworkPolicy</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/%E5%88%87%E6%8D%A2%E5%88%B0wifi%E5%90%8E%E5%8D%A1%E9%A1%BF-8.png" alt=""></p><p>到这里可以大致梳理一下卡顿时间内做的事:<br>1.SystemServer中的UI线程在等一个锁，这个锁被NetworkPolicy持有，所以没有发送input事件给InputDispatcher<br>2.NetworkPolicy为何一直不释放呢，是因为其调用了netd，netd执行的时间较长耗时了1s左右，等netd执行结束后NetworkPolicy得到调度继续执行并释放锁<br>3.SystemServer中的UI线程获取到锁，继续发送input事件到mInBoundQueue并唤醒InputDispatcher</p><p>现在的疑问就是NetworkPolicy和SystemServer(UI线程)监听了一样的广播，这个广播的服务端应该是加锁了导致了所有注册的客户端顺序执行<br>其实想想也能猜到应该是wifi状态变化或者网络变化的广播，跟到NetworkManagerService中看下很容易发现NetworkManagerService监听了一个网络变化广播CONNECTIVITY_ACTION<br>但是SystemServer(UI线程)中注册并回调执行的代码位置需要借助traceview进一步定位，这里比较简单不展开讨论</p><p>解决思路看看SystemServer(UI线程)中具体代码处是否能够去掉锁或后台执行，只要不堵在UI线程就行</p><p>这个问题只有开启手势识别或有设置了InputFilter的情况才会出现，最新谷歌代码上发现代码变化没有注册监听，故该问题在新版本上不会存在</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;br&gt;数据流量使用过程中切换到wifi连接，系统全局会卡一下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初步分析&lt;/strong&gt;&lt;br&gt;抓取systrace时手指在桌面不停的滑动，可以看到很明确的一段没有帧，但是这个时间段手指一直在滑动&lt;b
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
      <category term="性能" scheme="http://lihaizhou.top/categories/Android/%E6%80%A7%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>谁拖慢了列表的滑动速度</title>
    <link href="http://lihaizhou.top/2020/03/04/%E8%B0%81%E6%8B%96%E6%85%A2%E4%BA%86%E5%88%97%E8%A1%A8%E7%9A%84%E6%BB%91%E5%8A%A8%E9%80%9F%E5%BA%A6/"/>
    <id>http://lihaizhou.top/2020/03/04/谁拖慢了列表的滑动速度/</id>
    <published>2020-03-04T13:59:04.000Z</published>
    <updated>2020-03-05T07:45:13.678Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题描述</strong><br>在开机向导界面滑动wifi列表界面时比较卡顿，概率为必现</p><p>抓一份systrace，红色帧有多处，总体上看有不少处发生掉帧<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/wifi%E5%88%97%E8%A1%A8%E5%8D%A1%E9%A1%BF1.jpg" alt=""></p><p>挑其中一处红色帧放大看下<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/wifi%E5%88%97%E8%A1%A8%E5%8D%A1%E9%A1%BF2.png" alt=""><br>耗时中的measure是大头，其中一次measure有数十次obtainview，对比其他绿色正常帧，发现正常的时候没有measure的过程<br>放大一次obtainview的过程，做的其实是inflate一项item的过程，红圈处对应了wifi一个item的布局<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/wifi%E5%88%97%E8%A1%A8%E5%8D%A1%E9%A1%BF3.png" alt=""><br>我们都知道，ViewRootImpl的performTraversals方法会经过measure、layout和draw三个流程才能将一帧View需要显示的内容绘制到屏幕上</p><ul><li>performMeasure: 从根节点向下遍历View树，完成所有ViewGroup和View的测量工作，计算出所有ViewGroup和View显示出来需要的高度和宽度</li><li>performLayout()：从根节点向下遍历View树，完成所有ViewGroup和View的布局计算工作，根据测量出来的宽高及自身属性，计算出所有ViewGroup和View显示在屏幕上的区域；</li><li>performDraw()：从根节点向下遍历View树，完成所有ViewGroup和View的绘制工作，根据布局过程计算出的显示区域，将所有View的当前需显示的内容画到屏幕上</li></ul><p>对应到我们这个问题，此时大概心里有数了，一帧的耗时并不是计算显示在哪个区域以及本身的内容绘制耗时，而是计算需要显示的高度或宽度耗时，注意这里是计算这个列表的高度或宽度耗时了，因为每次measure都对应了数十次的加载item的过程，很显然需要依据item的高度或宽度来最终确定列表的高度或宽度</p><p>故真相只有一个，就是列表很可能使用了自适应的高度或宽度</p><p>看下代码<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">     android:id=<span class="string">"@+id/provision_lyt_content"</span></span><br><span class="line">     android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">     android:layout_height=<span class="string">"0dip"</span></span><br><span class="line">     android:layout_weight=<span class="string">"1"</span></span><br><span class="line">     android:layout_marginTop=<span class="string">"@dimen/provision_content_top_padding"</span></span><br><span class="line">     android:paddingStart=<span class="string">"@dimen/provision_list_left_padding"</span></span><br><span class="line">     android:paddingEnd=<span class="string">"@dimen/provision_list_right_padding"</span></span><br><span class="line">     android:orientation=<span class="string">"vertical"</span>&gt;</span><br><span class="line">     &lt;ListView</span><br><span class="line">         android:id=<span class="string">"@android:id/list"</span></span><br><span class="line">         android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">         android:layout_height=<span class="string">"wrap_content"</span> /&gt;</span><br><span class="line"> &lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p><p> 果不其然，这里设置了自适应的高度，修改为match_parent后再次测试发现卡顿消失<br>抓取改后的systrace<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/wifi%E5%88%97%E8%A1%A8%E5%8D%A1%E9%A1%BF4.png" alt=""></p><p>基本上没有了红色帧，每一帧的绘制不再有measure的过程<br>其实这个问题不抓systrace，看traceview同样能够定位，只是没有systrace直观</p><p>到这里，还有一个疑问，当view设置了自适应高度后，它的高度由其子view的高度决定，故需要计算它的所有子view高度后才能确定自身的显示高度<br>这一点容易理解，但是具体到onMeasure的代码里是如何实现的呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/core/java/android/view/ViewRootImpl.java</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performMeasure</span><span class="params">(<span class="keyword">int</span> childWidthMeasureSpec, <span class="keyword">int</span> childHeightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="comment">//这里对应了systrace中measure tag</span></span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"measure"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其中的mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);通过参数可以看到，view的显示宽高用到了其子view的宽高作为约束条件<br>listview必定会重写onMeasure，直接跟到其源码中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">frameworks/base/core/java/android/widget/ListView.java</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Sets up mListPadding</span></span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">          <span class="comment">//....</span></span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span> (heightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">              <span class="comment">// <span class="doctag">TODO:</span> after first layout we should maybe start at the first visible position, not 0</span></span><br><span class="line">              heightSize = measureHeightOfChildren(widthMeasureSpec, <span class="number">0</span>, NO_POSITION, heightSize, -<span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></p><p>我们都知道wrap_content对应的mode为<code>MeasureSpec.AT_MOST</code>,这时候调用到measureHeightOfChildren开始计算其子view的宽高</p><p>这里看注释描述，如果指定了高度，则measure会停止<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Measures the height of the given range of children (inclusive) and</span></span><br><span class="line"><span class="comment">     * returns the height with this ListView's padding and divider heights</span></span><br><span class="line"><span class="comment">     * included. If maxHeight is provided, the measuring will stop when the</span></span><br><span class="line"><span class="comment">     * current height reaches maxHeight.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> widthMeasureSpec The width measure spec to be given to a child's</span></span><br><span class="line"><span class="comment">     *            &#123;<span class="doctag">@link</span> View#measure(int, int)&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startPosition The position of the first child to be shown.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endPosition The (inclusive) position of the last child to be</span></span><br><span class="line"><span class="comment">     *            shown. Specify &#123;<span class="doctag">@link</span> #NO_POSITION&#125; if the last child should be</span></span><br><span class="line"><span class="comment">     *            the last available child from the adapter.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxHeight The maximum height that will be returned (if all the</span></span><br><span class="line"><span class="comment">     *            children don't fit in this value, this value will be</span></span><br><span class="line"><span class="comment">     *            returned).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> disallowPartialChildPosition In general, whether the returned</span></span><br><span class="line"><span class="comment">     *            height should only contain entire children. This is more</span></span><br><span class="line"><span class="comment">     *            powerful--it is the first inclusive position at which partial</span></span><br><span class="line"><span class="comment">     *            children will not be allowed. Example: it looks nice to have</span></span><br><span class="line"><span class="comment">     *            at least 3 completely visible children, and in portrait this</span></span><br><span class="line"><span class="comment">     *            will most likely fit; but in landscape there could be times</span></span><br><span class="line"><span class="comment">     *            when even 2 children can not be completely shown, so a value</span></span><br><span class="line"><span class="comment">     *            of 2 (remember, inclusive) would be good (assuming</span></span><br><span class="line"><span class="comment">     *            startPosition is 0).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The height of this ListView with the given children.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@UnsupportedAppUsage</span>(maxTargetSdk = Build.VERSION_CODES.P, trackingBug = <span class="number">115609023</span>)</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">measureHeightOfChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> startPosition, <span class="keyword">int</span> endPosition,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> maxHeight, <span class="keyword">int</span> disallowPartialChildPosition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ListAdapter adapter = mAdapter;</span><br><span class="line">        <span class="keyword">if</span> (adapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mListPadding.top + mListPadding.bottom;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Include the padding of the list</span></span><br><span class="line">        <span class="keyword">int</span> returnedHeight = mListPadding.top + mListPadding.bottom;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> dividerHeight = mDividerHeight;</span><br><span class="line">        <span class="comment">// The previous height value that was less than maxHeight and contained</span></span><br><span class="line">        <span class="comment">// no partial children</span></span><br><span class="line">        <span class="keyword">int</span> prevHeightWithoutPartialChild = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        View child;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mItemCount - 1 since endPosition parameter is inclusive</span></span><br><span class="line">        endPosition = (endPosition == NO_POSITION) ? adapter.getCount() - <span class="number">1</span> : endPosition;</span><br><span class="line">        <span class="keyword">final</span> AbsListView.RecycleBin recycleBin = mRecycler;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> recyle = recycleOnMeasure();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span>[] isScrap = mIsScrap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = startPosition; i &lt;= endPosition; ++i) &#123;</span><br><span class="line">            child = obtainView(i, isScrap);</span><br><span class="line"></span><br><span class="line">            measureScrapChild(child, i, widthMeasureSpec, maxHeight);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Count the divider for all but one child</span></span><br><span class="line">                returnedHeight += dividerHeight;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Recycle the view before we possibly return from the method</span></span><br><span class="line">            <span class="keyword">if</span> (recyle &amp;&amp; recycleBin.shouldRecycleViewType(</span><br><span class="line">                    ((LayoutParams) child.getLayoutParams()).viewType)) &#123;</span><br><span class="line">                recycleBin.addScrapView(child, -<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            returnedHeight += child.getMeasuredHeight();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (returnedHeight &gt;= maxHeight) &#123;</span><br><span class="line">                <span class="comment">// We went over, figure out which height to return.  If returnedHeight &gt; maxHeight,</span></span><br><span class="line">                <span class="comment">// then the i'th position did not fit completely.</span></span><br><span class="line">                <span class="keyword">return</span> (disallowPartialChildPosition &gt;= <span class="number">0</span>) <span class="comment">// Disallowing is enabled (&gt; -1)</span></span><br><span class="line">                            &amp;&amp; (i &gt; disallowPartialChildPosition) <span class="comment">// We've past the min pos</span></span><br><span class="line">                            &amp;&amp; (prevHeightWithoutPartialChild &gt; <span class="number">0</span>) <span class="comment">// We have a prev height</span></span><br><span class="line">                            &amp;&amp; (returnedHeight != maxHeight) <span class="comment">// i'th child did not fit completely</span></span><br><span class="line">                        ? prevHeightWithoutPartialChild</span><br><span class="line">                        : maxHeight;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((disallowPartialChildPosition &gt;= <span class="number">0</span>) &amp;&amp; (i &gt;= disallowPartialChildPosition)) &#123;</span><br><span class="line">                prevHeightWithoutPartialChild = returnedHeight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// At this point, we went through the range of children, and they each</span></span><br><span class="line">        <span class="comment">// completely fit, so return the returnedHeight</span></span><br><span class="line">        <span class="keyword">return</span> returnedHeight;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>这里最关键的代码: <code>child = obtainView(i, isScrap);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Gets a view and have it show the data associated with the specified</span></span><br><span class="line"><span class="comment">    * position. This is called when we have already discovered that the view</span></span><br><span class="line"><span class="comment">    * is not available for reuse in the recycle bin. The only choices left are</span></span><br><span class="line"><span class="comment">    * converting an old view or making a new one.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> position the position to display</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> outMetadata an array of at least 1 boolean where the first entry</span></span><br><span class="line"><span class="comment">    *                    will be set &#123;<span class="doctag">@code</span> true&#125; if the view is currently</span></span><br><span class="line"><span class="comment">    *                    attached to the window, &#123;<span class="doctag">@code</span> false&#125; otherwise (e.g.</span></span><br><span class="line"><span class="comment">    *                    newly-inflated or remained scrap for multiple layout</span></span><br><span class="line"><span class="comment">    *                    passes)</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> A view displaying the data associated with the specified position</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">View <span class="title">obtainView</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span>[] outMetadata)</span> </span>&#123;</span><br><span class="line">       Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"obtainView"</span>);</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">       <span class="comment">//obtainView方法里面核心的代码其实就两行，首先从复用缓存中取出一个可以复用的View，然后作为参传入getView中，</span></span><br><span class="line"><span class="comment">//也就是convertView。这里会走到obtainview，子View实例都是由obtainView方法返回的，然后再调用具体measureScrapChild</span></span><br><span class="line"><span class="comment">//来具体测量子View的高度.</span></span><br><span class="line">        <span class="comment">//正常情况下这里for循环的次数就等于所有子项的个数，不过特殊的是已测量的子View高度之和大于maxHeight</span></span><br><span class="line"> <span class="comment">//就直接return出循环了。这种做法其实很好理解，ListView能显示的最大高度就是屏幕的高度，如果有1000个子项</span></span><br><span class="line"> <span class="comment">//前面10项已经占满了一屏幕了，那后面的990项就没必要继续测量高度了，这样可以大大提高性能</span></span><br><span class="line">      <span class="keyword">final</span> View scrapView = mRecycler.getScrapView(position);</span><br><span class="line">       <span class="keyword">final</span> View child = mAdapter.getView(position, scrapView, <span class="keyword">this</span>);</span><br><span class="line">       <span class="keyword">if</span> (scrapView != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (child != scrapView) &#123;</span><br><span class="line">               <span class="comment">// Failed to re-bind the data, return scrap to the heap.</span></span><br><span class="line">               mRecycler.addScrapView(scrapView, position);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.isTemporarilyDetached()) &#123;</span><br><span class="line">               outMetadata[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// Finish the temporary detach started in addScrapView().</span></span><br><span class="line">               child.dispatchFinishTemporaryDetach();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//....</span></span><br><span class="line">       setItemViewLayoutParams(child, position);</span><br><span class="line">       Trace.traceEnd(Trace.TRACE_TAG_VIEW);</span><br><span class="line">       <span class="keyword">return</span> child;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>出现问题时正是触发了onMeasure，导致遍历可见范围内的数十个wifi item并计算他们的高度</p><hr><p><strong>一点小结</strong></p><p>一个View最终显示到屏幕上一共分为三个阶段：Measure、Layout、Draw，而使用不当会造成其重复调用，尤其是Measure过程最为敏感。<br>因为当根布局做measure的时候，需要逐级measure子View和子布局，当所有子View或子布局measure完成的时候才能最终确定根部局的大小，<br>所以子布局的measure调用时机是由父布局来决定的。而像ListView这种在其onMeasure中直接调用getView的情况，<br>如果onMeasure被调用次数过多，将严重影响性能。</p><p>这里的listview还好外边没有裹着RelativeLayout，不然会导致子View的onMeasure重复调用，卡顿也会更加明显，假设RelativeLayout嵌套层数为n，子View的onMeasure次数为2^（n+1）</p><p>使用ListView的时候注意尽量使用layout_height=”match_parent”，如果无法避免，外边也不能裹着RelativeLayout</p><p>总而言之: 写代码三思而后行，谨慎再谨慎</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;br&gt;在开机向导界面滑动wifi列表界面时比较卡顿，概率为必现&lt;/p&gt;
&lt;p&gt;抓一份systrace，红色帧有多处，总体上看有不少处发生掉帧&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.c
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
      <category term="性能" scheme="http://lihaizhou.top/categories/Android/%E6%80%A7%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>如何快速定位kernel错误</title>
    <link href="http://lihaizhou.top/2019/12/26/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8Dkernel%E9%94%99%E8%AF%AF/"/>
    <id>http://lihaizhou.top/2019/12/26/如何快速定位kernel错误/</id>
    <published>2019-12-26T12:08:49.000Z</published>
    <updated>2019-12-28T06:57:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>比如在定位systrace卡顿问题时，最后跟到kernel中<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/950ffc39-d5dc-47d7-a57b-3e774cae457d.png?raw=true" alt="systrace卡顿"></p><p>可以看到阻塞在<br>{kernel callsite when blocked:: “teei_forward_call+0xac/0xfc”}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mi@mi-OptiPlex<span class="number">-7060</span>:~<span class="regexp">/Code_mi/</span>F7_code/prebuilts/gdb/linux-x86/bin$ ./gdb</span><br><span class="line">GNU gdb (GDB) <span class="number">7.11</span></span><br><span class="line">Copyright (C) <span class="number">2016</span> Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version <span class="number">3</span> or later &lt;http:<span class="comment">//gnu.org/licenses/gpl.html&gt;</span></span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured <span class="keyword">as</span> <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http:<span class="comment">//www.gnu.org/software/gdb/bugs/&gt;.</span></span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http:<span class="comment">//www.gnu.org/software/gdb/documentation/&gt;.</span></span><br><span class="line">For help, type <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>.</span><br><span class="line">(gdb) file <span class="string">'/home/mi/日志/vmliux/out/target/product/merlin/obj/KERNEL_OBJ/vmlinux'</span> </span><br><span class="line"><span class="comment">//此时输入file后面跟vmlinux文件，vmlinux在symbols中，具体路径在out/target/product/libra/obj/KERNEL_OBJ/下</span></span><br><span class="line">Reading symbols <span class="keyword">from</span> /home/mi/日志/vmliux/out/target/product/merlin/obj/KERNEL_OBJ/vmlinux...done.</span><br><span class="line"></span><br><span class="line">(gdb) list*teei_forward_call+<span class="number">0xac</span>  <span class="comment">//list*后面跟上偏移位</span></span><br><span class="line"><span class="number">0xffffff80087fe9d8</span> is <span class="keyword">in</span> teei_forward_call (<span class="regexp">/home/</span>work/merlin-q-dev-build/kernel<span class="number">-4.14</span>/drivers/misc/mediatek/teei/<span class="number">300</span>/tz_driver/teei_smc_call.c:<span class="number">128</span>).</span><br></pre></td></tr></table></figure><p>这种情况适用于像NE问题或者一些watchdog问题等</p><p>还有一种情况是像如下图中</p><p><img src="https://github.com/hellolihaizhou/saveImg/blob/master/7d36fef5-b40b-439b-bd69-fd65e393e8be.png?raw=true" alt="systrace卡顿2"></p><p>这种情况稍微有点麻烦<br>知道地址该如何反向定位函数名和偏移呢, 这个时候就需要用到objdump，-d后面跟的是vmlinux的地址，最后会将汇编语言导入到vmlinux.txt中，此时搜索后五位即 fb684</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aarch64-linux-android-objdump -d vmlinux &gt; vmlinux.txt</span><br></pre></td></tr></table></figure><p>搜索到如下结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffffff80087fb674:    <span class="number">14000004</span>     b    ffffff80087fb684 &lt;teei_forward_call+<span class="number">0xac</span>&gt;</span><br></pre></td></tr></table></figure><p>这个时候在用gdb配合vmlinux定位teei_forward_call+0xac就可以了</p><p>汇总下<br>分析工具</p><ul><li>addr2line：用来分析单个pc地址对应的源码行数，比如示例log中的第13行中的#00 pc 0004097c，0004097c就是crash时pc调用的堆栈地址，用这个地址就可以分析出对应在源码中的行数；</li><li>objdump：用来把相应的so变成汇编语言的asm文件，然后根据地址信息（比如0004097c）就可以找到更加详细的相关函数信息；</li><li>ndk-stack：用来把log信息全部翻译成更加详细的带源码行数信息的log，相当于是在整个crash堆栈信息都执行addr2line命令。</li></ul><p>linux自带addr2line命令。使用Windows的，在sdk中安装了NDK之后，在ndk中就带有这些工具。<br>比如addr2line工具在：sdk\ndk-bundle\toolchains\arm-linux-androideabi-4.9\prebuilt\windows-x86_64\bin下面，同时这个bin下面包含很多其他工具，比如objdump，readelf等；<br>ndk-stack工具则在sdk\ndk-bundle下面；</p><h3 id="使用addr2line查找代码位置"><a href="#使用addr2line查找代码位置" class="headerlink" title="使用addr2line查找代码位置"></a>使用addr2line查找代码位置</h3><p>执行如下的命令，多个指针地址可以在<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/16111918_pm7h.jpg?raw=true" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arm-linux-androideabi-addr2line –e obj/local/armeabi/libhello-jni.so <span class="number">00004</span>de8 <span class="number">000056</span>c8 <span class="number">00004</span>fb4 <span class="number">00004</span>f58</span><br></pre></td></tr></table></figure><p>PS：</p><ul><li>crash log与对应的so一定要对应起来。即错误的情况是：你拿了一份旧的log，然后你修改了so相关的源码，然后编译出来了新的so，你拿着这个新的so以及旧log中的地址去让addr2line等分析，那肯定是得不到正确的结果的</li><li>带symbols的so文件<br>对于比如手机公司的开发人员来说，一般来说出问题的so对应的带symbols的so都在out/target/product/&lt;model_name&gt;/symbols/system/lib/下面，而对于常见的使用AndroidStudio开发的单个应用来说，其对应的带symbols的在&lt;PROJECT_ROOT&gt;\app\src\main\obj\local\<abi>\下面的so，而不能是\app\src\main\libs\<abi>的，这里面的是不包含symbols信息的，拿这个去分析，输出的结果就是“??:?”。其实这两个so的体积对比也是很明显的的，在我的应用中，前一个带symbols的so的体积为7M多，而后一个只有2M</abi></abi></li></ul><h3 id="使用objdump获取函数信息"><a href="#使用objdump获取函数信息" class="headerlink" title="使用objdump获取函数信息"></a>使用objdump获取函数信息</h3><p>使用如下命令导出函数表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arm-linux-androideabi-objdump –S obj/local/armeabi/libhello-jni.so &gt; hello.asm</span><br></pre></td></tr></table></figure><p>在生成的asm文件中查找刚刚我们定位的两个关键指针00004fb4和00004f58，搜索后四位<br>可以显示对应的函数名，这样再配合addressline的结果堪称完美，可以得到对应文件的某一行并且知道对应的函数名(其实addr2line就够了)</p><p>参考文章:<br><a href="https://www.oschina.net/question/2241352_213433" target="_blank" rel="noopener">如何定位Android NDK开发中遇到的错误</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;比如在定位systrace卡顿问题时，最后跟到kernel中&lt;br&gt;&lt;img src=&quot;https://github.com/hellolihaizhou/saveImg/blob/master/950ffc39-d5dc-47d7-a57b-3e774cae457d.pn
      
    
    </summary>
    
      <category term="性能" scheme="http://lihaizhou.top/categories/%E6%80%A7%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>一个返回卡顿2s问题的分析解决之路</title>
    <link href="http://lihaizhou.top/2019/12/21/%E4%B8%80%E4%B8%AA%E8%BF%94%E5%9B%9E%E5%8D%A1%E9%A1%BF2s%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E8%A7%A3%E5%86%B3%E4%B9%8B%E8%B7%AF/"/>
    <id>http://lihaizhou.top/2019/12/21/一个返回卡顿2s问题的分析解决之路/</id>
    <published>2019-12-21T09:54:10.000Z</published>
    <updated>2019-12-26T12:10:08.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="性能" scheme="http://lihaizhou.top/categories/%E6%80%A7%E8%83%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>Android-Vsync</title>
    <link href="http://lihaizhou.top/2019/12/15/Android-Vsync/"/>
    <id>http://lihaizhou.top/2019/12/15/Android-Vsync/</id>
    <published>2019-12-15T12:42:18.000Z</published>
    <updated>2019-12-28T07:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文目的在于通过了解Vsync工作原理加深对systrace的理解</p><p>在 Systrace 中我们可以看到，Android 系统在 Vsync 信号的指引下，有条不紊地进行者每一帧的渲染、合成操作，使我们可以享受稳定帧率的画面。</p><p>Vsync作用-Drawing without Sync<br>Step1. Display显示第0帧数据，此时CPU和GPU渲染第1帧画面，而且赶在Display显示下一帧前完成<br>Step2. 因为渲染及时，Display在第0帧显示完成后，也就是第1个VSync后，正常显示第1帧<br>Step3. 由于某些原因，比如CPU资源被占用，系统没有及时地开始处理第2帧，直到第2个VSync快来前才开始处理<br>Step4. 第2个VSync来时，由于第2帧数据还没有准备就绪，显示的还是第1帧。这种情况被Android开发组命名为“Jank”。<br>Step5. 当第2帧数据准备完成后，它并不会马上被显示，而是要等待下一个VSync。</p><p><img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync-1.png?raw=true" alt=""></p><p>这个图中还有个值得注意的地方就是FramebufferSurface,这个代表最终合成的数据<br>可以看到sf合成后这个数值变为了1，display显示后这个数值又变为了0</p><p>让CPU GPU渲染工作都在一个Vsync周期工作，保证绘制的步调和屏幕刷新的步调一致，为此Android引入另外两个软件VSync信号，VSYNC-sf和VSYNC-app，VSYNC-sf用于触发SurfaceFlinger合成VSYNC-app用于触发app 绘制这几个信号可通过systrace观察到<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync-9.png?raw=true" alt=""></p><p><img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync-10.png?raw=true" alt=""></p><p><img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync-11.png?raw=true" alt=""></p><p><img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync-12.png?raw=true" alt=""></p><p>因为 VSYNC 是由硬件产生的，一旦产生了就必须开始干活，不灵活。假设有这么一种需求，我希望在 VSYNC 偏移一段时间以后再干活，那么这个是硬件 VSYNC 提供不了，所以这个时候就必须引入软件模型。而 DispSync 就是为了解决这个需求引入的软件模型。<br>DispSync 类似于一个 PLL（phase lock loop，锁相回路），它通过接收硬件 VSYNC，然后给其他关心硬件 VSYNC 的组件（SurfaceFlinger 和需要渲染的 app）在指定的偏移以后发送软件 VSYNC，并且当误差在可接受的范围内，将会关闭硬件 VSYNC<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync-2-dispsync.png?raw=true" alt="dispsync"><br>SurfaceFlinger将HWComposer收到新的Vsync-timestamp交给DispSync::addResyncSample来决定是否还需要继续输入HW_VSYNC_0</p><p>与此同时,DispSync会根据HWComposer传过来的retire-fence-timestamps来检查SW_VSYNC</p><p>Vsync虚拟化（Vsync App + Vsync SurfaceFlinger）：<br>虽然vsync使得CPU/GPU/Display同步了，但App UI和SurfaceFlinger的工作显然是一个流水线的模型。即对于一帧内容，先等App UI画完了，SurfaceFlinger再出场对其进行合并渲染后放入framebuffer，最后整到屏幕上。<br>而现有的VSync模型是让大家一起开始干活，这样对于同一帧内容，第一个VSync信号时App UI的数据开始准备，第二个VSync信号SurfaceFlinger工作，第三个VSync信号时用户看到Display内容，这样就两个VSync period(每个16ms)过去了，影响用户体验。<br>解决思路：SurfaceFlinger在App UI准备好数据后及时开工做合成。</p><p>Android 4.4(KitKat)引入了VSync的虚拟化，即把硬件的VSync信号先同步到一个本地VSync模型中，再从中一分为二，引出两条VSync时间与之有固定偏移的线程。示意图如下：<br>  <img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync-3.png?raw=true" alt=""></p><p>第一阶段：<br>App 在收到 Vsync-App 的时候，在主线程进行 measure、layout、draw(构建 DisplayList , 里面包含 OpenGL 渲染需要的命令及数据) 。这里对应的 Systrace 中的主线程 doFrame 操作<br>第二阶段：<br>CPU 将数据上传（共享或者拷贝）给 GPU,　这里 ARM 设备 内存一般是 GPU 和 CPU 共享内存。这里对应的 Systrace 中的渲染线程的 flush drawing commands 操作<br>第三阶段：<br>通知 GPU 渲染，真机一般不会阻塞等待 GPU 渲染结束，CPU 通知结束后就返回继续执行其他任务，使用 Fence 机制辅助 GPU CPU 进行同步操作<br>第四 阶段：<br>swapBuffers，并通知 SurfaceFlinger 图层合成。这里对应的 Systrace 中的渲染线程的 eglSwapBuffersWithDamageKHR 操作<br>第五阶段：<br>SurfaceFlinger开始合成图层，如果之前提交的GPU渲染任务没结束，则等待GPU渲染完成，再合成（Fence机制），合成依然是依赖GPU，不过这就是下一个任务了.这里对应的Systrace中的SurfaceFlinger主线程的 onMessageReceived操作（包括 handleTransaction、handleMessageInvalidate、handleMessageRefresh）SurfaceFlinger 在合成的时候，会将一些合成工作委托给Hardware Composer,从而降低来自 OpenGL和GPU的负载，只有Hardware Composer 无法处理的图层，或者指定用OpenGL处理的图层，其他的 图层偶会使用Hardware Composer进行合成<br>第六阶段 ：最终合成好的数据放到屏幕对应的Frame Buffer中，固定刷新的时候就可以看到了</p><p>通过systrace看数据流向<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync-5.jpg?raw=true" alt=""></p><p>上图中主要包含 SurfaceFlinger、App 和 hwc 三个进程，下面就来结合图中的标号，来进一步说明数据的流向</p><ul><li>第一个Vsync信号到来, SurfaceFlinger和App同时收到Vsync信号</li><li>SurfaceFlinger收到Vsync-sf信号，开始进行App上一帧的Buffer的合成</li><li>App收到Vsyc-app信号，开始进行这一帧的Buffer的渲染(对应上面的第一、二、三、四阶段)</li><li>第二个Vsync信号到来 ,SurfaceFlinger和App同时收到Vsync信号，SurfaceFlinger获取App在第二步里面渲染的Buffer,开始合成(对应上面的第五阶段),App收到Vsycn-app 信号，开始新一帧的Buffer的渲染(对应上面的第一、二、三、四阶段)</li></ul><h3 id="Vsync-offset"><a href="#Vsync-offset" class="headerlink" title="Vsync offset"></a>Vsync offset</h3><p>文章最开始有提到，Vsync信号可以由硬件产生，也可以用软件模拟，不过现在基本上都是硬件产生，负责产生硬件Vsync的是HWC,HWC 可生成 VSYNC事件并通过回调将事件发送到 SurfaceFlinge , DispSync将Vsync 生成由Choreographer和SurfaceFlinger使用的VSYNC_APP 和 VSYNC_SF 信号.</p><p><img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync_6_disp_sync_arch.png?raw=true" alt=""></p><p>有一个疑问<br>因此可以看出SW vsync/App vsync 并不是直接由HW vsync产生的，而是由SW vsync产生的，HW vsync作为SW vsync的参考，动态的更新SW vsync里的模型参数，这样让SW vsync能与HW vsync更加的精确吧。</p><p>那么为什么SurfaceFlinger要用SW vsync而不是直接用HW vsync呢？<br>猜想可能是因为HW vsync每隔固定时间由显示屏产生中断，然后传给driver, driver再回调给SurfaceFlinger, 这样经过层层回调，会对performance有影响吧。而SW vsync直接由SurfaceFlinger产生，省略了很多步骤</p><p>这个文章 <a href="https://www.jianshu.com/p/d3e4b1805c92" target="_blank" rel="noopener">https://www.jianshu.com/p/d3e4b1805c92</a> 很棒</p><p>其中 app 和 sf 相对 hw_vsync_0 都有一个偏移,即 phase-app 和 phase-sf，如下图<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync-7.jpg?raw=true" alt=""></p><p>Vsync Offset我们指的是VSYNC_APP和VSYNC_SF之间有一个Offset，即上图中phase-sf - phase-app的值，这个Offset是厂商可以配置的。如果 Offset 不为 0，那么意味着App和SurfaceFlinger主进程不是同时收到Vsync信号，而是间隔Offset(通常在0 - 16.6ms之间)</p><p>目前大部分厂商都没有配置这个Offset，所以App和SurfaceFlinger是同时收到Vsync信号的.</p><p>可以通过Dumpsys SurfaceFlinger来查看对应的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\MI</span><br><span class="line">λ adb shell dumpsys SurfaceFlinger|grep <span class="string">"app phase"</span></span><br><span class="line">   app phase:   <span class="number">8300000</span> ns      SF phase:   <span class="number">8300000</span> ns</span><br></pre></td></tr></table></figure><p>Offset 为 0<br>首先说 Offset 为 0 的情况， 此时 App 和 SurfaceFlinger 是同时收到 Vsync 信号 ， 其对应的 Systrace 图如下</p><p><img src="https://github.com/hellolihaizhou/saveImg/blob/master/vsync-8.jpg?raw=true" alt=""><br>这个图上面也有讲解，这里就不再详细说明，大家只需要看到，App 渲染好的 Buffer，要等到下一个 Vsync-SF 来的时候才会被 SurfaceFlinger 拿去做合成，这个时间大概在 16.6 ms。这时候大家可能会想，如果 App 的 Buffer 渲染结束，Swap 到 BufferQueue 中 ，就触发 SurfaceFlinger 去做合成，那岂不是省了一些时间(0-16.6ms )?</p><p>答案是可行的，这也就引入了 Offset 机制，在这种情况下，App 先收到 Vsync 信号，进行一帧的渲染工作，然后过了 Offset 时间后，SurfaceFlinger 才收到 Vsync 信号开始合成，这时候如果 App 的 Buffer 已经 Ready 了，那么 SurfaceFlinger 这一次合成就可以包含 App 这一帧，用户也会早一点看到。</p><p>Offset 的优缺点</p><ul><li><p>Offset 的一个比较难以确定的点就在与 Offset 的时间该如何设置，这也是众多厂商默认都不进行配置 Offset 的一个原因，其优缺点是动态的，与机型的性能和使用场景有很大的关系</p></li><li><p>如果 Offset 配置过短，那么可能 App 收到 Vsync-App 后还没有渲染完成，SurfaceFlinger 就收到 Vsync-SF 开始合成，那么此时如果 App 的 BufferQueue 中没有之前累积的 Buffer，那么 SurfaceFlinger 这次合成就不会有 App 的东西在里面，需要等到下一个 Vsync-SF 才能合成这次 App 的内容，时间相当于变成了 Vsync 周期+Offset，而不是我们期待的 Offset<br>如果 Offset 配置过长，就起不到作用了</p></li></ul><h3 id="HW-Vsync"><a href="#HW-Vsync" class="headerlink" title="HW_Vsync"></a>HW_Vsync</h3><p>这里需要说明的是，不是每次申请 Vsync 都会由硬件产生 Vsync，只有此次请求 vsync 的时间距离上次合成时间大于 500ms，才会通知 hwc，请求 HW_VSYNC</p><p>以桌面滑动为例，看 SurfaceFlinger 的进程 Trace 可以看到 HW_VSYNC 的状态</p><p>HW_VSYNC 主要是利用最近的硬件 VSYNC 来做预测,最少要 3 个,最多是 32 个,实际上要用几个则不一定, DispSync 拿到 6 个 VSYNC 后就会计算出 SW_VSYNC,只要收到的 Present Fence 没有超过误差,硬件 VSYNC 就会关掉,不然会继续接收硬件 VSYNC 计算 SW_VSYNC 的值,直到误差小于 threshold.</p><p>下面以AndroidQ上代码为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">frameworks/<span class="keyword">native</span>/services/surfaceflinger/SurfaceFlinger.cpp</span><br><span class="line"><span class="keyword">void</span> SurfaceFlinger::onVsyncReceived(int32_t sequenceId, hwc2_display_t hwcDisplayId,</span><br><span class="line">                                     int64_t timestamp) &#123;</span><br><span class="line">    ATRACE_NAME(<span class="string">"SF onVsync"</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    bool periodFlushed = <span class="keyword">false</span>;</span><br><span class="line">    mScheduler-&gt;addResyncSample(timestamp, &amp;periodFlushed);</span><br><span class="line">    <span class="keyword">if</span> (periodFlushed) &#123;</span><br><span class="line">        mVsyncModulator.onRefreshRateChangeCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Scheduler::addResyncSample(<span class="keyword">const</span> nsecs_t timestamp, bool* periodFlushed) &#123;</span><br><span class="line">    bool needsHwVsync = <span class="keyword">false</span>;</span><br><span class="line">    *periodFlushed = <span class="keyword">false</span>;</span><br><span class="line">    &#123; <span class="comment">// Scope for the lock</span></span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; lock(mHWVsyncLock);</span><br><span class="line">        <span class="keyword">if</span> (mPrimaryHWVsyncEnabled) &#123;</span><br><span class="line"><span class="comment">//addResyncSample会根据现有的硬件Vsync样本计算SW Vsync模型，如果误差已经在可接受范围内</span></span><br><span class="line">   <span class="comment">// 即认为不再需要硬件Vsync样本了，就得关闭硬件Vsync</span></span><br><span class="line">   <span class="comment">// 反之，如果误差还比较大，这里还需要继续加入硬件Vsync样本继续计算SW Vsync模型 </span></span><br><span class="line">            needsHwVsync = mPrimaryDispSync-&gt;addResyncSample(timestamp, periodFlushed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// enableHardwareVsync/disableHardwareVsync都是通过EventControlThread去控制硬件Vsync开关</span></span><br><span class="line">    <span class="keyword">if</span> (needsHwVsync) &#123;</span><br><span class="line">        enableHardwareVsync();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        disableHardwareVsync(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面重点看硬件Vsync样本是如何计算SW Vsync模型，这也是最有趣的地方</p><h3 id="addResyncSample"><a href="#addResyncSample" class="headerlink" title="addResyncSample"></a>addResyncSample</h3><p>frameworks/native/services/surfaceflinger/Scheduler/DispSync.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">enum</span> &#123; MAX_RESYNC_SAMPLES = <span class="number">32</span> &#125;;</span><br><span class="line">    <span class="keyword">enum</span> &#123; MIN_RESYNC_SAMPLES_FOR_UPDATE = <span class="number">6</span> &#125;;</span><br><span class="line">    <span class="keyword">enum</span> &#123; NUM_PRESENT_SAMPLES = <span class="number">8</span> &#125;;</span><br><span class="line">    <span class="keyword">enum</span> &#123; MAX_RESYNC_SAMPLES_WITHOUT_PRESENT = <span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">enum</span> &#123; ACCEPTABLE_ZERO_ERR_SAMPLES_COUNT = <span class="number">64</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> DispSync::addResyncSample(<span class="keyword">nsecs_t</span> timestamp, <span class="keyword">bool</span>* periodFlushed) &#123;</span><br><span class="line">    Mutex::<span class="function">Autolock <span class="title">lock</span><span class="params">(mMutex)</span></span>;</span><br><span class="line"></span><br><span class="line">    ALOGV(<span class="string">"[%s] addResyncSample(%"</span> PRId64 <span class="string">")"</span>, mName, ns2us(timestamp));</span><br><span class="line"></span><br><span class="line">    *periodFlushed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">size_t</span> idx = (mFirstResyncSample + mNumResyncSamples) % MAX_RESYNC_SAMPLES;</span><br><span class="line"><span class="comment">//// mResyncSamples 记录每个硬件vsync样本的时间戳，在计算sw vsync的模型时有用</span></span><br><span class="line">    mResyncSamples[idx] = timestamp;</span><br><span class="line">    <span class="keyword">if</span> (mNumResyncSamples == <span class="number">0</span>) &#123;</span><br><span class="line">        mPhase = <span class="number">0</span>;</span><br><span class="line">        ALOGV(<span class="string">"[%s] First resync sample: mPeriod = %"</span> PRId64 <span class="string">", mPhase = 0, "</span></span><br><span class="line">              <span class="string">"mReferenceTime = %"</span> PRId64,</span><br><span class="line">              mName, ns2us(mPeriod), ns2us(timestamp));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPendingPeriod &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// mNumResyncSamples &gt; 0, so priorIdx won't overflow</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">size_t</span> priorIdx = (mFirstResyncSample + mNumResyncSamples - <span class="number">1</span>) % MAX_RESYNC_SAMPLES;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">nsecs_t</span> lastTimestamp = mResyncSamples[priorIdx];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">nsecs_t</span> observedVsync = <span class="built_in">std</span>::<span class="built_in">abs</span>(timestamp - lastTimestamp);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">std</span>::<span class="built_in">abs</span>(observedVsync - mPendingPeriod) &lt;= <span class="built_in">std</span>::<span class="built_in">abs</span>(observedVsync - mIntendedPeriod)) &#123;</span><br><span class="line">            <span class="comment">// Either the observed vsync is closer to the pending period, (and</span></span><br><span class="line">            <span class="comment">// thus we detected a period change), or the period change will</span></span><br><span class="line">            <span class="comment">// no-op. In either case, reset the model and flush the pending</span></span><br><span class="line">            <span class="comment">// period.</span></span><br><span class="line">            resetLocked();</span><br><span class="line">            mIntendedPeriod = mPendingPeriod;</span><br><span class="line">            mPeriod = mPendingPeriod;</span><br><span class="line">            mPendingPeriod = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (mTraceDetailedInfo) &#123;</span><br><span class="line">                ATRACE_INT(<span class="string">"DispSync:PendingPeriod"</span>, mPendingPeriod);</span><br><span class="line">                ATRACE_INT(<span class="string">"DispSync:IntendedPeriod"</span>, mIntendedPeriod);</span><br><span class="line">            &#125;</span><br><span class="line">            *periodFlushed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 始终用最新的硬件时间戳timestamp来更新mReferenceTime.</span></span><br><span class="line">    mReferenceTime = timestamp;</span><br><span class="line">    mThread-&gt;updateModel(mPeriod, mPhase, mReferenceTime);</span><br><span class="line"><span class="comment">//更新 mNumResyncSamples 或 mFirstResyncSample的值</span></span><br><span class="line">    <span class="keyword">if</span> (mNumResyncSamples &lt; MAX_RESYNC_SAMPLES) &#123;</span><br><span class="line">        mNumResyncSamples++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mFirstResyncSample = (mFirstResyncSample + <span class="number">1</span>) % MAX_RESYNC_SAMPLES;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始计算更新SW vsync 模型</span></span><br><span class="line">    updateModelLocked();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mNumResyncSamplesSincePresent++ &gt; MAX_RESYNC_SAMPLES_WITHOUT_PRESENT) &#123;</span><br><span class="line">        resetErrorLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mIgnorePresentFences) &#123;</span><br><span class="line">        <span class="comment">// If we're ignoring the present fences we have no way to know whether</span></span><br><span class="line">        <span class="comment">// or not we're synchronized with the HW vsyncs, so we just request</span></span><br><span class="line">        <span class="comment">// that the HW vsync events be turned on.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check against kErrorThreshold / 2 to add some hysteresis before having to</span></span><br><span class="line">    <span class="comment">// resync again</span></span><br><span class="line"><span class="comment">// 如果模型更新了，并且产生的错误小于 kErrorThreshold/2 这个值 (这个值是错误容忍度)，那么   modelLocked就被置为true, 即模型被锁定，模型被锁定的含义是</span></span><br><span class="line">    <span class="comment">// 现在SW vsync工作的很好，暂时不需要硬件Vsync来进行校正了，最后会将硬件Vsync给disable掉</span></span><br><span class="line">    <span class="keyword">bool</span> modelLocked = mModelUpdated &amp;&amp; mError &lt; (kErrorThreshold / <span class="number">2</span>) &amp;&amp; mPendingPeriod == <span class="number">0</span>;</span><br><span class="line">    ALOGV(<span class="string">"[%s] addResyncSample returning %s"</span>, mName, modelLocked ? <span class="string">"locked"</span> : <span class="string">"unlocked"</span>);</span><br><span class="line">    <span class="keyword">if</span> (modelLocked) &#123;</span><br><span class="line">        *periodFlushed = <span class="literal">true</span>;</span><br><span class="line">        mThread-&gt;lockModel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !modelLocked;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">关于这个值看下定义的地方注释</span><br><span class="line"><span class="comment">// This is the threshold used to determine when hardware vsync events are</span></span><br><span class="line"><span class="comment">// needed to re-synchronize the software vsync model with the hardware.  The</span></span><br><span class="line"><span class="comment">// error metric used is the mean of the squared difference between each</span></span><br><span class="line"><span class="comment">// present time and the nearest software-predicted vsync.</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">nsecs_t</span> kErrorThreshold = <span class="number">160000000000</span>; <span class="comment">// 400 usec squared</span></span><br></pre></td></tr></table></figure></p><p>这里核心是updateModelLocked()即如何依据硬件vsync来校准的，目前看的有点云里雾里<br>有待进一步厘清</p><h3 id="enableHardwareVsync"><a href="#enableHardwareVsync" class="headerlink" title="enableHardwareVsync"></a>enableHardwareVsync</h3><p>frameworks/native/services/surfaceflinger/Scheduler/Scheduler.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Scheduler::enableHardwareVsync() &#123;</span><br><span class="line">    <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lock(mHWVsyncLock);</span><br><span class="line">    <span class="keyword">if</span> (!mPrimaryHWVsyncEnabled &amp;&amp; mHWVsyncAvailable) &#123;</span><br><span class="line">        mPrimaryDispSync-&gt;beginResync();</span><br><span class="line"><span class="comment">//调用EventControlThread去开启硬件vsync</span></span><br><span class="line">        mEventControlThread-&gt;setVsyncEnabled(<span class="literal">true</span>);</span><br><span class="line">        mPrimaryHWVsyncEnabled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考文章<br><a href="https://source.android.com/devices/graphics/implement-vsync" target="_blank" rel="noopener">谷歌VSYNC介绍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文目的在于通过了解Vsync工作原理加深对systrace的理解&lt;/p&gt;
&lt;p&gt;在 Systrace 中我们可以看到，Android 系统在 Vsync 信号的指引下，有条不紊地进行者每一帧的渲染、合成操作，使我们可以享受稳定帧率的画面。&lt;/p&gt;
&lt;p&gt;Vsync作用-D
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android-丢帧分析</title>
    <link href="http://lihaizhou.top/2019/12/15/Android-%E4%B8%A2%E5%B8%A7%E5%88%86%E6%9E%90/"/>
    <id>http://lihaizhou.top/2019/12/15/Android-丢帧分析/</id>
    <published>2019-12-15T07:39:19.000Z</published>
    <updated>2019-12-28T07:02:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>用户日常使用手机过程中慢或者卡顿统一归结为丢帧问题，简单总结下：</p><p>1 内存不足<br>2 app使用的绘制方式区别<br>3 app使用的编译方式区别<br>4 app自身问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\MI</span><br><span class="line">λ adb shell cat /proc/meminfo</span><br><span class="line">MemTotal:        <span class="number">5871128</span> kB</span><br><span class="line">MemFree:         <span class="number">1215492</span> kB</span><br><span class="line">MemAvailable:    <span class="number">3631296</span> kB</span><br><span class="line">Buffers:           <span class="number">91956</span> kB</span><br><span class="line">Cached:          <span class="number">2432140</span> kB</span><br></pre></td></tr></table></figure><p>比较多的Uninterruptible Sleep，block 在__lock_page_or_retry </p><p>另外proc/meminfo中 可用内存非常少、且swap空间几乎耗尽 、lmk频繁打印等等都能从侧面反映内存偏低</p><p>app使用的绘制方式区别<br>相同app的软件绘制与硬件绘制对比：</p><p>软件绘制：</p><p>硬件加速<br>Android3.0开始支持硬件加速，Android4.0 默认启用硬件加速。但是app还是能主动设置 hardwareAccelerated 来切换两种模式</p><p>硬件绘制就是将CPU不擅长的图形计算转换成GPU专用指令，由GPU完成。</p><p>优点：</p><p>1）显著提升UI绘速度</p><p>2） 更新UI只重绘脏区域，提升刷新速度</p><p>缺点：</p><p>内存和电量消耗会比软件绘制大</p><p>3 app使用的编译方式区别<br>留意是否有编译方式的区别：</p><p>解释模式编译.dex文件肯定比直接执行.oat文件要来的慢</p><p>4 app自身问题<br>视图太复杂层级太深、主线程有耗时方法</p><p>DrawFrame过程很长，且基本是出于running状态时，可能视图过于复杂</p><p>主线程方法耗时的话，那需要通过加trace Label缩小范围，然后利用traceView对具体方法进行耗时分析</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用户日常使用手机过程中慢或者卡顿统一归结为丢帧问题，简单总结下：&lt;/p&gt;
&lt;p&gt;1 内存不足&lt;br&gt;2 app使用的绘制方式区别&lt;br&gt;3 app使用的编译方式区别&lt;br&gt;4 app自身问题&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android input系统</title>
    <link href="http://lihaizhou.top/2019/12/15/Android%20input%E7%B3%BB%E7%BB%9F/"/>
    <id>http://lihaizhou.top/2019/12/15/Android input系统/</id>
    <published>2019-12-15T05:31:51.000Z</published>
    <updated>2019-12-28T07:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>一次input的耗时时间分布</p><ul><li>T1 表示 硬件中断的时间</li><li>T2 表示 InputReader 从 /dev/input/xxx 读出事件的时间</li><li>T3 表示 InputDispatcher 向 app 进程发送事件的时间</li><li>T4 表示 app 主线程开始处理输入事件的时间</li><li>T5 表示 app 主线程完成处理输入事件的时间<br>一次用户输入事件的传递过程可以简化为: 硬件 -&gt; kernel -&gt; system_server -&gt; app</li></ul><p>system_server 耗时: T3 - T2<br>frameworks/native/libs/input/InputTransport.cpp<br>应用处理耗时: T5 - T4<br>frameworks/base / core/java/android/view/InputEventReceiver.java</p><h3 id="代码分布"><a href="#代码分布" class="headerlink" title="代码分布"></a>代码分布</h3><p>frameworks/native/services/inputflinger/</p><ul><li>InputDispatcher.cpp</li><li>InputReader.cpp</li><li>InputManager.cpp</li><li>EventHub.cpp</li><li>InputListener.cpp</li></ul><p>frameworks/native/libs/input/</p><ul><li>InputTransport.cpp</li><li>Input.cpp</li><li>InputDevice.cpp</li><li>Keyboard.cpp</li><li>KeyCharacterMap.cpp</li><li>IInputFlinger.cpp</li></ul><p>frameworks/base/services/core/</p><ul><li>java/com/android/server/input/InputManagerService.java</li><li>jni/com_android_server_input_InputManagerService.cpp</li></ul><p>Input模块的主要组成：</p><ul><li>Native层的InputReader负责从EventHub取出事件并处理，再交给InputDispatcher；</li><li>Native层的InputDispatcher接收来自InputReader的输入事件，并记录WMS的窗口信息，用于派发事件到合适的窗口；</li><li>Java层的InputManagerService跟WMS交互，WMS记录所有窗口信息，并同步更新到IMS，为InputDispatcher正确派发事件到ViewRootImpl提供保障</li></ul><p><img src="https://github.com/hellolihaizhou/saveImg/blob/master/input(1" alt="input事件流转路线">-Input%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86.png?raw=true)</p><p>1、输入硬件<br>说白了就是任何接受外界刺激，然后将刺激转换为电信号（例如机械能，使得电路导通后产生电信号）的设备，然后向CPU发出硬件中断，然后CPU查找操作系统的中断向量表中相对应的中断编号，调用操作系统的相应的代码段，此处如果有对应的驱动程序的话，操作系统会调用驱动程序对输入设备产生的电信号进行解析和转换成标准的linux内核规定的事件信息结构。</p><p>2、输入设备驱动<br>在linux内核层，处理硬件电信号，并转换成linux内核标准事件信息结构。然后linux会将这些事件信息写入/dev/input/下对应的虚拟设备中。</p><p>3、/dev/input<br>linux写入输入事件的位置，被linux虚拟化成虚拟输入设备文件（字符设备）。</p><p>4、EventHub<br>安卓的事件核心、负责从linux虚拟化输入设备中获取到所有事件。</p><p>framework/native/services/inputflinger/EventHub.h</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一次input的耗时时间分布&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T1 表示 硬件中断的时间&lt;/li&gt;
&lt;li&gt;T2 表示 InputReader 从 /dev/input/xxx 读出事件的时间&lt;/li&gt;
&lt;li&gt;T3 表示 InputDispatcher 向 app 进程发送事件
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>WFD的学习记录笔记</title>
    <link href="http://lihaizhou.top/2019/09/15/WFD%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://lihaizhou.top/2019/09/15/WFD的学习记录笔记/</id>
    <published>2019-09-15T09:18:25.000Z</published>
    <updated>2019-10-15T13:04:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文只讨论miracast，对应的即是设置中投屏的方式，其他视频或者相册中走的是另外一套DLNA协议，不是实时的，还有一些三方应用如腾讯视频爱奇艺是自己搞了一套dlna，DLNA不在本文讨论范围内</p><h1 id="WFD扫盲"><a href="#WFD扫盲" class="headerlink" title="WFD扫盲"></a>WFD扫盲</h1><h2 id="miracast简介"><a href="#miracast简介" class="headerlink" title="miracast简介"></a>miracast简介</h2><h2 id="应用层如何操作WFD？"><a href="#应用层如何操作WFD？" class="headerlink" title="应用层如何操作WFD？"></a>应用层如何操作WFD？</h2><p>连接Miracast设备<br>API<br>import android.hardware.display.DisplayManager;</p><p>mDisplayManager = (DisplayManager) getSystemService(Context.DISPLAY_SERVICE);</p><p>mDisplayManager.connectWifiDisplay(String deviceMacAddress);</p><p>备注<br>（1）隐藏接口，可以通过反射调用。<br>权限<br>android.permission.CONFIGURE_WIFI_DISPLAY</p><p>断开Miracast设备<br>API<br>import android.hardware.display.DisplayManager;</p><p>mDisplayManager = (DisplayManager) getSystemService(Context.DISPLAY_SERVICE);</p><p>mDisplayManager.disconnectWifiDisplay();</p><p>备注<br>（1）隐藏接口，可以通过反射调用<br>扫描Miracast设备<br>API<br>import android.hardware.display.DisplayManager;</p><p>mDisplayManager = (DisplayManager) getSystemService(Context.DISPLAY_SERVICE);</p><p>mDisplayManager.startWifiDisplayScan();</p><p>备注<br>（1）隐藏接口，可以通过反射调用。<br>权限<br>android.permission.CONFIGURE_WIFI_DISPLAY<br>举个milink中的使用例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * scan wifi display while we can connect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startWifiDisplayScan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mDisplayManager) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ReflectUtil.callObjectMethod(mDisplayManager, <span class="string">"startWifiDisplayScan"</span>) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用的是反射调用</p><h2 id="芯片商在谷歌基础上的定制化"><a href="#芯片商在谷歌基础上的定制化" class="headerlink" title="芯片商在谷歌基础上的定制化"></a>芯片商在谷歌基础上的定制化</h2><h2 id="高通WFD"><a href="#高通WFD" class="headerlink" title="高通WFD"></a>高通WFD</h2><p>With Android JB MR1, Google released a WFD solution called Remote Display.<br> Google WFD supports AVC, LPCM, and AAC codecs along with HDCP encryption, but lacks support for content protection. </p><p> It is available to applications as an external WFD using Presentation, MediaRouter, and DisplayManager APIs. </p><p> When compared to the QTI-based Miracast solution, it lacks content protection support and has low performance and higher power consumption numbers. </p><p> QTI created a wrapper to launch the QTI-based Miracast solution using Android APIs; this provides an enhanced Miracast solution to third-party vendors and OEMs who would like to use the Presentation API for Miracast</p><h2 id="WFD的应用场景"><a href="#WFD的应用场景" class="headerlink" title="WFD的应用场景"></a>WFD的应用场景</h2><h1 id="高通WFD代码结构"><a href="#高通WFD代码结构" class="headerlink" title="高通WFD代码结构"></a>高通WFD代码结构</h1><p>SessionManagerService<br>vendor/qcom/proprietary/commonsys/wfd/wdsm/service/src/com/qualcomm/wfd/service/<br>提供了很多的接口，诸如：</p><h1 id="RTSP协议"><a href="#RTSP协议" class="headerlink" title="RTSP协议"></a>RTSP协议</h1><h1 id="WFD代码连接流程"><a href="#WFD代码连接流程" class="headerlink" title="WFD代码连接流程"></a>WFD代码连接流程</h1><h1 id="M-Message消息"><a href="#M-Message消息" class="headerlink" title="M-Message消息"></a>M-Message消息</h1><h1 id="P2P以及RTSP的的建立"><a href="#P2P以及RTSP的的建立" class="headerlink" title="P2P以及RTSP的的建立"></a>P2P以及RTSP的的建立</h1><h2 id="p2p的建立"><a href="#p2p的建立" class="headerlink" title="p2p的建立"></a>p2p的建立</h2><h2 id="RTSP的建立"><a href="#RTSP的建立" class="headerlink" title="RTSP的建立"></a>RTSP的建立</h2><h1 id="WFD整体架构-source"><a href="#WFD整体架构-source" class="headerlink" title="WFD整体架构(source)"></a>WFD整体架构(source)</h1><h1 id="WFD常见问题的debug策略"><a href="#WFD常见问题的debug策略" class="headerlink" title="WFD常见问题的debug策略"></a>WFD常见问题的debug策略</h1><h2 id="Wifi-Display-Miracast分析一般需要的日志"><a href="#Wifi-Display-Miracast分析一般需要的日志" class="headerlink" title="Wifi-Display/Miracast分析一般需要的日志"></a>Wifi-Display/Miracast分析一般需要的日志</h2><p>前提条件：root版本，因为有些命令如关selinux这些命令需要root权限</p><h3 id="高通平台"><a href="#高通平台" class="headerlink" title="高通平台"></a>高通平台</h3><p>使能所有WFD日志的开关</p><ol><li>Android N 以及更早的版本<br>创建一个文件名为mmosal_logmask.cfg，内容如下<br><start><br>LOGMASK = 6013:63<br>LOGMASK = 6015:63<end></end></start></li></ol><p>这个文件建议保存在本地，后续方便提供给测试或者自己调试</p><p> push mmosal_logmask.cfg这个文件到 /data/ folder 或者 /data/misc/media/ 目录下, 执行如下命令<br> adb root<br> adb remount<br> adb push mmosal_logmask.cfg /data/<br> adb push mmosal_logmask.cfg /data/misc/media/<br> adb shell setenforce 0</p><ol start="2"><li><p>Android O 版本<br>adb shell setprop mmosal.debug.config 6015:63:6013:63</p></li><li><p>Android P 版本<br>adb shell setprop vendor.debug.mmosal.config 6015:63:6013:63</p></li><li><p>Android Q 版本<br>push  mmosal_logmask.cfg这个文件到 /data/ 目录 或者 /data/misc/media/ folder 或者 /data/vendor/，索性都push了<br>adb root<br>adb remount<br>adb push mmosal_logmask.cfg /data/<br>adb push mmosal_logmask.cfg data/misc/media/<br>adb push mmosal_logmask.cfg  /data/vendor/<br>adb shell setenforce 0</p></li></ol><p>打开延迟分析属性来判断延迟值<br>对于 WFD performance 问题, 需要打开延迟分析属性来判断延迟值<br>Android O<br>adb shell setprop persist.debug.wfd.profile 1</p><p>Android P/Q<br>adb shell setprop persist.vendor.debug.wfd.profile 1</p><p>获取 TCP dump，这一步主要用来分析丢包率以及建立RTSP过程中的问题<br>1.adb shell</p><ol start="2"><li>tcpdump -i wlan0 -s 0 -w /data/tcpdump.pcap</li></ol><h3 id="联发科平台"><a href="#联发科平台" class="headerlink" title="联发科平台"></a>联发科平台</h3><p>WFD卡顿延迟问题<br> 1.当发现有延迟或者卡顿，可以看是否有如下LOG：<br>212887 07-05 11:13:53.018936 582 24850 I MtkNetworkSession: [WFD_P][video][dummy=0]ts=7663475,in 7663545,out 7664846,LatencyF 91,send 1300,LatencyT 1392<br>212888 07-05 11:13:53.019069 582 24850 I MtkNetworkSession: [WFD_P][audo][dummy=0]ts=7663476,in 7663546,out 7664846,LatencyF 7,send 1300,LatencyT 1307</p><p>//如下的时间单位都是毫秒<br>LatencyF 91 //编码打包的延迟时间<br>send 1300 //发送的延迟时间<br>LatencyT 1392 //总的延迟</p><p>2.假如send 时间比较长（一般需要平均1000/25FPS = 40毫秒以内才能保证不会卡顿）那么卡顿是正常现象，一般没办法提升，比如网络原因，如下LOG（ link_score小于70），说明是网络信号不好卡顿延迟：<br>39313 07-05 11:13:50.521 <6>[ 7662.347991] (1)[1261:tx_thread][wlan]nicCmdEventQueryStaStatistics:(P2P INFO) link_score=11, rssi=78, rate=81, threshold_cnt=2780,。</6></p><p>3.假如是LatencyF 太长，请帮忙设置如下property并抓LOG复现（需要提供mtklog和netlog）。<br>  adb root<br>  adb shell setenforce 0<br>  //Android O版本以及之前的版本<br>  adb shell setprop mtk.omx.enable.venc.log 1<br>  //Android P版本<br>  adb shell setprop vendor.mtk.omx.enable.venc.log 2</p><h2 id="如何分析丢包率"><a href="#如何分析丢包率" class="headerlink" title="如何分析丢包率"></a>如何分析丢包率</h2><h2 id="miracast连接超时问题分析"><a href="#miracast连接超时问题分析" class="headerlink" title="miracast连接超时问题分析"></a>miracast连接超时问题分析</h2><h2 id="sink端显示问题一般处理策略"><a href="#sink端显示问题一般处理策略" class="headerlink" title="sink端显示问题一般处理策略"></a>sink端显示问题一般处理策略</h2><h3 id="播放卡顿的厘清方向-source"><a href="#播放卡顿的厘清方向-source" class="headerlink" title="播放卡顿的厘清方向(source)"></a>播放卡顿的厘清方向(source)</h3><h3 id="播放卡顿的厘清方向-sink"><a href="#播放卡顿的厘清方向-sink" class="headerlink" title="播放卡顿的厘清方向(sink)"></a>播放卡顿的厘清方向(sink)</h3><p>1 在测试之前，需要先在屏蔽室中测试手机的吞吐量，看看是否正常。</p><p>2  在测试之前也要先确保硬件没有问题，比如接收灵敏度，EVM，天线效能等硬件因素要是ok的。</p><p>3  测试时首先选择一个比较干净的环境进行测试。</p><p>4  使用sniffer 设备在全信道上扫描，看看周围AP在各信道上的分布</p><p>5  在测试时，最好是选择比较空闲的信道进行测试，可以这样设置：先设置AP的信道为空闲信道，然后手机连接AP，手机再连接dongle，断开AP，此时WFD的连接就处于空闲信道了。</p><p>6  如果一定要在比较繁忙的信道上测试，首先要在这个信道上使用iperf打吞吐量，如果数据可以稳定在15Mbps以上，就可以进行测试。</p><p>7  测试时，请同时拿对比机进行测试，如果遇到卡顿现象，请换一只手机进行测试，也可以再测试一次此时的吞吐量，看看是否有变。</p><p>8  测试时，可以在空闲的时段进行测试，比如下班后，或者周末的时间等</p><p>若只是SINK端卡顿，通常的原因有：<br>1.mdp做resize和rotate慢<br>2.encoder做视频编码慢<br>3.ANetworksession调用socket接口将已打好包的rtp a\v data发送有延迟<br>4.network wifi环境问题<br>5.SINK端本身拆包解码慢</p><p>逆向分析比较容易快速厘清问题，贵司可以先通过mainlog和netlog快速厘清是否是网络或者SINK端本身问题。<br>首先请通过mtklogger apk，勾选moblie log和net log，然后开始复现问题，抓取分析资料.<br>再通过netlog导出SOURCE发送给SINK端的rtp数据，并通过wireshark将rtp包生成ts文件,直接在PC上查看播放视频（可以用vlc视频播放器直接打开），查看视频播放是否有卡顿现象。<br>若视频本身在PC上播放卡顿，请提交eservice，并附带mtklog（mobile log&amp; net log）等文件；<br>若视频本身在PC上播放不卡顿，则surface-&gt;mdp-&gt;encoder-&gt;ANetworksession\socket这一路正常，推荐贵司做下面测试：<br>1）用对比机测试看是否也有同样问题；<br>2）可以把附件视频ts文件直接通过usb的方式，在TV上播放，若播放卡顿，则是5.SINK端本身拆包解码慢；<br>3）测试当前wifi网络环境，在纯净wifi网络环境下再进行测试。<br>若还没有找到原因，请提交eservice，说明贵司分析现状以及测试实验结果，并附带mtklog（mobile log&amp; net log）等文件。</p><p>通常网络不稳定导致的sink端卡顿会有下面log<br>1)link_score不稳定等于100<br>05-31 14:01:09.326144 1238 2086 D WifiP2pService: link_score=10<br>05-31 14:01:11.329835 1238 2086 D WifiP2pService: link_score=8<br>05-31 14:01:13.331112 1238 2086 D WifiP2pService: link_score=10<br>05-31 14:01:15.332513 1238 2086 D WifiP2pService: link_score=10<br>~<br>05-31 14:02:31.387187 1238 2086 D WifiP2pService: link_score=71<br>05-31 14:02:33.391052 1238 2086 D WifiP2pService: link_score=58<br>05-31 14:02:35.390564 1238 2086 D WifiP2pService: link_score=73<br>05-31 14:02:37.393885 1238 2086 D WifiP2pService: link_score=54</p><p>2)Netowrksession打印出来send cost时间较长<br>05-31 14:01:35.820162 413 10936 I NetworkSession: [WFD_P][audo][dummy=0]ts=13041028 ms,in 13041053 ms,out 13044779 ms, mLatencyF 24 ms,send cost 3725 ms,LatencyT 3750 ms<br>05-31 14:01:35.820302 413 10936 I NetworkSession: [WFD_P][audo][dummy=0]ts=13041049 ms,in 13041054 ms,out 13044779 ms, mLatencyF 4 ms,send cost 3725 ms,LatencyT 3729 ms</p><h3 id="高通平台的花屏问题一般分析方向"><a href="#高通平台的花屏问题一般分析方向" class="headerlink" title="高通平台的花屏问题一般分析方向"></a>高通平台的花屏问题一般分析方向</h3><h3 id="MTK平台的花屏问题一般分析方向"><a href="#MTK平台的花屏问题一般分析方向" class="headerlink" title="MTK平台的花屏问题一般分析方向"></a>MTK平台的花屏问题一般分析方向</h3><p>参见：[FAQ21608] WFD图像花屏问题</p><p>step1: 用wireshark打开netlog，并过滤出RTP包，分析丢包率</p><p>step2: 发现了丢包，那么说明花屏是正常的，假如仍然要分析问题，可以去搜索kernel_log里面的link_score关键字。如果出现如下LOG（ link_score小于70），说明是网络信号不好导致丢帧：<br>39313 07-05 11:13:50.521 <6>[ 7662.347991] (1)[1261:tx_thread][wlan]nicCmdEventQueryStaStatistics:(P2P INFO) link_score=11, rssi=78, rate=81, threshold_cnt=2780,</6></p><p>step3:如果发现没有丢包，但是出现了花屏。可以在如下界面把ts数据dump出来，然后拿PC端的播放器播放</p><p>step4:如果发现播放器播放是OK的，那么说明是TV或者其他显示设备的问题，跟平台无关，亲自行去找TV厂商沟通</p><p>step5:如果发现播放有问题，请帮忙提供mtklog，且需要打开netlog</p><h1 id="WFD几个典型案例"><a href="#WFD几个典型案例" class="headerlink" title="WFD几个典型案例"></a>WFD几个典型案例</h1><p>参考了：</p><p><a href="https://online.mediatek.com/FAQ#/SW/FAQ21609" target="_blank" rel="noopener">https://online.mediatek.com/FAQ#/SW/FAQ21609</a><br><a href="https://online.mediatek.com/FAQ#/SW/FAQ21608" target="_blank" rel="noopener">https://online.mediatek.com/FAQ#/SW/FAQ21608</a><br><a href="https://online.mediatek.com/FAQ#/SW/FAQ08527" target="_blank" rel="noopener">https://online.mediatek.com/FAQ#/SW/FAQ08527</a><br><a href="https://online.mediatek.com/FAQ#/SW/FAQ21602" target="_blank" rel="noopener">https://online.mediatek.com/FAQ#/SW/FAQ21602</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文只讨论miracast，对应的即是设置中投屏的方式，其他视频或者相册中走的是另外一套DLNA协议，不是实时的，还有一些三方应用如腾讯视频爱奇艺是自己搞了一套dlna，DLNA不在本文讨论范围内&lt;/p&gt;
&lt;h1 id=&quot;WFD扫盲&quot;&gt;&lt;a href=&quot;#WFD扫盲&quot; cl
      
    
    </summary>
    
      <category term="WFD" scheme="http://lihaizhou.top/categories/WFD/"/>
    
    
  </entry>
  
  <entry>
    <title>一个SharedPreferences写操作导致的ANR问题分析</title>
    <link href="http://lihaizhou.top/2019/06/23/%E4%B8%80%E4%B8%AASharedPreferences%E5%86%99%E6%93%8D%E4%BD%9C%E5%AF%BC%E8%87%B4%E7%9A%84ANR%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://lihaizhou.top/2019/06/23/一个SharedPreferences写操作导致的ANR问题分析/</id>
    <published>2019-06-23T12:11:32.000Z</published>
    <updated>2019-12-28T07:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>问题现象</code><br>手机连接WIFI后出现设置弹出无响应的弹框<br><code>问题概率</code><br>仅出现一次<br><code>问题平台</code><br>Andorid P  高通平台</p><p><strong>日志分析</strong><br>拿到bugreport，使用chkbugreport解析下(开源工具，将bugreport庞大的日志进行分门别类，并以网页形式展现出来)，打开浏览器看下event日志中的时间点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">06</span><span class="number">-19</span> <span class="number">17</span>:<span class="number">53</span>:<span class="number">42.307</span>  <span class="number">1000</span>  <span class="number">1820</span>  <span class="number">1959</span> I am_anr  : [<span class="number">0</span>,<span class="number">3861</span>,com.android.settings,<span class="number">952745541</span>,Input dispatching timed out (com.android.settings/com.android.settings.MainSettings</span><br></pre></td></tr></table></figure><p>解压后的bugreport中有一份ANR文件，查看其中的trace<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"main"</span> prio=<span class="number">5</span> tid=<span class="number">1</span> Blocked</span><br><span class="line">  | group=<span class="string">"main"</span> sCount=<span class="number">1</span> dsCount=<span class="number">0</span> flags=<span class="number">1</span> obj=<span class="number">0x7923e118</span> self=<span class="number">0x763be14c00</span></span><br><span class="line">  | sysTid=<span class="number">3861</span> nice=<span class="number">-10</span> cgrp=<span class="keyword">default</span> sched=<span class="number">0</span>/<span class="number">0</span> handle=<span class="number">0x76c1e12548</span></span><br><span class="line">  | state=S schedstat=( <span class="number">4685634510</span> <span class="number">1791639950</span> <span class="number">6133</span> ) utm=<span class="number">380</span> stm=<span class="number">88</span> core=<span class="number">3</span> HZ=<span class="number">100</span></span><br><span class="line">  | stack=<span class="number">0x7fe6270000</span><span class="number">-0x7fe6272000</span> stackSize=<span class="number">8</span>MB</span><br><span class="line">  | held mutexes=</span><br><span class="line">  at android.app.QueuedWork.processPendingWork(QueuedWork.java:<span class="number">273</span>)</span><br><span class="line">  - waiting to lock &lt;<span class="number">0x00210110</span>&gt; (a java.lang.Object) held by thread <span class="number">19</span></span><br><span class="line">  at android.app.QueuedWork.waitToFinish(QueuedWork.java:<span class="number">184</span>)</span><br><span class="line">  at android.app.ActivityThread.handleStopActivity(ActivityThread.java:<span class="number">4305</span>)</span><br></pre></td></tr></table></figure></p><p>可以看出主线程在等锁0x00210110，该锁被thread 19持有，这里看堆栈可以看出卡在了waitToFinish上，界面回调了onStop的生命函数，<br>是不是可以理解为当时界面走了onStop准备退出，发现有任务没有完成，需要等待，猜测如此，继续看thread 19</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"queued-work-looper"</span> prio=<span class="number">5</span> tid=<span class="number">19</span> Native</span><br><span class="line">  | group=<span class="string">"main"</span> sCount=<span class="number">1</span> dsCount=<span class="number">0</span> flags=<span class="number">1</span> obj=<span class="number">0x130c0958</span> self=<span class="number">0x762df62800</span></span><br><span class="line">  | sysTid=<span class="number">3892</span> nice=<span class="number">-2</span> cgrp=<span class="keyword">default</span> sched=<span class="number">0</span>/<span class="number">0</span> handle=<span class="number">0x76223ff4f0</span></span><br><span class="line">  | state=D schedstat=( <span class="number">8250990</span> <span class="number">10651510</span> <span class="number">31</span> ) utm=<span class="number">0</span> stm=<span class="number">0</span> core=<span class="number">1</span> HZ=<span class="number">100</span></span><br><span class="line">  | stack=<span class="number">0x76222fc000</span><span class="number">-0x76222fe000</span> stackSize=<span class="number">1041</span>KB</span><br><span class="line">  | held mutexes=</span><br><span class="line">  kernel: (couldn<span class="string">'t read /proc/self/task/3892/stack)</span></span><br><span class="line"><span class="string">  native: #00 pc 000000000007b070  /system/lib64/libc.so (fsync+8)</span></span><br><span class="line"><span class="string">  native: #01 pc 0000000000003670  /system/lib64/libopenjdkjvm.so (JVM_Sync+20)</span></span><br><span class="line"><span class="string">  native: #02 pc 000000000001cd54  /system/lib64/libopenjdk.so (FileDescriptor_sync+40)</span></span><br><span class="line"><span class="string">  at java.io.FileDescriptor.sync(Native method)</span></span><br><span class="line"><span class="string">  at android.os.FileUtils.sync(FileUtils.java:197)</span></span><br><span class="line"><span class="string">  at android.app.SharedPreferencesImpl.writeToFile(SharedPreferencesImpl.java:777)</span></span><br><span class="line"><span class="string">  at android.app.SharedPreferencesImpl.access$900(SharedPreferencesImpl.java:54)</span></span><br><span class="line"><span class="string">  at android.app.SharedPreferencesImpl$2.run(SharedPreferencesImpl.java:642)</span></span><br><span class="line"><span class="string">  - locked &lt;0x08e457c5&gt; (a java.lang.Object)</span></span><br><span class="line"><span class="string">  at android.app.QueuedWork.processPendingWork(QueuedWork.java:286)</span></span><br><span class="line"><span class="string">  - locked &lt;0x00210110&gt; (a java.lang.Object)</span></span><br></pre></td></tr></table></figure><p>这里的堆栈可以看出，当时在做SharedPreference的IO操作，锁的持有对象当时在做processPendingWork，可是为什么Activity的onStop要等SharedPreference写完呢？</p><p>再来看下主线程中的堆栈</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at android.app.QueuedWork.waitToFinish(QueuedWork.java:<span class="number">184</span>)</span><br><span class="line">at android.app.ActivityThread.handleStopActivity(ActivityThread.java:<span class="number">4305</span>)</span><br></pre></td></tr></table></figure><p>看下ActivityThread.java中的handleStopActivity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleStopActivity</span><span class="params">(IBinder token, <span class="keyword">boolean</span> show, <span class="keyword">int</span> configChanges,</span></span></span><br><span class="line"><span class="function"><span class="params">            PendingTransactionActions pendingActions, <span class="keyword">boolean</span> finalStateRequest, String reason)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ActivityClientRecord r = mActivities.get(token);</span><br><span class="line">        r.activity.mConfigChangeFlags |= configChanges;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> StopInfo stopInfo = <span class="keyword">new</span> StopInfo();</span><br><span class="line">        performStopActivityInner(r, stopInfo, show, <span class="keyword">true</span> <span class="comment">/* saveState */</span>, finalStateRequest,</span><br><span class="line">                reason);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (localLOGV) Slog.v(</span><br><span class="line">            TAG, <span class="string">"Finishing stop of "</span> + r + <span class="string">": show="</span> + show</span><br><span class="line">            + <span class="string">" win="</span> + r.window);</span><br><span class="line"></span><br><span class="line">        updateVisibility(r, show);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure any pending writes are now committed.</span></span><br><span class="line">        <span class="keyword">if</span> (!r.isPreHoneycomb()) &#123;</span><br><span class="line">            QueuedWork.waitToFinish();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>重点关注其中的waitToFinish()函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Trigger queued work to be processed immediately. The queued work is processed on a separate</span></span><br><span class="line"><span class="comment">     * thread asynchronous. While doing that run and process all finishers on this thread. The</span></span><br><span class="line"><span class="comment">     * finishers can be implemented in a way to check weather the queued work is finished.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Is called from the Activity base class's onPause(), after BroadcastReceiver's onReceive,</span></span><br><span class="line"><span class="comment">     * after Service command handling, etc. (so async work is never lost)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">waitToFinish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// xxx ADD</span></span><br><span class="line">        <span class="keyword">boolean</span> interrupt = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">boolean</span> hadMessages = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Handler handler = getHandler();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (sLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (handler.hasMessages(QueuedWorkHandler.MSG_RUN)) &#123;</span><br><span class="line">                <span class="comment">// Delayed work will be processed at processPendingWork() below</span></span><br><span class="line">                handler.removeMessages(QueuedWorkHandler.MSG_RUN);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                    hadMessages = <span class="keyword">true</span>;</span><br><span class="line">                    Log.d(LOG_TAG, <span class="string">"waiting"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We should not delay any work as this might delay the finishers</span></span><br><span class="line">            sCanDelay = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskWrites();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// xxx MOD</span></span><br><span class="line">            <span class="comment">// processPendingWork();</span></span><br><span class="line">            interrupt = processPendingWork(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            StrictMode.setThreadPolicy(oldPolicy);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>依据trace，接着看processPendingWork</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">processPendingWork</span><span class="params">(<span class="keyword">boolean</span> fromMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> workNdx = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// if (DEBUG) &#123;</span></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// END</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (sProcessingWork) &#123; <span class="comment">//#273 主线程卡在这里等锁</span></span><br><span class="line">            LinkedList&lt;Runnable&gt; work;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (sLock) &#123;</span><br><span class="line">                work = (LinkedList&lt;Runnable&gt;) sWork.clone();</span><br><span class="line">                sWork.clear();     </span><br><span class="line">            <span class="comment">// Remove all msg-s as all work will be processed now</span></span><br><span class="line">           getHandler().removeMessages(QueuedWorkHandler.MSG_RUN);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (work.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Runnable w : work) &#123;</span><br><span class="line">                    w.run(); <span class="comment">//#286 tid19 一直在运行该处</span></span><br><span class="line">                    .....</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>到这里基本明白了是怎么回事了，主线程在等的SharedPreference的写操作writeToFile完成，如果这个队列中的任务没有完成，SharedPreference就会一直持有这个锁，主线程拿不到这个锁，<br>一直等待，超过五秒后触发ANR，这点在日志中也得到了印证，ANR时间点前后有不少的SharedPreferencesImpl相关的日志输出，往上看大概能看出当时是在做同步数据之类</p><p>其实SharedPreference时不论是apply还是commit都会有出现写入磁盘慢的情况发生，特别是数据量大，或者多线程同时访问同一份xml，又或者连续多次commit，都会有可能造成waitToFinish函数耗时变长。虽然apply是异步执行的，主线程依旧需要等它执行结束。这点其实不好规避，所以尽可能的少使用SharedPreference，特别是可能存在多线程操作同一份数据这种情况，毕竟有了加锁，会可能出现排队的情况。</p><p><code>优化方式</code><br>尽可能传输的数据量轻量<br>尽可能减少commit次数<br>考虑新开线程，但是会有内存开销的存在，如果原本是apply，则在新开的线程改为commit</p><p>其实看公司内部代码，发现公司的framework同事有修改waitToFinish函数中调用的processPendingWork函数内容，增加了记录时间，<br>超过10s直接return false，这是个不错的想法，但是10s对于广播中的情况或许可以cover，对应Activity中超时5秒就ANR的这种情况不能cover</p><p>鉴于该问题只出现一次，不做修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;问题现象&lt;/code&gt;&lt;br&gt;手机连接WIFI后出现设置弹出无响应的弹框&lt;br&gt;&lt;code&gt;问题概率&lt;/code&gt;&lt;br&gt;仅出现一次&lt;br&gt;&lt;code&gt;问题平台&lt;/code&gt;&lt;br&gt;Andorid P  高通平台&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日志分析&lt;/str
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>ANR的常见类型及解决思路</title>
    <link href="http://lihaizhou.top/2019/04/13/ANR%E7%9A%84%E5%B8%B8%E8%A7%81%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
    <id>http://lihaizhou.top/2019/04/13/ANR的常见类型及解决思路/</id>
    <published>2019-04-13T06:46:41.000Z</published>
    <updated>2019-12-28T07:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前年在简书中总结过ANR的一般解决思路，这两天拿出来看了下，觉得有必要重新梳理下，添加些近期遇到的案例<br>本文案例主要源于项目上实际遇到的问题，希望通过梳理之后能够对ANR问题能够快速定位，减少排查时间，同时在遇到棘手问题，能够更加从容。</p><p>先说下三种常见类型<br>1：<code>KeyDispatchTimeout</code>(谷歌default 5s，MTK平台上是8s) –主要类型<br>按键或触摸事件在特定时间内无响应<br>2：<code>BroadcastTimeout</code>(10s)<br>BroadcastReceiver在特定时间内无法处理完成<br>3：<code>ServiceTimeout</code>(20s) –小概率类型<br>Service在特定的时间内无法处理完成</p><p><strong>一般解决步骤</strong></p><p><label style="color:red"><strong>Step1:日志获取&amp;注意事项</strong></label><br>获取日志有一点需要注意，发生ANR后，不要选择结束进程，因为这样AMS会kill掉该进程，有些信息会打印不出来（比如MTK平台上会生成db.XX.ANR，写入到aee_exp文件夹下需要时间），最好是ANR发生后等两三分钟左右，再获取日志</p><p>一般需要data/anr下生成的trace文件以及手机系统日志(一般只需要mobile文件夹)</p><p>以MTK为例，需要如下日志信息：<br>1.aee_exp文件夹(MTK日志目录下，发生ANR会生成)<br>2.MTK目录下的mobilelog文件夹</p><p>aee_exp文件夹一般都是需要的, 对DB进行dump解析，得到ANR发生时场景信息，比如主线程callstack，CPU，memory等，在分析问题根因时很关键</p><p><label style="color:red"><strong>Step2:日志分析一般步骤</strong></label></p><p><label style="color:red">Step2.1 确认时间点(非必需)</label><br>mobilelog文件夹下的events_log,搜索关键字”am_anr”,这一步用于确认ANR时间点，可以搜索到类似如下信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">04</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">00</span>:<span class="number">57.240</span> <span class="number">1267</span> <span class="number">1341</span> I am_anr : [<span class="number">0</span>,<span class="number">6073</span>,com.android.dialer,<span class="number">952745541</span>,Input dispatching timed out</span><br></pre></td></tr></table></figure></p><p>比如上面这行表示ANR类型为<code>Input dispatching timed out</code>, 这种anr的原因的是在viewrootimpl分发事件时，并没有找到focuswindow导致的<br>这一步确认时间点在：10:00:57,进程号:6073</p><p><label style="color:red">Step2.2: 查看ANR时的CPU以及IO率(可选)</label><br>这一步一般来说能基本定位是什么造成了ANR，是IO高还是CPU高，如两者都不是，需进入第三步trace日志分析环节<br>查看mobilelog文件夹下的main_log,搜索关键字<code>&quot;ANR in&quot;</code>,可以看到当时的CPU以及IO率，这一个环节一般来讲主要是看发生ANR时的CPU是否吃紧<br>还有需要注意<code>iowait</code>的占有率，如果占比比较高，则排查的方向要倾向与读取文件操作有关的信息，可以看trace日志中有没有一些读取文件或者操作SD卡的动作</p><p><label style="color:red">Step2.3:分析ANR时的堆栈(必需，最重要的环节)</label><br>ANR发生会在data/anr下生成trace.txt，trace务必要与moile日志匹配，一般来讲直接先看tid=1的堆栈即对应主线程，因为ANR都是主线程执行超时导致</p><p>关于trace日志的分析是ANR问题分析最重要的一个环节，下面将列出平时项目中遇到的ANR案例类型</p><p><strong>ANR常见类型归纳</strong></p><p><label style="color:red">1.主线程Binder调用等待超时</label><br>比如下面的这段<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/1_binder%E7%AD%89%E5%BE%85%E8%B6%85%E6%97%B6.png" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br>很明显当时在做Binder通信，并没有waiting to lock等代表死锁的字样，那么说明这个案例即有可能是在等Binder对端响应，我们知道Binder通信对于发起方来说是阻塞等待响应，只有有了返回结果后才会继续执行下去<br>所以，如上这个案例中需要找到对端是哪个进程，这个进程当时在做什么，这时候就需要找到anr文件夹下另外一个文件binderinfo，这里需要找到与我们发起方进程1461通信的是哪个进程<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/2_binder%E7%AD%89%E5%BE%85%E8%B6%85%E6%97%B6.png" align="left" style=" width:700px;height:300 px"><br><br><br><br><br>可以看到是1666号这个进程，再回到trace中看下，这个进程当时在做什么<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/3_binder%E7%AD%89%E5%BE%85%E8%B6%85%E6%97%B6.png" align="left" style=" width:700px;height:150 px"><br><br><br><br><br><br><br><br><br><br><br><br>可以看到当时对端在做消息的读取，也就是说这里出了问题，很明显这里我们无法修改，我们这个问题在于主线程执行了Binder请求，对端迟迟未返回便很容易出现这个问题，当前做法异步中执行</p><p><label style="color:red">案例二：主线程等待锁</label><br>比如下面这个主线程的CallStack例子，可以看到如下信息：<br><img src="https://raw.githubusercontent.com/hellolihaizhou/saveImg/master/4_%E4%B8%BB%E7%BA%BF%E7%A8%8B%E7%AD%89%E5%BE%85%E9%94%81.png" align="left" style=" width:700px;height:700 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>这个案例中gallery的main thread在执行<code>UploaderChimeraService</code>的onDestroy方法时，需要lock 0x23f65d8b，但这个lock有被upload_periodic GCM Task 拿住，这个thread当前是在做连接网络的动作。从这段信息来看，很有可能与测试时手机连接的网络有关，当时连接的事google的网络，由于墙的原因，无法连接gms的相关server有关</p><p>还有一种情况就是死锁，即形成了头尾相连，互相等待的情况，对于这种问题以及上面案例的解决，一般会尝试将锁改为超时锁，比如lock的trylock，超时会自动释放锁，从而避免一直持有锁的情况发生</p><p><label style="color:red">案例三：卡在IO上</label><br>这种情况一般是和文件操作相关，判断是否是这种情况，可以看mainlog中搜索关键字”ANR in”,看这段信息的最下边，比如下面的信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ANRManager: <span class="number">100</span>% TOTAL: <span class="number">2</span>% user + <span class="number">2.1</span>% kernel + <span class="number">95</span>% iowait + <span class="number">0.1</span>% softirq</span><br></pre></td></tr></table></figure></p><p>很明显，IO占比很高，这个时候就需要查看trace日志看当时的callstack，或者在这段ANR点往前看0~4s，看看当时做的什么文件操作，这种场景有遇到过，常见解决方法是对耗时文件操作采取异步操作</p><p><label style="color:red">案例四：主线程有耗时的动作</label><br>这种情况是ANR类型问题里遇到最多的，比如网络访问，访问数据库之类的，都很容易造成主线程堵塞<br>这里以访问数据库来说，这类型引起的ANR，一般来讲看当时的CPU使用情况会发现user占比较高，看trace中主线程当时的信息会发现会有一些比如query像ContentProvider这种数据库的动作。这种情况下，还可以去看eventlog或者mainlog，在ANR发生前后打印出来的信息，比如访问数据库这种，在eventlog中搜索<code>&quot;am_anr&quot;</code>,然后看前后片段，会发现发生ANR的这个进程有很多数据库相关的信息，说明在发生ANR前后主线程一直在忙于访问数据库，这类型的问题常见于图库，联系人，彩短信应用。<br>所以这种问题的解决，一般考虑的是异步解决，异步解决并不是简单的new一个线程，要根据业务场景以及频率来决定，Android常见的异步AsyncTask, IntentService, 线程池(官方四种或自定义), new thread等，一般来说不建议直接new thread</p><p><label style="color:red">案例五：binder线程池被占满</label><br>系统对每个process最多分配15个binder线程，这个是谷歌的设计（/frameworks/native/libs/binder/ProcessState.cpp)<br>如果另一个process发送太多重复binder请求，那么就会导致接收端binder线程被占满，从而处理不了其它的binder请求<br>这本身就是系统的一个限制，如果应用未按照系统的要求来实现对应逻辑，那么就会造成问题。<br>而系统端是不会（也不建议）通过修改系统行为来兼容应用逻辑，否则更容易造成其它根据系统需求正常编写的应用反而出现不可预料的问题。<br>判断Binder是否用完，可在trace中搜关键字”binder_f”，如搜索到表示已用完，然后就要找log其他地方看是谁一直在消耗binder或者是有死锁发生<br>之前有遇到过压力测试手电筒应用，出现BInder线程池被占满情况，解决的思路就是降低极短时间内大量Binder请求的发生，修复的手法是发送BInder请求的函数中做时间差过滤，限定在500ms内最多执行一次</p><p><label style="color:red">案例六：JE或者NE导致ANR</label><br>这种场景有遇到过，ANR前出现频繁NE，NE所在的进程与ANR的进程有交互，在解决了NE后，ANR也不复存在，对于这类在ANR前有JE或者NE，一般思路是先解决JE或NE，再来看ANR是否还存在，如果还存在，那么就看trace 堆栈，如果不存在，则可以基本判定是JE或NE导致</p><p><label style="color:red">案例七：只存在于Monkey测试下</label><br>有些问题是只有在Monkey环境下才能跑出来，平时的user版本用户使用是不会出现的，这种问题的话就没有改动的意义。<br>比如下面这个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ActivityManager: Not finishing activity because controller resumed</span><br><span class="line"><span class="number">03</span>-<span class="number">18</span> <span class="number">07</span>:<span class="number">25</span>:<span class="number">50.901</span> <span class="number">810</span> <span class="number">870</span> I am_anr : [<span class="number">0</span>,<span class="number">25443</span>,android.process.media,<span class="number">1086897733</span>,<span class="function">Input dispatching timed <span class="title">out</span> <span class="params">(Waiting because no window has focus but there is a focused application that may eventually add a window when it finishes starting up.)</span>]</span></span><br></pre></td></tr></table></figure></p><p>发生这个ANR的原因是Contoller将resume的操作给拦截了, 导致Focus不过去, 从而导致ANR，User版本不会有Contoller, 所以不会出现这个 ANR. 所以这个 ANR 可以忽略.</p><hr><font color="#000000" size="2" face="楷体">春和日丽的周末，午后</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前年在简书中总结过ANR的一般解决思路，这两天拿出来看了下，觉得有必要重新梳理下，添加些近期遇到的案例&lt;br&gt;本文案例主要源于项目上实际遇到的问题，希望通过梳理之后能够对ANR问题能够快速定位，减少排查时间，同时在遇到棘手问题，能够更加从容。&lt;/p&gt;
&lt;p&gt;先说下三种常见类
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Launcher应用的重构之路</title>
    <link href="http://lihaizhou.top/2019/04/12/Launcher%E5%BA%94%E7%94%A8%E7%9A%84%E9%87%8D%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    <id>http://lihaizhou.top/2019/04/12/Launcher应用的重构之路/</id>
    <published>2019-04-12T12:19:11.000Z</published>
    <updated>2019-12-28T07:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>当前需求</strong><br>新项目遵循竞品的Launcher样式设计<br><strong>当前计划</strong><br>重新编写Launcher，并尽可能的弥补老框架的不足</p><p><strong>为什么需要重写Launcher？</strong><br>从样式上来看<br>新版Launcher的UI显示上与老版本差异较大，左右滑动的菜单页变化最大<br>从代码结构上看<br>一. 不符合单一原则:  视图层承担过重的业务数据处理逻辑, 老版本的视图层代码量比较大，主Activity及LauncherService均近两千行，承担的任务过重。其中包含了View的显示逻辑，也有数据处理的逻辑，也有接收广播相关，也有与Fwk的网络接口交互处理的逻辑，还有一些其他应用需要在返回Launcher后对自身的一些判断逻辑等。<br>二. 从整个应用的角度来看，很多界面存在重复的冗余工作，比如判断接收login广播，判断电量，判断是否高温，json报文的解析等，需要抽取公共的行为封装并下沉，尽可能的使上层的处理优雅且简单<br>三. 页面间的耦合严重，彼此相互持有，难以剥离开来，且项目代码中大多缺少注释，理解上存在难度</p><p>综合考虑觉得采取重写或许会合适些</p><p><strong>前期研究</strong><br>当前市面上存在MVP,MVVM等等架构，先对这些架构做简单介绍</p><label style="color:red">一. MVC</label><br>MVC全名是<code>Model View Controller</code>，是模型(<code>model</code>)－视图(<code>view</code>)－控制器(<code>controller</code>)的缩写<br>其中M层处理数据，业务逻辑等；V层处理界面的显示结果；C层起到桥梁的作用，来控制V层和M层通信以此来达到分离视图显示和业务逻辑层<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/1_MVC.png?raw=true" align="left" style=" width:300px;height:100 px"><br><br><br><br><br><br><br><br>视图层(<code>View</code>)<br>一般采用<code>XML</code>文件进行界面的描述<br>控制层(<code>Controller</code>)<br>Android的Controller层的重任通常落在了众多的Activity的肩上，这也是MVC架构的一大弊病<br>模型层(<code>Model</code>)<br>Model是与View无关，与业务相关的，对数据库的操作、对网络等的操作都应该在Model里面处理，对业务计算等操作也是必须放在的该层的。<br>1. View接受用户的交互请求；<br>2. View将请求转交给Controller；<br>3. Controller（用户做的动作比如：update数据，删除指定名字的学生等等）操作Model进行数据更新（根据用户指示，执行底层的数据动作等等）；<br>4. 数据更新之后，Model通知View数据变化；<br>5. View显示更新之后的数据；<br><br>举个例子: Launcher中下拉状态栏显示天气的动作，如果是用<code>MVC</code>的架构，则大概是这样的一个过程:<br>View即状态栏接收到用户下拉的动作，此时C层即Activity向M层请求天气的数据，M层获取天气的方法被调用后，获取天气无论成功或失败，都会将状态通知给监听者这里即C层进行视图更新，这里的通知通过接口回调方式，即C层需要实现天气是否成功的接口比如onError, onSuccess<br><br>弊端:<br>第一，View层和Controller层没有分离，逻辑比较混乱；<br>第二，同样因为 View和 Controller层的耦合，导致Activity或者Fragment很臃肿，代码量很大。如果Activity 中的业务量很大，就像我们的老版Launcher，那么问题就会体现出来，一个Activity的代码行数高达近2000行<br><br><label style="color:red">二.MVP(对MVC的改进版)</label><br><code>Presenter</code>负责逻辑的处理，Model提供数据，View负责显示<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/2_MVP.png?raw=true" align="left" style=" width:300px;height:100 px"><br><br><br><br><br><br><br><br><code>MVP</code>框架由3部分组成：<code>View</code>负责显示，<code>Presenter</code>负责逻辑处理，<code>Model</code>提供数据。在MVP模式里通常包含3个要素（加上View interface是4个）：<br>View:负责绘制UI元素、与用户进行交互(在Android中体现为Activity)<br><code>Model</code>:负责存储、检索、操纵数据(有时也实现一个Model interface用来降低耦合)<br><code>Presenter</code>:作为View与Model交互的中间纽带，处理与用户交互的负责逻辑。<br><code>View interface</code>:需要View实现的接口，View通过View interface与Presenter进行交互，降低耦合，方便进行单元测试<br><br>显而易见的变化时引入了P层，来承担之前C层的工作，而Activity的角色变成了仅仅显示的V层，但是考虑到V层需要和P层交互，所以这里增加了一层接口层View interface<br>概述下来就是:<br>当 View 需要更新数据时，首先去找 Presenter，然后 Presenter 去找 Model 请求数据，Model 获取到数据之后通知 Presenter，Presenter 再通知 View 更新数据，这样 Model 和 View 就不会直接交互了，所有的交互都由 Presenter 进行，Presenter 充当了桥梁的角色。很显然，Presenter 必须同时持有 View 和 Model 的对象的引用，才能在它们之间进行通信<br>好处很明显: view与model完全解耦，它们的通信都要经过presenter<br>弊端也显而易见: presenter会过于复杂庞大 ,  view与presenter交互频繁，耦合度高 , presenter持有activity引用，可能引起内存泄露，需要在Activity退出时做额外处理<br>还以我们的Launcher下拉状态栏为例，如果是用MVP的架构，则大概是这样的一个过程:<br>下拉状态栏动作触发后，调用Presenter中请求天气的接口，将自身传进去，Presenter的请求方法拿到Activity的引用，并在该请求方法中调用Model的请求数据方法，同样将自身传进去，Model层获取数据后无论失败与否都会回调Presenter的处理结果方法，Presenter的处理结果方法会回调View的处理结果方法，这样View层拿到数据并做视图更新<br>这里的实现常用做法一般会将Presenter和Model层的接口抽取出来，写对应的实现类，层次上看的更分明些<br><br><label style="color:red">三.MVVM</label><br><code>MVVM</code>可以算是<code>MVP</code>的升级版，其中的VM是<code>ViewModel</code>的缩写，ViewModel可以理解成是View的数据模型和Presenter的合体，ViewModel和View之间的交互通过Data Binding完成，而Data Binding可以实现双向的交互，这就使得视图和控制层之间的耦合程度进一步降低，关注点分离更为彻底，同时减轻了Activity的压力。<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/3_MVVM.png?raw=true" align="left" style=" width:600px;height:200 px"><br><br><br><br><br><br><br>MVVM架构通过<code>ViewModel</code>隔离了UI层和业务逻辑层，降低程序的耦合度。通过<code>DataBinding</code>实现<code>View</code>和<code>ViewModel</code>之间的绑定。<br>好处:<br>在MVVM中，这些都是通过数据驱动来自动完成的，数据变化后会自动更新UI，UI的改变也能自动反馈到数据层，数据成为主导因素。这样MVVM层在业务逻辑处理中只要关心数据，不需要直接和UI打交道，在业务处理过程中简单方便很多<br>MVVM模式中，数据是独立于UI的<br>在MVVM中，数据发生变化后，我们在工作线程直接修改（在数据是线程安全的情况下）ViewModel的数据即可，不用再考虑要切到主线程更新UI了，这些事情相关框架都帮我们做了<br>关于MVVM不做多介绍，最大的变化无非就是引入了<code>Data Binding</code>，使得数据成为核心驱动<br><br><code>MVC</code> -&gt; <code>MVP</code> -&gt; <code>MVVM</code> 这几个软件设计模式是一步步演化发展的，<code>MVVM</code>是从 <code>MVP</code>的进一步发展与规范，<code>MVP</code> 隔离了<code>MVC</code>中的 M 与 V 的直接联系后，靠 Presenter 来中转，所以使用<code>MVP</code> 时 P 是直接调用 View 的接口来实现对视图的操作的，这个 View 接口的东西一般来说是<code>showData</code>、<code>showprogress</code>等。M 与 V已经隔离了，方便测试了，但代码还不够优雅简洁，所以 <code>MVVM</code>就弥补了这些缺陷。在 MVVM 中就出现的 <code>Data Binding</code> 这个概念，意思就是 View 接口的 showData 这些实现方法可以不写了，通过Data Binding 来自动实现<br><br>老版launcher的可以认为是VC结构，M的数据处理内容多放在C层或者util包中，utils包下还是直接持有引用调用，所以只有两层V和C<br><br>研究下来，觉得如上的三种模式都不太适合我们的项目，理由如下<br>1. MVC到改进版MVP再到后期的MVVM架构，MVC本质上是MC架构，Model与Control层耦合严重，MVP在MVC的基础上增加一层接口解耦，MVVM在MVP的基础上又增加了一层接口，虽耦合性进一步降低，但是存在很多的接口定义导致代码的可读性降低<br>2. 可切入性不强: 不利于团队同事快速加入适应，存在学习成本<br>3. 如上的三种模式本质其实是思想的演变，边界并不是很明显，只要能够很好地解耦就是最好的解决方法<br><br><label style="color:red">综合比较下来，决定根据我们自身业务定制，采用Model+View+事件总线的方式</label><p><strong>Step1: 分层结构</strong><br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/4_%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84.png?raw=true" align="left" style=" width:700px;height:200 px"><br><br><br><br><br><br><br><br><br><br>这是我们Launcher的分层结构<br>业务逻辑层：<br>由业务需求来决定，如二维码展示，通知，SOS，绑定解绑等模块。通用功能抽取成独立于具体业务需求的模块，在模块内部实现通用的业务逻辑，同时对外暴露调用接口，不同的业务只需调用通用模块即可<br>基础框架层：<br>往往是根据功能来划分，可细分为网络支持功能、图片库、日志系统、数据库支持等模块<br>这一层目标是与具体业务解耦并对外提供良好的交互接口，后续的修改尽可能不在原来基础上修改而是采用扩展的方式，遵循开闭原则<br>lib库层：主要是三方的lib库，这些库为上层功能支持，如我们项目当前使用到的Glide,二维码等</p><p><strong>Step2: 分层结构基础上进一步细化</strong><br>为解决层与层以及同层之间的页面通信问题，引入数据处理框架<br>数据处理框架示意图:<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/5_%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%A1%86%E6%9E%B6.png?raw=true" align="left" style=" width:550px;height:600 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p><label style="color:red">Step2.1 为什么要引入数据处理模块？</label></p><ol><li>我们当前的项目中请求服务端数据比较直接，直接调用Fwk的接口，虽然该接口是我们自己实现做在Fwk中并已经做了封装，不过因接收到返回数据的处理逻辑很多都是做在视图层，     且页面间的数据交互是通过相互持有实例调用，页面间耦合严重</li><li>视图层收到报文后直接显示，缺少校验的过程，这部分逻辑若做在视图层，会增加代码量且不符合单一职责</li><li>因联网后有多处需要调用Fwk接口获取网络数据，比较分散，且开多个线程占用内存较多且和UI线程抢占CPU资源，有概率影响UI线程视图的刷新速度</li><li>将处理数据均放置在数据处理模块，便于后续问题定位，数据定位模块细分为网络数据上传，网络数据拉取，持久化数据存储，报文的解析校验等</li></ol><p>数据处理模块在这里起到了一个加工数据并中转的角色，这样视图层和网络层就解耦了，避免了视图层直接和网络层交互，后续所有视图层需要和网络数据交互，视图界面之间的数据交互均通过数据处理模块，这样一来还有个好处就是视图层的代码量将大幅减少，视图页面间的耦合性消除，代码的可读性增</p><p><label style="color:red">Step2.2 数据处理模块承担哪些工作？</label><br>将所有需要和网络交互的数据获取和上传，以及数据库读写，File文件的读写，网络JSON数据的解析提取关键信息等数据处理相关的代码均放置在数据处理模块中</p><p><label style="color:red">一. 并发多任务执行同步操作</label><br>考虑到我们的Launcher需要在联网后做很多同步服务端的操作，比如同步时间，同步功能控制，同步天气等，这些操作实时性要求较高，需要当请求到达时，工作线程已经存在。故采取开启线程池以支持这些同步操作能够并发进行，节省了创建线程的过程，并能保证任务超过核心线程数时能得到复用，一定程度上节省了内存开销，另外一个好处是最大程度上加快联网数据获取，同时线程池默认background优先级，尽可能的保证UI线程的视图绘制优先进行，这样开机后Launcher加载时就不可能出现视图卡顿的现象。<br>线程池的理想大小取决于被提交任务的类型以及机器的处理器数量，线程池的大小需要避免“过大”和“过小”这两种极端情况</p><ol><li>如果线程池过大，那么大量的线程将在相对很少的CPU和内存资源上发生竞争，这不仅会导致更高的内存使用量，而且还可能耗尽资源。</li><li>如果线程池过小，那么将导致许多空闲的处理器无法执行工作，从而降低吞吐率<br>一般来说，核心线程数设置为2N+1(N为核数)</li></ol><p><label style="color:red">为什么要自定义线程池而不采用自带线程池？</label><br>阿里java开发手册中有如下解释:<br>【强制】}新建线程时，必须通过线程池提供（AsyncTask 或者 ThreadPoolExecutor 或者其他形式自定义的线程池），不允许在应用中自行显式创建线程。 说明： 使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解 决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致 消耗完内存或者“过度切换”的问题。另外创建匿名线程不便于后续的资源使用分析， 对性能分析等会造成困扰。<br>【强制】}线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明： Executors 返回的线程池对象的弊端如下：<br><code>FixedThreadPool</code>和 <code>SingleThreadPool</code>： 允 许 的 请 求 队 列 长 度 为 <code>Integer.MAX_VALUE</code>，可能会堆积大量的请求，从而导致 OOM；<br><code>CachedThreadPool</code> 和 <code>ScheduledThreadPool</code>： 允 许 的 创 建 线 程 数 量 为 <code>Integer.MAX_VALUE</code>，可能会创建大量的线程，从而导致 OOM。<br>当前的自定义线程池设置了核心线程数为5，当请求任务到达时，若池中暂无可用线程，则会走到拒绝策略中，将请求存在BlockingQueue中，待有闲置线程后，则继续执行<br>当前封装的线程池暴露出一个接口供Launcher中所有需要异步的地方使用，减少了内存的开销并且统一管理所有异步操作</p><p><label style="color:red">二.  合法性校验</label><br>考虑到任何数据源都无法保证能够返回合法的数据，如果不对数据错误进行容错处理，直接返回给视图层的话，会导致视图层无数据甚至异常。之前存在功能控制收到的报文中存在key对应的value是空的情况，Launcher直接<code>Crash</code>，这样很不友好，所以容错处理还是需要的，在数据处理模块中做数据的校验处理，确保返回给视图层的数据是否有效不知道，起码是合法的，不会出现空数据的情况，以保证视图层不会崩溃或显示异常。</p><p><strong>Step2.3 如何和视图层通信？</strong><br>前期研究<br>当前市面比较流行的是LiveData以及较早的EventBus,Otto等，其中基于LiveData的事件总线最为轻量且是谷歌官方支持，支持感知组件生命周期，且不需要解注册，对内存泄露都做了防控<br>为何不采用市面成熟的事件总线？</p><ol><li>我们的工程是源码工程不是gradle工程，无法通过依赖添加，只有通过jar包引入，弊端是不方便升级</li><li>项目需要向下兼容，低版本上如4.4存在注解不能使用的情况</li><li><code>LiveData</code>需要依赖Android官方<code>Android Architecture Components</code>组件的<code>LiveData</code>，在<code>gradle</code>工程下比较方便，对于我们的源码工程且需要支持多平台，需要引入较多的依赖文件，且存在一定的学习成本</li><li>基于<code>LiveData</code>的事件总线框架成熟且功能强大，功能较多，引入需投入时间成本进行研究，不然后续若出问题排查会无从下手<br><strong>自行设计事件总线的原理</strong><br>对市面主流的<code>eventbus</code>做了研究，考虑到eventbus文件数多达近二十个，考虑后续方便移植且方便定位问题，考虑设计一个满足我们业务需求的简化版事件总线<br>当前设计的事件总线采用类似订阅发布机制，支持一对一以及一对多通信，传递的消息实体支持泛型，核心当前只有两支文件，当前测试下来基本满足需求为方便应用使用，暴露的接口很简单，只有一个发送以及订阅接口，后续根据业务需要再看是否需要扩展</li></ol><p><strong>Step2.4 视图框架设计</strong></p><ol><li>主界面:<br>考虑使用<code>Fragment+ViewPager</code>，<code>Fragment</code>用来承载视图，优势在于轻量，加载速度快<br>菜单页均是<code>RecyclerView</code>或<code>ListView</code>展示数据，考虑到这些ListView均需要<code>ViewHolder</code>来填充视图，需要Adapter来填充数据，如果每个需要ListView的界面都维护各自的一套ViewHolder及Adapter，那么页面逻辑变得臃肿，整个Launcher的代码量也会比较大，所以这里考虑采用如下方式:<br>封装一个Adapter公共处理类，提供多种构造函数，其中有一个type参数，用来标明使用哪个ViewHolder，在Adapter的getView方法中，根据type参数，获取具体的ViewHolder实现<br>经过封装之后，视图层菜单页只需要向Adapter公共处理类传入一个type参数即可得到对应的Adapter，等数据返回到视图层后，再将数据传给Adapter公共处理类，其他什么都不用管，就可以展示列表数据了。这样设计的目的是将公共的行为抽取出来，大幅度减少菜单页的代码量，后续增加菜单页也会变得很简单。</li><li>下拉栏界面<br>分为<code>statusbar</code>以及通知栏，这里的诸多数据均需要调用系统的接口，比如电量，信号格，数据类型，将这些接口单独放在公共模块中，便于其他页面也能调用到</li><li>表盘界面<br>即待机界面，包括长按后进入表盘样式选择界面，这里已经做好了基类封装公共行为的操作，使得表盘样式的扩展变得很容易，只需要继承基类，改下布局文件即可</li></ol><p><strong>Step2.5 代码结构划分</strong><br>当前代码结构划分如下:<br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/6_1_%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.png?raw=true" align="left" style=" width:600px;height:600 px"><br><br><br><br><br><br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/6_2_%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.png?raw=true" align="left" style=" width:600px;height:600 px"><br><br><br><br><br><br><img src="https://github.com/hellolihaizhou/saveImg/blob/master/6_3_%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.png?raw=true" align="left" style=" width:600px;height:100 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p><strong>老项目上上存在的代码问题</strong></p><ol><li>存在不再使用的库文件但是并未移除，对库文件拿来直接用，对于所需功能过大过全，缺少裁剪过程，使用直接调用，与本身应用代码耦合度高，建议二次封装；</li><li>重复性代码较多，如接收心跳，监测电量，熄灭屏等</li><li>变量名和方法名很随意，建议驼峰命名，缺少注释，可读性差，添加类文件和文件夹，后面因为种种原因废弃，由于缺少注释且代码可读性差，导致成为僵尸代码，不利于后续接手人员维护。</li><li>逻辑过于冗长的方法，一大堆的if else，建议拆分优化；</li><li>没有考虑一些边界条件，比如请求失败，没有数据的情况，缺少容错处理；</li><li>代码存在很多容易造成空指针代码，最常见调用equals方法时，未遵循 “常量”.equals(变量) </li><li>static滥用，为内存泄露埋下伏笔</li><li>异步线程的滥用，使用new Thread方式过于简单粗暴，一个线程占用约1M内存，过多的开启会耗用不少内存</li><li>调用大多通过直接new对象方式持有引用，占用内存且强耦合，针对不同场景考虑单例或消息总线通信</li><li>代码美观方面，缺少缩进对齐随意空行，代码不规整</li><li>新加图片未进行压缩，建议png 图片使用 tinypng 或者类似工具压缩处理，减少包体积</li><li>对主线程子线程运行环境存在使用不当，Activity的生命周期方法中，广播的onreceive方法以及普通service中，存在耗时操作</li><li>修改已有稳定方法比较随意，往往塞进一大堆代码，带来隐患，建议进行扩展而不是修改原有设计，或者新增单独接口</li><li>对异步任务被中断情况，缺少资源清理，如AsyncTask或Handler异步更新UI，对任务未完成界面被退出情况，需要在ondestory或onPause中进行任务清理</li><li>过度的try catch，特别是catch了Exception这种基类，导致存在异常都被catch掉，将bug隐蔽起来，导致后期排查比较困难</li><li>界面间随意传递上下文context，为内存泄漏埋下伏笔</li></ol><hr><font color="#000000" size="2" face="楷体">good night！</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;当前需求&lt;/strong&gt;&lt;br&gt;新项目遵循竞品的Launcher样式设计&lt;br&gt;&lt;strong&gt;当前计划&lt;/strong&gt;&lt;br&gt;重新编写Launcher，并尽可能的弥补老框架的不足&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么需要重写Launcher？&lt;/str
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 系统层捕捉所有应用崩溃情况推送到钉钉实践之路</title>
    <link href="http://lihaizhou.top/2019/03/11/Android-%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%8D%95%E6%8D%89%E6%89%80%E6%9C%89%E5%BA%94%E7%94%A8%E5%B4%A9%E6%BA%83%E6%83%85%E5%86%B5%E6%8E%A8%E9%80%81%E5%88%B0%E9%92%89%E9%92%89%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF/"/>
    <id>http://lihaizhou.top/2019/03/11/Android-系统层捕捉所有应用崩溃情况推送到钉钉实践之路/</id>
    <published>2019-03-11T14:19:11.000Z</published>
    <updated>2019-12-28T07:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>项目痛点</strong><br>出现偶现崩溃或<code>ANR</code>，因为没有开启日志开关，后面尝试复现又比较困难，研发同事比较苦恼，无从下手<br>还有一个测试同事抓取日志后还要记录时间点，再上传到JIRA上，研发同事下载日志还需要搜索报错点，整个流程比较费时</p><p><strong>初步想法</strong><br>可不可以将所有<code>ANR</code>,<code>Crash</code>等出错信息的关键日志片段直接传给服务器，在后面的摸索过程中发现钉钉可以提供对外的URL接口，这样的话直接传给钉钉就很方便了，正好平时的办公用的也是这个软件，这样一来就省去了很多的步骤，一步到位</p><p>以下是实做的步骤记录，只是实现了一个初稿，后面还需要不断优化完善</p><p><strong>Step1： 获取钉钉的<code>Webhook</code>地址</strong><br>这个地址后面作为推送的目标地址</p><p>在钉钉中添加机器人接口的步骤参见官网文档<br><a href="https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.XJQ2yZ&amp;treeId=257&amp;articleId=105735&amp;docType=1" target="_blank" rel="noopener">https://open-doc.dingtalk.com/docs/doc.htm?spm=a219a.7629140.0.0.XJQ2yZ&amp;treeId=257&amp;articleId=105735&amp;docType=1</a></p><p>通过以上步骤拿到了Laucnher的Webhook地址，如下:<br><a href="https://oapi.dingtalk.com/robot/send?access_token=a937a86122149aa52a694dd79fae2cdec1c7e448c62bff31471088ec13e941" target="_blank" rel="noopener">https://oapi.dingtalk.com/robot/send?access_token=a937a86122149aa52a694dd79fae2cdec1c7e448c62bff31471088ec13e941</a></p><p><strong>Step2：源码层增加上报机制</strong><br>之所以考虑在源码层中修改，是因为我们需要监测系统中所有应用的出错情况，想到<code>AMS</code>中的<code>Crash</code>弹框，猜想其中一定有相关的写入报错日志的操作</p><p><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/handleApplicationCrash.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br></p><p>这里调用了<code>handleApplicationCrashInner</code>这个函数，接着看这个函数<br><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/handleApplicationCrashInner.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br></p><p>这里追加了一行日志，在应用层添加会造成<code>crash</code>的代码片段，看看这行日志打出的信息</p><p><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/crashLog.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>这里会打出<code>eventtype</code>类型，报错进程，以及关键的堆栈信息，其中的<code>eventtype</code>包括了<code>watchdog</code>、<code>anr</code>、<code>wtf</code>、<code>lowmem</code>、<code>native_crash</code>、<code>crash</code><br>完全满足我们的要求，接下来就是如何把这段发给钉钉了<br>在<code>handleApplicationCrashInner</code>中增加接口<code>reportAllErrorToXunDingTalk</code></p><p><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/AddReportFunction.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br></p><p><code>reportAllErrorToXunDingTalk</code>接口如下：<br><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/report1.png?raw=true" align="left" style=" width:700px;height:300 px"><br><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/report2.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p>这个时候应用端报错的话话，钉钉群会收到消息<br><img src="https://github.com/hellolihaizhou/FrescoDemo/blob/master/dingding.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><hr><font color="#000000" size="2" face="楷体">good night!</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;项目痛点&lt;/strong&gt;&lt;br&gt;出现偶现崩溃或&lt;code&gt;ANR&lt;/code&gt;，因为没有开启日志开关，后面尝试复现又比较困难，研发同事比较苦恼，无从下手&lt;br&gt;还有一个测试同事抓取日志后还要记录时间点，再上传到JIRA上，研发同事下载日志还需要搜索报错点，
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android输入系统系列(4)----分发输入消息</title>
    <link href="http://lihaizhou.top/2018/07/03/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-4-%E5%88%86%E5%8F%91%E8%BE%93%E5%85%A5%E6%B6%88%E6%81%AF/"/>
    <id>http://lihaizhou.top/2018/07/03/Android输入系统系列-4-分发输入消息/</id>
    <published>2018-07-03T15:14:08.000Z</published>
    <updated>2019-12-28T07:02:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面讲过C++中起来的线程循环函数是threadLoop，下面看看InputDispatcherThread这一分发消息的线程的循环体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool InputDispatcherThread::threadLoop() &#123;</span><br><span class="line">    mDispatcher-&gt;dispatchOnce();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只是简单的调用了InputDispatcher的dispatchOnce()<br>接着看这个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputDispatcher::dispatchOnce() &#123;</span><br><span class="line">    nsecs_t nextWakeupTime = LONG_LONG_MAX;</span><br><span class="line">    &#123; <span class="comment">// acquire lock</span></span><br><span class="line">        <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</span><br><span class="line">        mDispatcherIsAliveCondition.broadcast();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Run a dispatch loop if there are no pending commands.</span></span><br><span class="line">        <span class="comment">// The dispatch loop might enqueue commands to run afterwards.</span></span><br><span class="line">        <span class="keyword">if</span> (!haveCommandsLocked()) &#123;</span><br><span class="line">            dispatchOnceInnerLocked(&amp;nextWakeupTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里核心的代码只有一行dispatchOnceInnerLocked，查看haveCommandsLocked()代码得知当mCommandQueue不为空时，<br>便会调用dispatchOnceInnerLocked函数来进行分发消息</p><p>下面接着看dispatchOnceInnerLocked这个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputDispatcher::dispatchOnceInnerLocked(nsecs_t* nextWakeupTime) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="comment">// Ready to start a new event.</span></span><br><span class="line">    <span class="comment">// If we don't already have a pending event, go grab one.</span></span><br><span class="line">    <span class="keyword">if</span> (! mPendingEvent) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mInboundQueue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Inbound queue has at least one entry.</span></span><br><span class="line">            <span class="comment">//队列不为空的话，从队列中取消息</span></span><br><span class="line">            mPendingEvent = mInboundQueue.dequeueAtHead();</span><br><span class="line">            traceInboundQueueLengthLocked();</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//省略部分代码   </span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">switch</span> (mPendingEvent-&gt;type) &#123;</span><br><span class="line">     <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="comment">//消息类型是按键消息</span></span><br><span class="line">    <span class="keyword">case</span> EventEntry::TYPE_KEY: &#123;</span><br><span class="line">        KeyEntry* typedEntry = static_cast&lt;KeyEntry*&gt;(mPendingEvent);</span><br><span class="line">        <span class="keyword">if</span> (isAppSwitchDue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAppSwitchKeyEventLocked(typedEntry)) &#123;</span><br><span class="line">                resetPendingAppSwitchLocked(<span class="keyword">true</span>);</span><br><span class="line">                isAppSwitchDue = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED) &#123;</span><br><span class="line">                dropReason = DROP_REASON_APP_SWITCH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED</span><br><span class="line">                &amp;&amp; isStaleEventLocked(currentTime, typedEntry)) &#123;</span><br><span class="line">            dropReason = DROP_REASON_STALE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dropReason == DROP_REASON_NOT_DROPPED &amp;&amp; mNextUnblockedEvent) &#123;</span><br><span class="line">            dropReason = DROP_REASON_BLOCKED;</span><br><span class="line">        &#125;</span><br><span class="line">        done = dispatchKeyLocked(currentTime, typedEntry, &amp;dropReason, nextWakeupTime);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数主要工作先是从mInboundQueue中取消息，这个mInboundQueue是不是很眼熟，就是上篇文章中讲述的读取消息最后存放到mInboundQueue中，读取到消息后呢，根据消息的类型进行处理，这里还是以Key消息为例，调用到了dispatchKeyLocked这一函数，这里就正式开始了消息分发之旅了</p><p>后面便是层层调用分发，历程还是比较复杂的，这里就不细细分解，绘制了一张流程图如下</p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/07/03/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-4-%E5%88%86%E5%8F%91%E8%BE%93%E5%85%A5%E6%B6%88%E6%81%AF/%E6%B5%81%E7%A8%8B%E5%9B%BE.png?raw=true" align="left" style=" width:300px;height:150 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><hr><font color="#000000" size="2" face="楷体">住所，晚上，汗衫，电脑前，看着世界杯瑞士对阵瑞典队</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面讲过C++中起来的线程循环函数是threadLoop，下面看看InputDispatcherThread这一分发消息的线程的循环体&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android输入系统系列(3)----读取RawEvent</title>
    <link href="http://lihaizhou.top/2018/07/03/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-3-%E8%AF%BB%E5%8F%96RawEvent/"/>
    <id>http://lihaizhou.top/2018/07/03/Android输入系统系列-3-读取RawEvent/</id>
    <published>2018-07-03T14:10:50.000Z</published>
    <updated>2019-12-28T07:02:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前系列文章(1)中提到InputManager中的start方法里调用了ReaderThread-&gt;run，可是我们在InputReader中没有看到run方法<br>这一点和java中的线程运行方式有点区别，C下的线程运行是threadLoop这个方法，这是个虚函数，追溯到父类线程中是有run这个方法<br>层层往下跟就会跟到threadLoop方法，如果threadLoop返回false则会退出循环</p><p>下面看下InputReader的threadLoop方法，可见这里返回true，说明是反复循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">frameworks\<span class="keyword">native</span>\services\inputflinger\InputReader.cpp</span><br><span class="line">bool InputReaderThread::threadLoop() &#123;</span><br><span class="line">    mReader-&gt;loopOnce();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面着重看下这里的loopOnce函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">frameworks\<span class="keyword">native</span>\services\inputflinger\InputReader.cpp</span><br><span class="line"><span class="keyword">void</span> InputReader::loopOnce() &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="comment">//上文中讲过此处的getEvents，作用是获取Event，读取到的Event保存在mEventBuffer中，并返回Event的数量</span></span><br><span class="line">    size_t count = mEventHub-&gt;getEvents(timeoutMillis, mEventBuffer, EVENT_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">// acquire lock</span></span><br><span class="line">        <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</span><br><span class="line">        mReaderIsAliveCondition.broadcast();</span><br><span class="line">        <span class="comment">//判断读取到的event数量，大于0则进入processEventsLocked处理</span></span><br><span class="line">        <span class="keyword">if</span> (count) &#123;</span><br><span class="line">            processEventsLocked(mEventBuffer, count);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125; <span class="comment">// release lock</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send out a message that the describes the changed input devices.</span></span><br><span class="line">    <span class="keyword">if</span> (inputDevicesChanged) &#123;</span><br><span class="line">        mPolicy-&gt;notifyInputDevicesChanged(inputDevices);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flush queued events out to the listener.</span></span><br><span class="line">    <span class="comment">// This must happen outside of the lock because the listener could potentially call</span></span><br><span class="line">    <span class="comment">// back into the InputReader's methods, such as getScanCodeState, or become blocked</span></span><br><span class="line">    <span class="comment">// on another thread similarly waiting to acquire the InputReader lock thereby</span></span><br><span class="line">    <span class="comment">// resulting in a deadlock.  This situation is actually quite plausible because the</span></span><br><span class="line">    <span class="comment">// listener is actually the input dispatcher, which calls into the window manager,</span></span><br><span class="line">    <span class="comment">// which occasionally calls into the input reader.</span></span><br><span class="line">    mQueuedListener-&gt;flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文介绍过EventHub的getEvent的大体流程就是:<br>读取每个设备的数据，形成RawEvent结构后放到readBuffer中，如果没有输入事件，将调用epoll_wait()函数阻塞等待</p><p>所以InputReaderThread线程大部分时间都是在epoll_wait()上等待，如果某个设备上有事件上来，则唤醒线程，从设备中读取数据，读取到的数据形成RawEvent形式，存放在mEventBuffer中，然后调用processEventsLocked进行处理</p><p>下面来看看processEventsLocked这一函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputReader::processEventsLocked(<span class="keyword">const</span> RawEvent* rawEvents, size_t count) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> RawEvent* rawEvent = rawEvents; count;) &#123;</span><br><span class="line">        int32_t type = rawEvent-&gt;type;</span><br><span class="line">        size_t batchSize = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (type &lt; EventHubInterface::FIRST_SYNTHETIC_EVENT) &#123;</span><br><span class="line">            int32_t deviceId = rawEvent-&gt;deviceId;</span><br><span class="line">            <span class="keyword">while</span> (batchSize &lt; count) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rawEvent[batchSize].type &gt;= EventHubInterface::FIRST_SYNTHETIC_EVENT</span><br><span class="line">                        || rawEvent[batchSize].deviceId != deviceId) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                batchSize += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">#if DEBUG_RAW_EVENTS</span><br><span class="line">            ALOGD(<span class="string">"BatchSize: %d Count: %d"</span>, batchSize, count);</span><br><span class="line">#endif</span><br><span class="line">            processEventsForDeviceLocked(deviceId, rawEvent, batchSize);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (rawEvent-&gt;type) &#123;</span><br><span class="line">            <span class="keyword">case</span> EventHubInterface::DEVICE_ADDED:</span><br><span class="line">                addDeviceLocked(rawEvent-&gt;when, rawEvent-&gt;deviceId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> EventHubInterface::DEVICE_REMOVED:</span><br><span class="line">                removeDeviceLocked(rawEvent-&gt;when, rawEvent-&gt;deviceId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> EventHubInterface::FINISHED_DEVICE_SCAN:</span><br><span class="line">                handleConfigurationChangedLocked(rawEvent-&gt;when);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                ALOG_ASSERT(<span class="keyword">false</span>); <span class="comment">// can't happen</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count -= batchSize;</span><br><span class="line">        rawEvent += batchSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的RawEvent分为两类，一类是设备发生变化的Event，包括添加设备，移除设备和扫描设备。另一类是设备自身产生的Event，例如键盘的按键Event，对于这一类Event，会从RawEvent数组中取出连续的同类Event，通过processEventsForDeviceLocked函数进行一并处理，这也是接下来讨论的重点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputReader::processEventsForDeviceLocked(int32_t deviceId,</span><br><span class="line">        <span class="keyword">const</span> RawEvent* rawEvents, size_t count) &#123;</span><br><span class="line">    ssize_t deviceIndex = mDevices.indexOfKey(deviceId);</span><br><span class="line">    <span class="keyword">if</span> (deviceIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGW(<span class="string">"Discarding event for unknown deviceId %d."</span>, deviceId);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InputDevice* device = mDevices.valueAt(deviceIndex);</span><br><span class="line">    <span class="keyword">if</span> (device-&gt;isIgnored()) &#123;</span><br><span class="line">        <span class="comment">//ALOGD("Discarding event for ignored deviceId %d.", deviceId);</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    device-&gt;process(rawEvents, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里根据传进来的deviceId生成InputDevice对象，关键代码在最后一句，这里调用了InputDevice的process函数<br>frameworks\native\services\inputflinger\InputReader.cpp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputDevice::process(<span class="keyword">const</span> RawEvent* rawEvents, size_t count) &#123;</span><br><span class="line">    <span class="comment">// Process all of the events in order for each mapper.</span></span><br><span class="line">    <span class="comment">// We cannot simply ask each mapper to process them in bulk because mappers may</span></span><br><span class="line">    <span class="comment">// have side-effects that must be interleaved.  For example, joystick movement events and</span></span><br><span class="line">    <span class="comment">// gamepad button presses are handled by different mappers but they should be dispatched</span></span><br><span class="line">    <span class="comment">// in the order received.</span></span><br><span class="line">    size_t numMappers = mMappers.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> RawEvent* rawEvent = rawEvents; count--; rawEvent++) &#123;</span><br><span class="line">#if DEBUG_RAW_EVENTS</span><br><span class="line">        ALOGD(<span class="string">"Input event: device=%d type=0x%04x code=0x%04x value=0x%08x when=%lld"</span>,</span><br><span class="line">                rawEvent-&gt;deviceId, rawEvent-&gt;type, rawEvent-&gt;code, rawEvent-&gt;value,</span><br><span class="line">                rawEvent-&gt;when);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mDropUntilNextSync) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rawEvent-&gt;type == EV_SYN &amp;&amp; rawEvent-&gt;code == SYN_REPORT) &#123;</span><br><span class="line">                mDropUntilNextSync = <span class="keyword">false</span>;</span><br><span class="line">#if DEBUG_RAW_EVENTS</span><br><span class="line">                ALOGD(<span class="string">"Recovered from input event buffer overrun."</span>);</span><br><span class="line">#endif</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">#if DEBUG_RAW_EVENTS</span><br><span class="line">                ALOGD(<span class="string">"Dropped input event while waiting for next input sync."</span>);</span><br><span class="line">#endif</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rawEvent-&gt;type == EV_SYN &amp;&amp; rawEvent-&gt;code == SYN_DROPPED) &#123;</span><br><span class="line">            ALOGI(<span class="string">"Detected input event buffer overrun for device %s."</span>, getName().string());</span><br><span class="line">            mDropUntilNextSync = <span class="keyword">true</span>;</span><br><span class="line">            reset(rawEvent-&gt;when);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; numMappers; i++) &#123;</span><br><span class="line">                InputMapper* mapper = mMappers[i];</span><br><span class="line">                mapper-&gt;process(rawEvent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看这个函数开头的一段注解，大意就是根据不同的Input设备消息调用不同的inputMapper,因为Input设备有很多种，所以Inputmapper也有很多种，这个函数的作用是根据不同的Input设备调用对应的InputMapper的process来处理<br>InputReader.cpp这支文件中有很多不同类型的InputMapper，这里例举其中的KeyboardInputMapper进行说明<br>frameworks\native\services\inputflinger\InputReader.cpp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> KeyboardInputMapper::process(<span class="keyword">const</span> RawEvent* rawEvent) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (rawEvent-&gt;type) &#123;</span><br><span class="line">    <span class="keyword">case</span> EV_KEY: &#123; <span class="comment">//按键消息</span></span><br><span class="line">        int32_t scanCode = rawEvent-&gt;code;</span><br><span class="line">        int32_t usageCode = mCurrentHidUsage;</span><br><span class="line">        mCurrentHidUsage = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isKeyboardOrGamepadKey(scanCode)) &#123;</span><br><span class="line">            processKey(rawEvent-&gt;when, rawEvent-&gt;value != <span class="number">0</span>, scanCode, usageCode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看processKey这个函数，这个函数比较长</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> KeyboardInputMapper::processKey(nsecs_t when, bool down, int32_t scanCode,</span><br><span class="line">        int32_t usageCode) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="function">NotifyKeyArgs <span class="title">args</span><span class="params">(when, getDeviceId()</span>, mSource, policyFlags,</span></span><br><span class="line"><span class="function">            down ? AKEY_EVENT_ACTION_DOWN : AKEY_EVENT_ACTION_UP,</span></span><br><span class="line"><span class="function">            AKEY_EVENT_FLAG_FROM_SYSTEM, keyCode, scanCode, keyMetaState, downTime)</span>;</span><br><span class="line">    getListener()-&gt;notifyKey(&amp;args);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数主要工作是将扫描码转换为键盘码，然后调用了getListener()-&gt;notifyKey(&amp;args); </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InputListenerInterface* InputReader::ContextImpl::getListener() &#123;</span><br><span class="line">    <span class="keyword">return</span> mReader-&gt;mQueuedListener.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> QueuedInputListener::notifyKey(<span class="keyword">const</span> NotifyKeyArgs* args) &#123;</span><br><span class="line">    mArgsQueue.push(<span class="keyword">new</span> NotifyKeyArgs(*args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只是将args参数放到了mArgsQueue中</p><p>往上看最开始的InputReader::loopOnce()中mQueuedListener-&gt;flush();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> QueuedInputListener::flush() &#123;</span><br><span class="line">    size_t count = mArgsQueue.size();</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        NotifyArgs* args = mArgsQueue[i];</span><br><span class="line">        args-&gt;notify(mInnerListener);</span><br><span class="line">        delete args;</span><br><span class="line">    &#125;</span><br><span class="line">    mArgsQueue.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和mArgsQueue牵扯上了，这里的flush()函数作用是将mArgsQueue中的NotifyArgs都拿出来，调用它们的notify函数<br>这里还是以Key为例，实际的对象类型是NotifyKeyArgs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NotifyKeyArgs::notify(<span class="keyword">const</span> sp&lt;InputListenerInterface&gt;&amp; listener) <span class="keyword">const</span> &#123;</span><br><span class="line">    listener-&gt;notifyKey(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的listener指针在构造InputReader是作为参数的，追踪源码得知这一listener实际是指向InputDispatcher的指针</p><p>接着看InputDispatcher的notifyKey<br>\frameworks\native\services\inputflinger\InputDispatcher.cpp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InputDispatcher::notifyKey(<span class="keyword">const</span> NotifyKeyArgs* args) &#123;</span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line">    KeyEvent event;</span><br><span class="line">    event.initialize(args-&gt;deviceId, args-&gt;source, args-&gt;action,</span><br><span class="line">            flags, keyCode, args-&gt;scanCode, metaState, <span class="number">0</span>,</span><br><span class="line">            args-&gt;downTime, args-&gt;eventTime);</span><br><span class="line"></span><br><span class="line">    mPolicy-&gt;interceptKeyBeforeQueueing(&amp;event, <span class="comment">/*byref*/</span> policyFlags);</span><br><span class="line"></span><br><span class="line">    bool needWake;</span><br><span class="line">    &#123; <span class="comment">// acquire lock</span></span><br><span class="line">        mLock.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shouldSendKeyToInputFilterLocked(args)) &#123;</span><br><span class="line">            mLock.unlock();</span><br><span class="line"></span><br><span class="line">            policyFlags |= POLICY_FLAG_FILTERED;</span><br><span class="line">            <span class="keyword">if</span> (!mPolicy-&gt;filterInputEvent(&amp;event, policyFlags)) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// event was consumed by the filter</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mLock.lock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int32_t repeatCount = <span class="number">0</span>;</span><br><span class="line">        KeyEntry* newEntry = <span class="keyword">new</span> KeyEntry(args-&gt;eventTime,</span><br><span class="line">                args-&gt;deviceId, args-&gt;source, policyFlags,</span><br><span class="line">                args-&gt;action, flags, keyCode, args-&gt;scanCode,</span><br><span class="line">                metaState, repeatCount, args-&gt;downTime);</span><br><span class="line"></span><br><span class="line">        needWake = enqueueInboundEventLocked(newEntry);</span><br><span class="line">        mLock.unlock();</span><br><span class="line">    &#125; <span class="comment">// release lock</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">        mLooper-&gt;wake();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里利用函数的参数NotifyKeyArgs创建了KeyEntry对象，然后调用函数enqueueInboundEventLocked将创建好的KeyEntry对象加入到队列中，这里顺便看下enqueueInboundEventLocked函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InputDispatcher::enqueueInboundEventLocked(EventEntry* entry) &#123;</span><br><span class="line">    bool needWake = mInboundQueue.isEmpty();</span><br><span class="line">    mInboundQueue.enqueueAtTail(entry);</span><br><span class="line">    traceInboundQueueLengthLocked();</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到创建好的KeyEntry对象是被加入到了mInboundQueue队列中去了</p><p>自此，读取消息流程分析结束</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，汗衫，听着歌，最近有点丧</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前系列文章(1)中提到InputManager中的start方法里调用了ReaderThread-&amp;gt;run，可是我们在InputReader中没有看到run方法&lt;br&gt;这一点和java中的线程运行方式有点区别，C下的线程运行是threadLoop这个方法，这是个虚函
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android输入系统系列(2)----EventHub</title>
    <link href="http://lihaizhou.top/2018/06/12/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-2-EventHub/"/>
    <id>http://lihaizhou.top/2018/06/12/Android输入系统系列-2-EventHub/</id>
    <published>2018-06-12T14:11:02.000Z</published>
    <updated>2019-12-28T07:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>上篇文章中说到eventhub是在NativeInputManager的构造函数new出来</p><p>一台移动设备能产生输入消息的部件很多，包括键盘，触摸屏，按键等。EventHub的作用就是把所有这些设备产生的消息统一成一种格式，再发往上层进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">EventHub::EventHub(<span class="keyword">void</span>) :</span><br><span class="line">        mBuiltInKeyboardId(NO_BUILT_IN_KEYBOARD), mNextDeviceId(<span class="number">1</span>), mControllerNumbers(),</span><br><span class="line">        mOpeningDevices(<span class="number">0</span>), mClosingDevices(<span class="number">0</span>),</span><br><span class="line">        mNeedToSendFinishedDeviceScan(<span class="keyword">false</span>),</span><br><span class="line">        mNeedToReopenDevices(<span class="keyword">false</span>), mNeedToScanDevices(<span class="keyword">true</span>),</span><br><span class="line">        mPendingEventCount(<span class="number">0</span>), mPendingEventIndex(<span class="number">0</span>), mPendingINotify(<span class="keyword">false</span>) &#123;</span><br><span class="line">    acquire_wake_lock(PARTIAL_WAKE_LOCK, WAKE_LOCK_ID);</span><br><span class="line">    <span class="comment">//创建一个epoll句柄</span></span><br><span class="line">    mEpollFd = epoll_create(EPOLL_SIZE_HINT);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(mEpollFd &lt; <span class="number">0</span>, <span class="string">"Could not create epoll instance.  errno=%d"</span>, errno);</span><br><span class="line">    <span class="comment">//创建一个Inotify对象</span></span><br><span class="line">    mINotifyFd = inotify_init();</span><br><span class="line">    <span class="comment">//监视/dev/input目录变化</span></span><br><span class="line">    <span class="keyword">int</span> result = inotify_add_watch(mINotifyFd, DEVICE_PATH, IN_DELETE | IN_CREATE);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(result &lt; <span class="number">0</span>, <span class="string">"Could not register INotify for %s.  errno=%d"</span>,</span><br><span class="line">            DEVICE_PATH, errno);</span><br><span class="line"></span><br><span class="line">    struct epoll_event eventItem;</span><br><span class="line">    memset(&amp;eventItem, <span class="number">0</span>, sizeof(eventItem));</span><br><span class="line">    eventItem.events = EPOLLIN;</span><br><span class="line">    eventItem.data.u32 = EPOLL_ID_INOTIFY;</span><br><span class="line">    <span class="comment">//将inotify的句柄加入到epoll的监测中</span></span><br><span class="line">    result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mINotifyFd, &amp;eventItem);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(result != <span class="number">0</span>, <span class="string">"Could not add INotify to epoll instance.  errno=%d"</span>, errno);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wakeFds[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//创建匿名管道</span></span><br><span class="line">    result = pipe(wakeFds);</span><br><span class="line">    LOG_ALWAYS_FATAL_IF(result != <span class="number">0</span>, <span class="string">"Could not create wake pipe.  errno=%d"</span>, errno);</span><br><span class="line"></span><br><span class="line">    mWakeReadPipeFd = wakeFds[<span class="number">0</span>];</span><br><span class="line">    mWakeWritePipeFd = wakeFds[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//将管道读端和写端设成非阻塞模式</span></span><br><span class="line">    result = fcntl(mWakeReadPipeFd, F_SETFL, O_NONBLOCK);</span><br><span class="line">    result = fcntl(mWakeWritePipeFd, F_SETFL, O_NONBLOCK);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EventHub的构造函数首先创建了epoll句柄，然后创建了一个inotify句柄和一个匿名管道，并将inotify的句柄和管道的”读端”句柄都加入到epoll的监测中。</p><p>这里说明下inotify的作用<br>inotify是Linux中监视目录和文件变化的一种机制，这里监视的是/dev/input，Andorid中的FileObserver就是封装的inotify，可以直接在java中使用</p><p>既然EventHub最终需要将消息传给上层，那么EventHub中的消息又是如何获取的呢？从它的构造函数来看，并没有看到与设备关联的动作。其实是通过EventHub的getEvents()函数  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">size_t EventHub::getEvents(<span class="keyword">int</span> timeoutMillis, RawEvent* buffer, size_t bufferSize) &#123;</span><br><span class="line">       <span class="comment">//省略部分代码</span></span><br><span class="line">       <span class="keyword">if</span> (mNeedToScanDevices) &#123;</span><br><span class="line">            mNeedToScanDevices = <span class="keyword">false</span>;</span><br><span class="line">            scanDevicesLocked();</span><br><span class="line">            mNeedToSendFinishedDeviceScan = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过mNeedToScanDevices变量控制来判断扫描是否完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> EventHub::scanDevicesLocked() &#123;</span><br><span class="line">    status_t res = scanDirLocked(DEVICE_PATH);</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"scan dir failed for %s\n"</span>, DEVICE_PATH);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mDevices.indexOfKey(VIRTUAL_KEYBOARD_ID) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        createVirtualKeyboardLocked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了scanDirLocked函数，接着看这个函数做了什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">status_t EventHub::scanDirLocked(<span class="keyword">const</span> <span class="keyword">char</span> *dirname)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> devname[PATH_MAX];</span><br><span class="line">    <span class="keyword">char</span> *filename;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    struct dirent *de;</span><br><span class="line">    dir = opendir(dirname);</span><br><span class="line">    <span class="keyword">if</span>(dir == NULL)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    strcpy(devname, dirname);</span><br><span class="line">    filename = devname + strlen(devname);</span><br><span class="line">    *filename++ = <span class="string">'/'</span>;</span><br><span class="line">    <span class="keyword">while</span>((de = readdir(dir))) &#123;</span><br><span class="line">        <span class="keyword">if</span>(de-&gt;d_name[<span class="number">0</span>] == <span class="string">'.'</span> &amp;&amp;</span><br><span class="line">          (de-&gt;d_name[<span class="number">1</span>] == <span class="string">'\0'</span> ||</span><br><span class="line">            (de-&gt;d_name[<span class="number">1</span>] == <span class="string">'.'</span> &amp;&amp; de-&gt;d_name[<span class="number">2</span>] == <span class="string">'\0'</span>)))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        strcpy(filename, de-&gt;d_name);</span><br><span class="line">        openDeviceLocked(devname);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的参数dirname对应的是DEVICE_PATH，定义如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *DEVICE_PATH = <span class="string">"/dev/input"</span>;</span><br></pre></td></tr></table></figure></p><p>由此可知，scanDirLocked函数的作用是扫描/dev/input目录</p><p>我手里的手机上/dev/input目录如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/dev/input # ls</span><br><span class="line">event0 event1 event2 event3 event4 event5 event6</span><br></pre></td></tr></table></figure><p>在dev/input下存放的并不是设备，而是event文件，这些event文件对应的设备信息在文件proc/bus/input/devices中可以查到<br>这里贴出其中一个打印片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I: Bus=<span class="number">0019</span> Vendor=<span class="number">2454</span> Product=<span class="number">6500</span> Version=<span class="number">0010</span></span><br><span class="line">N: Name=<span class="string">"mtk-kpd"</span></span><br><span class="line">P: Phys=</span><br><span class="line">S: Sysfs=/devices/platform/<span class="number">10010000</span>.kp/input/input1</span><br><span class="line">U: Uniq=</span><br><span class="line">H: Handlers=gpufreq_ib event1</span><br><span class="line">B: PROP=<span class="number">0</span></span><br><span class="line">B: EV=<span class="number">3</span></span><br><span class="line">B: KEY=<span class="number">140000</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>scanDirLocked函数打开/dev/input目录后，对目录下的每个文件都调用openDeviceLocked()函数<br>看下这个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">status_t EventHub::openDeviceLocked(<span class="keyword">const</span> <span class="keyword">char</span> *devicePath) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="comment">// Get device name.</span></span><br><span class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGNAME(sizeof(buffer) - <span class="number">1</span>), &amp;buffer) &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//fprintf(stderr, "could not get device name for %s, %s\n", devicePath, strerror(errno));</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buffer[sizeof(buffer) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        identifier.name.setTo(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if the device is on our excluded list</span></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; mExcludedDevices.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> String8&amp; item = mExcludedDevices.itemAt(i);</span><br><span class="line">        <span class="keyword">if</span> (identifier.name == item) &#123;</span><br><span class="line">            ALOGI(<span class="string">"ignoring event id %s driver %s\n"</span>, devicePath, item.string());</span><br><span class="line">            close(fd);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get device driver version.</span></span><br><span class="line">    <span class="keyword">int</span> driverVersion;</span><br><span class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGVERSION, &amp;driverVersion)) &#123;</span><br><span class="line">        ALOGE(<span class="string">"could not get driver version for %s, %s\n"</span>, devicePath, strerror(errno));</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get device identifier.</span></span><br><span class="line">    struct input_id inputId;</span><br><span class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGID, &amp;inputId)) &#123;</span><br><span class="line">        ALOGE(<span class="string">"could not get device input id for %s, %s\n"</span>, devicePath, strerror(errno));</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    identifier.bus = inputId.bustype;</span><br><span class="line">    identifier.product = inputId.product;</span><br><span class="line">    identifier.vendor = inputId.vendor;</span><br><span class="line">    identifier.version = inputId.version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get device physical location.</span></span><br><span class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGPHYS(sizeof(buffer) - <span class="number">1</span>), &amp;buffer) &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//fprintf(stderr, "could not get location for %s, %s\n", devicePath, strerror(errno));</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buffer[sizeof(buffer) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        identifier.location.setTo(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get device unique id.</span></span><br><span class="line">    <span class="keyword">if</span>(ioctl(fd, EVIOCGUNIQ(sizeof(buffer) - <span class="number">1</span>), &amp;buffer) &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//fprintf(stderr, "could not get idstring for %s, %s\n", devicePath, strerror(errno));</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buffer[sizeof(buffer) - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">        identifier.uniqueId.setTo(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数非常长，做的事情主要是打开设备，获取设备的信息包括设备名称，id等。然后根据这些信息判断设备的类型，并根据设备的不同，进行不同的初始化，接着为设备创建一个Device对象。并将设备对象的句柄加入到epoll的监控中。最后调用addDeviceLocked（）函数把Device对象添加到EventHub的mDevices列表中</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，汗衫，听着飘洋过海来看你</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上篇文章中说到eventhub是在NativeInputManager的构造函数new出来&lt;/p&gt;
&lt;p&gt;一台移动设备能产生输入消息的部件很多，包括键盘，触摸屏，按键等。EventHub的作用就是把所有这些设备产生的消息统一成一种格式，再发往上层进行处理&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android输入系统系列(1)----InputManagerService</title>
    <link href="http://lihaizhou.top/2018/06/07/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-1-InputManagerService/"/>
    <id>http://lihaizhou.top/2018/06/07/Android输入系统系列-1-InputManagerService/</id>
    <published>2018-06-07T11:42:10.000Z</published>
    <updated>2019-12-28T07:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中遇到事件没有传到上层的问题，虽然问题最终得以解决，不过在问题处理中感知input系统有些东西遗忘了，觉得有必要再拿出完整的梳理一遍，后续将通过系列文章进行梳理，文章借鉴深入理解Android5.0一书，不过后续文章均会基于Android N分析</p><p>以下讨论基于<code>Android 7.1.1</code>代码</p><p>InputManagerService作为系统服务，启动过程和其他服务流程差不多，在SystemServer中创建<br><code>frameworks\base\services\java\com\android\server\SystemServer.java</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Starts a miscellaneous grab bag of stuff that has yet to be refactored</span></span><br><span class="line"><span class="comment">    * and organized.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    InputManagerService inputManager = <span class="keyword">null</span>;</span><br><span class="line">    .....</span><br><span class="line">    traceBeginAndSlog(<span class="string">"StartInputManagerService"</span>);</span><br><span class="line">    <span class="comment">//创建InputManagerService对象</span></span><br><span class="line">    inputManager = <span class="keyword">new</span> InputManagerService(context);</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    traceBeginAndSlog(<span class="string">"StartWindowManagerService"</span>);</span><br><span class="line">    wm = WindowManagerService.main(context, inputManager,</span><br><span class="line">                    mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL,</span><br><span class="line">                    !mFirstBoot, mOnlyCore);</span><br><span class="line">     ServiceManager.addService(Context.WINDOW_SERVICE, wm);</span><br><span class="line">     <span class="comment">//添加到ServiceManager中</span></span><br><span class="line">     ServiceManager.addService(Context.INPUT_SERVICE, inputManager);</span><br><span class="line">     Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line"></span><br><span class="line">      traceBeginAndSlog(<span class="string">"StartVrManagerService"</span>);</span><br><span class="line">      mSystemServiceManager.startService(VrManagerService.class);</span><br><span class="line">      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line"></span><br><span class="line">      mActivityManagerService.setWindowManager(wm);</span><br><span class="line"></span><br><span class="line">      inputManager.setWindowManagerCallbacks(wm.getInputMonitor());</span><br><span class="line">      <span class="comment">//调用了InputManagerService的start方法</span></span><br><span class="line">      inputManager.start();</span><br><span class="line">      .....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里创建了InputManagerService对象，下面看下InputManagerService的构造方法<br><code>frameworks\base\services\core\java\com\android\server\input\InputManagerService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputManagerService</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        <span class="keyword">this</span>.mHandler = <span class="keyword">new</span> InputManagerHandler(DisplayThread.get().getLooper());</span><br><span class="line"></span><br><span class="line">        mUseDevInputEventForAudioJack =</span><br><span class="line">                context.getResources().getBoolean(R.bool.config_useDevInputEventForAudioJack);</span><br><span class="line">        Slog.i(TAG, <span class="string">"Initializing input manager, mUseDevInputEventForAudioJack="</span></span><br><span class="line">                + mUseDevInputEventForAudioJack);</span><br><span class="line">        <span class="comment">//这里调用了InputManagerHandler对象的getLooper()获取主线程的looper后进而调用getQueue()得到消息队列</span></span><br><span class="line">        <span class="comment">//并作为参数传进了nativeInit函数中</span></span><br><span class="line">        mPtr = nativeInit(<span class="keyword">this</span>, mContext, mHandler.getLooper().getQueue());</span><br><span class="line"></span><br><span class="line">        String doubleTouchGestureEnablePath = context.getResources().getString(</span><br><span class="line">                R.string.config_doubleTouchGestureEnableFile);</span><br><span class="line">        mDoubleTouchGestureEnableFile = TextUtils.isEmpty(doubleTouchGestureEnablePath) ? <span class="keyword">null</span> :</span><br><span class="line">            <span class="keyword">new</span> File(doubleTouchGestureEnablePath);</span><br><span class="line"></span><br><span class="line">        LocalServices.addService(InputManagerInternal.class, <span class="keyword">new</span> LocalService());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接着看nativeinit方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">nativeInit</span><span class="params">(InputManagerService service,</span></span></span><br><span class="line"><span class="function"><span class="params">            Context context, MessageQueue messageQueue)</span></span>;</span><br></pre></td></tr></table></figure><p>是个native方法，跟着看native层中的实现</p><p><code>frameworks\base\services\core\jni\com_android_server_input_InputManagerService.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">nativeInit</span><span class="params">(JNIEnv* env, jclass <span class="comment">/* clazz */</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        jobject serviceObj, jobject contextObj, jobject messageQueueObj)</span> </span>&#123;</span><br><span class="line">    sp&lt;MessageQueue&gt; messageQueue = android_os_MessageQueue_getMessageQueue(env, messageQueueObj);</span><br><span class="line">    <span class="keyword">if</span> (messageQueue == NULL) &#123;</span><br><span class="line">        jniThrowRuntimeException(env, <span class="string">"MessageQueue is not initialized."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NativeInputManager* im = <span class="keyword">new</span> NativeInputManager(contextObj, serviceObj,</span><br><span class="line">            messageQueue-&gt;getLooper());</span><br><span class="line">    im-&gt;incStrong(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> reinterpret_cast&lt;jlong&gt;(im);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要工作new了一个NativeInputManager对象，下面接着看NativeInputManager的构造函数  </p><p><code>frameworks\base\services\core\jni\com_android_server_input_InputManagerService.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">NativeInputManager::NativeInputManager(jobject contextObj,</span><br><span class="line">        jobject serviceObj, <span class="keyword">const</span> sp&lt;Looper&gt;&amp; looper) :</span><br><span class="line">        mLooper(looper), mInteractive(<span class="keyword">true</span>) &#123;</span><br><span class="line">    JNIEnv* env = jniEnv();</span><br><span class="line"></span><br><span class="line">    mContextObj = env-&gt;NewGlobalRef(contextObj);</span><br><span class="line">    mServiceObj = env-&gt;NewGlobalRef(serviceObj);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</span><br><span class="line">        mLocked.systemUiVisibility = ASYSTEM_UI_VISIBILITY_STATUS_BAR_VISIBLE;</span><br><span class="line">        mLocked.pointerSpeed = <span class="number">0</span>;</span><br><span class="line">        mLocked.pointerGesturesEnabled = <span class="keyword">true</span>;</span><br><span class="line">        mLocked.showTouches = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mInteractive = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    sp&lt;EventHub&gt; eventHub = <span class="keyword">new</span> EventHub();</span><br><span class="line">    mInputManager = <span class="keyword">new</span> InputManager(eventHub, <span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要工作: 创建了EventHub对象以及InputManager对象</p><p>接着看InputManager的构造函数<br><code>frameworks\native\services\inputflinger\InputManager.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">InputManager::InputManager(</span><br><span class="line">        <span class="keyword">const</span> sp&lt;EventHubInterface&gt;&amp; eventHub,</span><br><span class="line">        <span class="keyword">const</span> sp&lt;InputReaderPolicyInterface&gt;&amp; readerPolicy,</span><br><span class="line">        <span class="keyword">const</span> sp&lt;InputDispatcherPolicyInterface&gt;&amp; dispatcherPolicy) &#123;</span><br><span class="line">    mDispatcher = <span class="keyword">new</span> InputDispatcher(dispatcherPolicy);</span><br><span class="line">    mReader = <span class="keyword">new</span> InputReader(eventHub, readerPolicy, mDispatcher);</span><br><span class="line">    initialize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> InputManager::initialize() &#123;</span><br><span class="line">    mReaderThread = <span class="keyword">new</span> InputReaderThread(mReader);</span><br><span class="line">    mDispatcherThread = <span class="keyword">new</span> InputDispatcherThread(mDispatcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建了两个对象: InputDispatcher和InputReader，接着调用了initialize()，initialize()中分别new了两个线程: InputReaderThread和InputDispatcherThread，那这两个线程是在什么时机起来的呢?</p><p>故事回到了文章开始的地方，InputManagerService创建完之后会调用InputManagerService的start方法，这个start方法中又去调用了nativeStart方法<br><code>frameworks\base\services\core\jni\com_android_server_input_InputManagerService.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeStart</span><span class="params">(JNIEnv* env, jclass <span class="comment">/* clazz */</span>, jlong ptr)</span> </span>&#123;</span><br><span class="line">    NativeInputManager* im = reinterpret_cast&lt;NativeInputManager*&gt;(ptr);</span><br><span class="line">    <span class="comment">//注意这里的getInputManager()返回的是一个InputManager对象</span></span><br><span class="line">    status_t result = im-&gt;getInputManager()-&gt;start();</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        jniThrowRuntimeException(env, <span class="string">"Input manager could not be started."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里NativeInputManager的getInputManager()返回的是一个InputManager对象，紧接着调用了start方法<br>所以接下来看下InputManager的start方法主要做了啥</p><p><code>frameworks\native\services\inputflinger\InputManager.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">status_t InputManager::start() &#123;</span><br><span class="line">    status_t result = mDispatcherThread-&gt;run(<span class="string">"InputDispatcher"</span>, PRIORITY_URGENT_DISPLAY);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    result = mReaderThread-&gt;run(<span class="string">"InputReader"</span>, PRIORITY_URGENT_DISPLAY);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里启动了InputManager中initialize()创建的InputReaderThread和InputDispatcherThread这两个线程</p><p>至此InputManagerService的创建流程讨论完毕，流程还是比较简单的，下文将讨论EventHub</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，高考第一天，好紧张</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目中遇到事件没有传到上层的问题，虽然问题最终得以解决，不过在问题处理中感知input系统有些东西遗忘了，觉得有必要再拿出完整的梳理一遍，后续将通过系列文章进行梳理，文章借鉴深入理解Android5.0一书，不过后续文章均会基于Android N分析&lt;/p&gt;
&lt;p&gt;以下
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>一个滑动冲突问题的分析流程</title>
    <link href="http://lihaizhou.top/2018/06/06/%E4%B8%80%E4%B8%AA%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    <id>http://lihaizhou.top/2018/06/06/一个滑动冲突问题的分析流程/</id>
    <published>2018-06-06T13:58:15.000Z</published>
    <updated>2019-12-28T06:59:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题需求</strong><br>原先效果是用户在<code>ViewPager</code>上长按会弹出一个<code>dialog</code>，现在加了一个需求：用户有时候在长按时出现手指向左或向右微小滑动，此时也需要判断为长按并弹出<code>dialog</code></p><p><strong>初步分析</strong><br>外边的<code>ViewPager</code>是可以左右滑动的，现在希望单个界面即子<code>view</code>接收到触摸事件后能接管本次事件序列中后续事件，即子<code>View</code>接收到触摸事件后，注意此时手指未松开，所以还处于一次完整的事件序列中，等待一段时间<code>Android</code>默认是<code>400ms</code>后会识别为长按事件，此时子<code>View</code>的长按事件被触发。那么问题来了，怎么才能在子<code>view</code>接收到触摸事件并能接管本次事件序列呢？<br>这就要说到老生常谈的事件拦截了，正常拦截事件有外部拦截和内部拦截两种，这里因为代码中子view已写好现成的手势判断的相关方法，故这里为简单起见，采用内部拦截法来实现。</p><p><strong>修改方法</strong><br><code>LauncherPagerAdapter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> mTouchSlop = <span class="number">40</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.launcher_item_layout, <span class="keyword">null</span>);</span><br><span class="line">        ViewGroup parent = (ViewGroup) view.getParent();</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line"><span class="comment">//Add begin</span></span><br><span class="line">        view.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">                    <span class="comment">//省略部分代码</span></span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                        <span class="keyword">if</span> (Math.abs(event.getY() - mDownY) &lt;= ((<span class="keyword">float</span>) mTouchSlop) &amp;&amp; Math.abs(event.getX() - mDownX) &lt;= ((<span class="keyword">float</span>) mTouchSlop)) &#123;</span><br><span class="line">                                view.getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>); <span class="comment">//当出现上下左右距离不超过40时，父view不拦截事件, 交给子view</span></span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Math.abs(event.getX() - mDownX) &gt; ((<span class="keyword">float</span>) mTouchSlop))&#123;</span><br><span class="line">                               view.getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>); <span class="comment">//当出现左右距离超过40时，父view拦截事件并自行消耗</span></span><br><span class="line">                          &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> <span class="comment">//Add end</span></span><br><span class="line">       <span class="comment">//省略部分代码</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>这样的话，再对子<code>view</code>添加长按事件处理，也能顺利的接收到长按事件了。效果上便达到了微小长按滑动也会进入长按事件的处理逻辑中，注意此时微小的向左或向右滑动，<code>viewpager</code>本身并不会移动了，修改之前<code>Viewpager</code>会跟着滑动。</p><p>这个问题里用的是内部拦截法，其实也可以自定义<code>Viewpager</code>中重写<code>canScrool()</code>方法，这里就不介绍了，相比而言稍稍麻烦了一点</p><p>下面顺便说下滑动冲突的一般解决思路，这是个老生常谈的话题，解决方法已形成固定的流程，需要根据具体的实际业务需求灵活改变。</p><p>先介绍几个事件分发处理的几个常见方法<br><code>dispatchTouchEvent</code><br>主要是用来分发事件<br><code>onInterceptTouchEvent</code><br>主要是用来拦截事件的(ViewGroup才有这个方法，View没有这个方法)<br><code>onTouchEvent</code><br>这个方法主要是用来处理事件的<br><code>requestDisallowInterceptTouchEvent(true)</code><br>这个方法能够影响父View是否拦截事件，true 表示父 View 不拦截事件，false 表示父 View 拦截事件</p><p><strong>滑动冲突一般解决方法</strong><br>1.外部拦截法<br>一般是通过重写父控件的<code>onInterceptTouchEvent</code>方法，然后根据具体的需求，来决定父控件是否拦截事件。如果拦截返回返回true，不拦截返回false，比如说希望上下滑动不要拦截，那么就在父控件的<code>onInterceptTouchEvent</code>方法里的<code>MotionEvent.ACTION_MOVE</code>这个case块里返回false就好。如果希望指定位置不拦截，则再进行位置判断即可。</p><p>对于外部拦截法我们的核心工作一般是做在<code>ACTION_MOVE</code>中，不过需要注意的是不要在<code>ACTION_DOWN</code>中返回 true，这里一旦为true，则同一个事件序列<code>ViewGroup</code>的<code>disPatchTouchEvent</code>就不会再调用<code>onInterceptTouchEvent</code>方法了 。那么本次的事件序列后续都由父view接管，子view对这次事件序列也就没有了机会去消耗事件。归纳起来就是一句话: 父控件一旦拦截了事件，那么同一个事件序列的所有事件都将交给它处理。</p><p>2.内部拦截法<br>内部拦截法主要是通过调用父控件的 <code>requestDisallowInterceptTouchEvent</code>方法，传进去一个<code>boolean</code>参数值，true为请求父控件不拦截<br>需要注意的是父控件的<code>onInterceptTouchEvent</code>方法中的<code>ACTION_DOWN</code>事件不要拦截，一旦父控件拦截<code>ACTION_DOWN</code>事件，那么事件无法传递到子元素之中，内部拦截法也就无法起作用了</p><p>Good night!</p><hr><font color="#000000" size="2" face="楷体">住所，晚上，听着歌，洗漱完毕准备休息</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题需求&lt;/strong&gt;&lt;br&gt;原先效果是用户在&lt;code&gt;ViewPager&lt;/code&gt;上长按会弹出一个&lt;code&gt;dialog&lt;/code&gt;，现在加了一个需求：用户有时候在长按时出现手指向左或向右微小滑动，此时也需要判断为长按并弹出&lt;code&gt;dia
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>一个底层内存分配异常导致无法进入launcher问题分析</title>
    <link href="http://lihaizhou.top/2018/05/31/%E4%B8%80%E4%B8%AA%E5%BA%95%E5%B1%82%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%BC%82%E5%B8%B8%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5launcher%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://lihaizhou.top/2018/05/31/一个底层内存分配异常导致无法进入launcher问题分析/</id>
    <published>2018-05-31T02:31:47.000Z</published>
    <updated>2019-12-28T07:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题平台<br><code>Android go</code></p><p>复现概率<br><code>always</code></p><p>问题现象<br><code>解锁后，Launcher图标未能加载出，按虚拟back,home键，下拉状态栏响应异常缓慢</code></p><p><strong>前言</strong><br><code>Android Go</code>是一个简化版本的<code>Android O</code>（及以上），能够在超低端的Android手机上流畅运行，具体量化就是RAM仅为<code>512MB</code>至<code>1GB</code>的机型</p><p><strong>初步分析</strong><br>首次合入MTK提供的<code>Android Go</code>代码后开机，解锁后<code>Launcher</code>图标没有加载出，鉴于该平台代码是芯片商已经调试稳定后释放，<code>Launcher</code>本身应用出问题的概率比较小，操作发现下拉状态栏异常卡顿</p><p>第一反应是会不会是内存很紧张呢? 有可能的哦，ok, 下面开始分析日志</p><p><strong>Step1：日志分析</strong><br>命令调mtk日志应用, 没调出来？ok….这一点比较异常, 后面会解释原因，既然完整的mtk日志抓取不了，下面通过<code>adb logcat</code>命令抓取</p><p><strong>logcat日志</strong><br>日志中开头部分就看到如下异常，根据日志可以知道对应的操作是用命令调mtk日志应用，正是我上面的操作，报的异常说我们尝试去调用的对象已经挂了, ok…大写的懵逼  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">31.691</span> I/ActivityManager(  <span class="number">619</span>): Start proc <span class="number">5691</span>:com.mediatek.mtklogger/u0a46 <span class="keyword">for</span> activity com.mediatek.mtklogger/.MainActivity</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>): Exception when starting activity com.mediatek.mtklogger/.MainActivity</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>): android.os.DeadObjectException</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transactNative(Native Method)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transact(Binder.java:<span class="number">764</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IApplicationThread$Stub$<span class="built_in">Proxy</span>.scheduleLaunchActivity(IApplicationThread.java:<span class="number">1232</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.realStartActivityLocked(ActivityStackSupervisor.java:<span class="number">1457</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked(ActivityStackSupervisor.java:<span class="number">1579</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStack.makeVisibleAndRestartIfNeeded(ActivityStack.java:<span class="number">2069</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStack.ensureActivitiesVisibleLocked(ActivityStack.java:<span class="number">1873</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.ensureActivitiesVisibleLocked(ActivityStackSupervisor.java:<span class="number">3366</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.attachApplicationLocked(ActivityStackSupervisor.java:<span class="number">988</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplicationLocked(ActivityManagerService.java:<span class="number">7276</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplication(ActivityManagerService.java:<span class="number">7343</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">291</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3013</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.Binder.execTransact(Binder.java:<span class="number">697</span>)</span><br></pre></td></tr></table></figure><p>接着往下看  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">33.035</span> I/ActivityManager(  <span class="number">619</span>): Process com.mediatek.mtklogger (pid <span class="number">5705</span>) has died: fore TOP</span><br></pre></td></tr></table></figure><p>mtk日志这个进程挂了，这种情况头一次见，那会不会Launcher中没有加载出图标也是因为进程挂了, ok, 搜索下<code>&quot;launcher&quot;</code>关键字  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>): Exception <span class="keyword">in</span> <span class="keyword">new</span> application when starting activity com.android.launcher3/.Launcher</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>): android.os.DeadObjectException</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transactNative(Native Method)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transact(Binder.java:<span class="number">764</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IApplicationThread$Stub$<span class="built_in">Proxy</span>.scheduleLaunchActivity(IApplicationThread.java:<span class="number">1232</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.realStartActivityLocked(ActivityStackSupervisor.java:<span class="number">1457</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.attachApplicationLocked(ActivityStackSupervisor.java:<span class="number">974</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplicationLocked(ActivityManagerService.java:<span class="number">7276</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplication(ActivityManagerService.java:<span class="number">7343</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">291</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3013</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.Binder.execTransact(Binder.java:<span class="number">697</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>): Exception thrown launching activities <span class="keyword">in</span> ProcessRecord&#123;<span class="number">922</span>c6e6 <span class="number">5794</span>:com.android.launcher3/u0a12&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>): android.os.DeadObjectException</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transactNative(Native Method)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transact(Binder.java:<span class="number">764</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.app.IApplicationThread$Stub$<span class="built_in">Proxy</span>.scheduleLaunchActivity(IApplicationThread.java:<span class="number">1232</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.realStartActivityLocked(ActivityStackSupervisor.java:<span class="number">1457</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.attachApplicationLocked(ActivityStackSupervisor.java:<span class="number">974</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplicationLocked(ActivityManagerService.java:<span class="number">7276</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplication(ActivityManagerService.java:<span class="number">7343</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">291</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3013</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.os.Binder.execTransact(Binder.java:<span class="number">697</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.886</span> I/ActivityManager(  <span class="number">619</span>): Killing <span class="number">5794</span>:com.android.launcher3/u0a12 (adj <span class="number">0</span>): error during init</span><br></pre></td></tr></table></figure><p>果然<code>Launcher</code>进程也挂了，ok…有意思</p><p>通过<code>adb shell cat /proc/meminfo</code>命令看下机器内存情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MemTotal:        <span class="number">162404</span> kB</span><br><span class="line"></span><br><span class="line">MemFree:            <span class="number">5804</span> kB</span><br><span class="line"></span><br><span class="line">MemAvailable:      <span class="number">40740</span> kB</span><br><span class="line"></span><br><span class="line">Buffers:            <span class="number">672</span> kB</span><br><span class="line"></span><br><span class="line">Cached:            <span class="number">34920</span> kB</span><br><span class="line"></span><br><span class="line">SwapCached:          <span class="number">796</span> kB</span><br><span class="line"></span><br><span class="line">Active:            <span class="number">29176</span> kB</span><br><span class="line"></span><br><span class="line">Inactive:          <span class="number">31516</span> kB</span><br></pre></td></tr></table></figure><p>这里的内存<code>MemTotal</code>为什么这么小？ 同驱动沟通了下，这个项目是<code>512</code>内存，可是现在打印出来<code>MemTotal</code>只有一百多<br>这里顺便说下上面几个重点关键字</p><p><code>MemTotal</code><br>系统从加电开始到引导完成，firmware/BIOS要保留一些内存，kernel本身要占用一些内存，最后剩下可供kernel支配的内存就是MemTotal。这个值在系统运行期间一般是固定不变的。</p><p><code>MemFree</code><br>表示系统尚未使用的内存。[MemTotal-MemFree]就是已被用掉的内存。</p><p><code>MemAvailable</code><br>有些应用程序会根据系统的可用内存大小自动调整内存申请的多少，所以需要一个记录当前可用内存数量的统计值，<code>MemFree</code>并不适用，因为<code>MemFree</code>不能代表全部可用的内存，系统中有些内存虽然已被使用但是可以回收的，比如<code>cache/buffer</code>、<code>slab</code>都有一部分可以回收，所以这部分可回收的内存加上<code>MemFree</code>才是系统可用的内存，即<code>MemAvailable</code>。<code>/proc/meminfo</code>中的<code>MemAvailable</code>是内核使用特定的算法估算出来的，要注意这是一个估计值，并不精确</p><p>这里说下<code>cache</code>和<code>buffers</code>的作用，<code>Linux</code>利用空闲的物理内存，划分出一部份空间，作为<code>cache</code>和<code>buffers</code>，目的是为了提高数据访问性能<br>这里可以看到我们当前的系统可用的内存大约在<code>40M</code>左右，这显然是不够的，现在问题方向指向了内存</p><p>下面抓取一份串口日志，看下其中的内存分配</p><p><strong>串口日志</strong></p><p>如下片段是开机动画完成后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;-(<span class="number">0</span>)[<span class="number">0</span>:swapper]Memory: <span class="number">159860</span>K/<span class="number">454336</span>K available (<span class="number">11264</span>K kernel code, <span class="number">931</span>K rwdata, <span class="number">3320</span>K rodata, <span class="number">1024</span>K init, <span class="number">2701</span>K bss, <span class="number">294476</span>K reserved, <span class="number">0</span>K cma-reserved, <span class="number">0</span>K highmem)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;-(<span class="number">0</span>)[<span class="number">0</span>:swapper]Virtual kernel memory layout:</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    vector  : <span class="number">0xffff0000</span> - <span class="number">0xffff1000</span>  (  <span class="number">4</span> kB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    fixmap  : <span class="number">0xffc00000</span> - <span class="number">0xfff00000</span>  (<span class="number">3072</span> kB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    vmalloc : <span class="number">0xe0800000</span> - <span class="number">0xff800000</span>  ( <span class="number">496</span> MB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    lowmem  : <span class="number">0xc0000000</span> - <span class="number">0xe0000000</span>  ( <span class="number">512</span> MB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    pkmap  : <span class="number">0xbfe00000</span> - <span class="number">0xc0000000</span>  (  <span class="number">2</span> MB)</span><br></pre></td></tr></table></figure><p>这里可以看到<code>lowmem</code>的确是<code>512M</code>(lowmem代表linux最终可支配的物理内存大小)</p><p>这里有个奇怪的地方是<code>reserved</code>占据了<code>294476K</code> ，将近300M，开机结束也没有变化。</p><p>这里对<code>Reserved memory</code>的概念进行一个描述</p><p><code>Linux</code>中保留内存(<code>Reserved memory</code>)是指把系统中的一部分内存保留起来，内核不会为它建立页表，一般的应用程序无法访问到这段内存。在板卡调试、内存测试和设备<code>DAM</code>调试的过程中，可以运用这种办法，先验证系统在只有低端内存的情况下能否顺利启动；</p><p>那么reserved占据的这块内存是提供给谁使用的呢？ 继续看串口日志，看到modem加载的片段如下  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载modem</span></span><br><span class="line">[<span class="number">2030</span>] Enter load_modem_image v2<span class="number">.0</span></span><br><span class="line">[<span class="number">2030</span>] ccci_request_mem: ret:<span class="number">4000000</span>, <span class="attr">smem_limit</span>:<span class="number">78000000</span>, <span class="attr">align</span>:<span class="number">2000000</span></span><br><span class="line">[<span class="number">2031</span>] mblock[<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x3c000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2033</span>] mblock_reserve dbg[<span class="number">0</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2033</span>] mblock[<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x40000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2035</span>] mblock_reserve dbg[<span class="number">1</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2035</span>] mblock[<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x40000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2037</span>] mblock_reserve dbg[<span class="number">2</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2037</span>] mblock[<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x40000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2039</span>] mblock_reserve dbg[<span class="number">3</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2039</span>] mblock[<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x1ab58000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x5a000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2041</span>] mblock_reserve dbg[<span class="number">4</span>]: <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2041</span>] mblock[<span class="number">5</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x5fc50000</span>, <span class="attr">target</span>: <span class="number">4</span>, <span class="attr">reserved_addr</span>: <span class="number">0x5a000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2043</span>] mblock_reserve dbg[<span class="number">5</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2043</span>] mblock[<span class="number">4</span>]: <span class="number">450</span>f8000, <span class="number">14</span>f08000 <span class="keyword">from</span> mblock</span><br><span class="line">mblock[<span class="number">5</span>]: <span class="number">5e000000</span>, <span class="number">1</span>c50000 <span class="keyword">from</span> mblock</span><br><span class="line">[<span class="number">2045</span>] mblock_reserve: <span class="number">5</span>a000000 - <span class="number">5e000000</span> <span class="keyword">from</span> mblock <span class="number">4</span></span><br><span class="line">[<span class="number">2045</span>] mblock_reserve [<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span></span><br><span class="line">[<span class="number">2046</span>] mblock_reserve [<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span></span><br><span class="line">[<span class="number">2046</span>] mblock_reserve [<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span></span><br><span class="line">[<span class="number">2047</span>] mblock_reserve [<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span></span><br><span class="line">[<span class="number">2048</span>] mblock_reserve [<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x14f08000</span></span><br><span class="line">[<span class="number">2048</span>] mblock_reserve [<span class="number">5</span>].start: <span class="number">0x5e000000</span>, <span class="attr">sz</span>: <span class="number">0x1c50000</span></span><br><span class="line">[<span class="number">2049</span>] mblock_reserve [<span class="number">6</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span></span><br><span class="line">[<span class="number">2050</span>] mblock_reserve-R[<span class="number">0</span>].start: <span class="number">0x5ff80000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">1</span> name:log_store</span><br><span class="line">[<span class="number">2051</span>] mblock_reserve-R[<span class="number">1</span>].start: <span class="number">0x44600000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-reserved</span><br><span class="line">[<span class="number">2051</span>] mblock_reserve-R[<span class="number">2</span>].start: <span class="number">0x5fe00000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-log-reserved</span><br><span class="line">[<span class="number">2052</span>] mblock_reserve-R[<span class="number">3</span>].start: <span class="number">0x44000000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">0</span> name:dtb_kernel_addr_mb</span><br><span class="line">[<span class="number">2053</span>] mblock_reserve-R[<span class="number">4</span>].start: <span class="number">0x40008000</span>, <span class="attr">sz</span>: <span class="number">0x3200000</span> map:<span class="number">0</span> name:kernel_addr_mb</span><br><span class="line">[<span class="number">2054</span>] mblock_reserve-R[<span class="number">5</span>].start: <span class="number">0x45000000</span>, <span class="attr">sz</span>: <span class="number">0xf8000</span> map:<span class="number">0</span> name:ramdisk_addr_mb</span><br><span class="line">[<span class="number">2055</span>] mblock_reserve-R[<span class="number">6</span>].start: <span class="number">0x5fc50000</span>, <span class="attr">sz</span>: <span class="number">0x1b0000</span> map:<span class="number">0</span> name:framebuffer</span><br><span class="line">[<span class="number">2056</span>] mblock_reserve-R[<span class="number">7</span>].start: <span class="number">0x5ff70000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:SPM-reserved</span><br><span class="line">[<span class="number">2057</span>] mblock_reserve-R[<span class="number">8</span>].start: <span class="number">0x5ff60000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:MCUPM-reserved</span><br><span class="line">[<span class="number">2058</span>] mblock_reserve-R[<span class="number">9</span>].start: <span class="number">0x5a000000</span>, <span class="attr">sz</span>: <span class="number">0x4000000</span> map:<span class="number">0</span> name:ccci</span><br><span class="line">[<span class="number">2059</span>] request size: <span class="number">0x04000000</span>, get start address: <span class="number">0x5a000000</span></span><br><span class="line">[<span class="number">2060</span>] Using defalut RAT all <span class="keyword">in</span> one</span><br><span class="line">[<span class="number">2060</span>] cust_tel_mode_idx val:<span class="number">-1</span></span><br><span class="line">[<span class="number">2060</span>] [LK_ENV]get_env opt_ps1_rat <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2061</span>] [LK_ENV]get_env opt_md1_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2061</span>] [LK_ENV]get_env opt_md3_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2062</span>] [LK_ENV]get_env opt_c2k_lte_mode <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2063</span>] [LK_ENV]get_env opt_lte_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2063</span>] [LK_ENV]get_env opt_c2k_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2064</span>] <span class="keyword">default</span> rat:LF_LT_W_T_G[<span class="number">0x3b</span>][<span class="number">0x0</span>]</span><br><span class="line">[<span class="number">2064</span>] -- MD1 --</span><br><span class="line">[<span class="number">2064</span>] mblock[<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x30000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2066</span>] mblock_reserve dbg[<span class="number">0</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2066</span>] mblock[<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x34000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2068</span>] mblock_reserve dbg[<span class="number">1</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2069</span>] mblock[<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x34000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2070</span>] mblock_reserve dbg[<span class="number">2</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2071</span>] mblock[<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x34000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2072</span>] mblock_reserve dbg[<span class="number">3</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2073</span>] mblock[<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x14f08000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x4a000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2074</span>] mblock_reserve dbg[<span class="number">4</span>]: <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2075</span>] mblock[<span class="number">5</span>].start: <span class="number">0x5e000000</span>, <span class="attr">sz</span>: <span class="number">0x1c50000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x5a000000</span>, <span class="attr">target</span>: <span class="number">4</span>, <span class="attr">reserved_addr</span>: <span class="number">0x4e000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2076</span>] mblock_reserve dbg[<span class="number">5</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2077</span>] mblock[<span class="number">6</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x5a000000</span>, <span class="attr">target</span>: <span class="number">4</span>, <span class="attr">reserved_addr</span>: <span class="number">0x4e000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2079</span>] mblock_reserve dbg[<span class="number">6</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2079</span>] mblock_reserve: <span class="number">4</span>a000000 - <span class="number">5</span>a000000 <span class="keyword">from</span> mblock <span class="number">4</span></span><br><span class="line">[<span class="number">2080</span>] mblock_reserve [<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span></span><br><span class="line">[<span class="number">2080</span>] mblock_reserve [<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span></span><br><span class="line">[<span class="number">2081</span>] mblock_reserve [<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span></span><br><span class="line">[<span class="number">2082</span>] mblock_reserve [<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span></span><br><span class="line">[<span class="number">2082</span>] mblock_reserve [<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x4f08000</span></span><br><span class="line">[<span class="number">2083</span>] mblock_reserve [<span class="number">5</span>].start: <span class="number">0x5e000000</span>, <span class="attr">sz</span>: <span class="number">0x1c50000</span></span><br><span class="line">[<span class="number">2084</span>] mblock_reserve [<span class="number">6</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span></span><br><span class="line">[<span class="number">2084</span>] mblock_reserve-R[<span class="number">0</span>].start: <span class="number">0x5ff80000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">1</span> name:log_store</span><br><span class="line">[<span class="number">2085</span>] mblock_reserve-R[<span class="number">1</span>].start: <span class="number">0x44600000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-reserved</span><br><span class="line">[<span class="number">2086</span>] mblock_reserve-R[<span class="number">2</span>].start: <span class="number">0x5fe00000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-log-reserved</span><br><span class="line">[<span class="number">2087</span>] mblock_reserve-R[<span class="number">3</span>].start: <span class="number">0x44000000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">0</span> name:dtb_kernel_addr_mb</span><br><span class="line">[<span class="number">2088</span>] mblock_reserve-R[<span class="number">4</span>].start: <span class="number">0x40008000</span>, <span class="attr">sz</span>: <span class="number">0x3200000</span> map:<span class="number">0</span> name:kernel_addr_mb</span><br><span class="line">[<span class="number">2089</span>] mblock_reserve-R[<span class="number">5</span>].start: <span class="number">0x45000000</span>, <span class="attr">sz</span>: <span class="number">0xf8000</span> map:<span class="number">0</span> name:ramdisk_addr_mb</span><br><span class="line">[<span class="number">2090</span>] mblock_reserve-R[<span class="number">6</span>].start: <span class="number">0x5fc50000</span>, <span class="attr">sz</span>: <span class="number">0x1b0000</span> map:<span class="number">0</span> name:framebuffer</span><br><span class="line">[<span class="number">2091</span>] mblock_reserve-R[<span class="number">7</span>].start: <span class="number">0x5ff70000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:SPM-reserved</span><br><span class="line">[<span class="number">2092</span>] mblock_reserve-R[<span class="number">8</span>].start: <span class="number">0x5ff60000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:MCUPM-reserved</span><br><span class="line">[<span class="number">2093</span>] mblock_reserve-R[<span class="number">9</span>].start: <span class="number">0x5a000000</span>, <span class="attr">sz</span>: <span class="number">0x4000000</span> map:<span class="number">0</span> name:ccci</span><br><span class="line">[<span class="number">2093</span>] mblock_reserve-R[<span class="number">10</span>].start: <span class="number">0x4a000000</span>, <span class="attr">sz</span>: <span class="number">0x10000000</span> map:<span class="number">1</span> name:ccci</span><br><span class="line"><span class="comment">//此处modem申请了268左右的内存</span></span><br><span class="line">[<span class="number">2094</span>] request size: <span class="number">0x10000000</span>, get start address: <span class="number">0x4a000000</span></span><br></pre></td></tr></table></figure><p>该问题同驱动同事沟通了下，驱动同事发现<code>modem</code>占据的内存没有释放掉，因为<code>modem</code>加载过程中会request一块比较大的内存，如上述日志中描述大概<code>268</code>的内存，正常加载完<code>modem</code>后会释放掉这块内存  </p><p>这个问题中的软件版本<code>modem</code>因为存在异常没有合入但是内存依旧申请了，导致加载没有完成直接返回，后面<code>modem</code>占据的内存释放的流程没有走，这块内存就一直占据着，这也就是我们上面开始看的串口日志中<code>reserved</code>占用比较大的原因，<code>reserved</code>占据的内存在开机过程中是变化的，后面驱动同事修复<code>modem</code>异常并合入<code>modem</code>后，机器内存分配正常，进入<code>launcher</code>加载图标正常</p><p>该问题很早就定位到内存问题，排查到modem问题耗时较久，ok，问题分析到此</p><p>Have a good day!</p><hr><font color="#000000" size="2" face="楷体">本文写于住所，上传于公司，午休时间，电脑前，雨停了，等外卖</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题平台&lt;br&gt;&lt;code&gt;Android go&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;复现概率&lt;br&gt;&lt;code&gt;always&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题现象&lt;br&gt;&lt;code&gt;解锁后，Launcher图标未能加载出，按虚拟back,home键，下拉状态栏响应异常缓慢&lt;/co
      
    
    </summary>
    
      <category term="Android" scheme="http://lihaizhou.top/categories/Android/"/>
    
    
  </entry>
  
</feed>
