<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李海洲的成长之路</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lihaizhou.top/"/>
  <updated>2018-06-07T11:54:49.516Z</updated>
  <id>http://lihaizhou.top/</id>
  
  <author>
    <name>steven li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android输入系统系列(1)----InputManagerService</title>
    <link href="http://lihaizhou.top/2018/06/07/Android%E8%BE%93%E5%85%A5%E7%B3%BB%E7%BB%9F%E7%B3%BB%E5%88%97-1-InputManagerService/"/>
    <id>http://lihaizhou.top/2018/06/07/Android输入系统系列-1-InputManagerService/</id>
    <published>2018-06-07T11:42:10.000Z</published>
    <updated>2018-06-07T11:54:49.516Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中遇到事件没有传到上层的问题，虽然问题最终得以解决，不过在问题处理中感知input系统有些东西遗忘了，觉得有必要再拿出完整的梳理一遍，后续将通过系列文章进行梳理，文章借鉴深入理解Android5.0一书，不过后续文章均会基于Android N分析</p><p>以下讨论基于<code>Android 7.1.1</code>代码</p><p>InputManagerService作为系统服务，启动过程和其他服务流程差不多，在SystemServer中创建<br><code>frameworks\base\services\java\com\android\server\SystemServer.java</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Starts a miscellaneous grab bag of stuff that has yet to be refactored</span></span><br><span class="line"><span class="comment">    * and organized.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    InputManagerService inputManager = <span class="keyword">null</span>;</span><br><span class="line">    .....</span><br><span class="line">    traceBeginAndSlog(<span class="string">"StartInputManagerService"</span>);</span><br><span class="line">    <span class="comment">//创建InputManagerService对象</span></span><br><span class="line">    inputManager = <span class="keyword">new</span> InputManagerService(context);</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    traceBeginAndSlog(<span class="string">"StartWindowManagerService"</span>);</span><br><span class="line">    wm = WindowManagerService.main(context, inputManager,</span><br><span class="line">                    mFactoryTestMode != FactoryTest.FACTORY_TEST_LOW_LEVEL,</span><br><span class="line">                    !mFirstBoot, mOnlyCore);</span><br><span class="line">     ServiceManager.addService(Context.WINDOW_SERVICE, wm);</span><br><span class="line">     <span class="comment">//添加到ServiceManager中</span></span><br><span class="line">     ServiceManager.addService(Context.INPUT_SERVICE, inputManager);</span><br><span class="line">     Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line"></span><br><span class="line">      traceBeginAndSlog(<span class="string">"StartVrManagerService"</span>);</span><br><span class="line">      mSystemServiceManager.startService(VrManagerService.class);</span><br><span class="line">      Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line"></span><br><span class="line">      mActivityManagerService.setWindowManager(wm);</span><br><span class="line"></span><br><span class="line">      inputManager.setWindowManagerCallbacks(wm.getInputMonitor());</span><br><span class="line">      <span class="comment">//调用了InputManagerService的start方法</span></span><br><span class="line">      inputManager.start();</span><br><span class="line">      .....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里创建了InputManagerService对象，下面看下InputManagerService的构造方法<br><code>frameworks\base\services\core\java\com\android\server\input\InputManagerService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputManagerService</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        <span class="keyword">this</span>.mHandler = <span class="keyword">new</span> InputManagerHandler(DisplayThread.get().getLooper());</span><br><span class="line"></span><br><span class="line">        mUseDevInputEventForAudioJack =</span><br><span class="line">                context.getResources().getBoolean(R.bool.config_useDevInputEventForAudioJack);</span><br><span class="line">        Slog.i(TAG, <span class="string">"Initializing input manager, mUseDevInputEventForAudioJack="</span></span><br><span class="line">                + mUseDevInputEventForAudioJack);</span><br><span class="line">        <span class="comment">//这里调用了InputManagerHandler对象的getLooper()获取主线程的looper后进而调用getQueue()得到消息队列</span></span><br><span class="line">        <span class="comment">//并作为参数传进了nativeInit函数中</span></span><br><span class="line">        mPtr = nativeInit(<span class="keyword">this</span>, mContext, mHandler.getLooper().getQueue());</span><br><span class="line"></span><br><span class="line">        String doubleTouchGestureEnablePath = context.getResources().getString(</span><br><span class="line">                R.string.config_doubleTouchGestureEnableFile);</span><br><span class="line">        mDoubleTouchGestureEnableFile = TextUtils.isEmpty(doubleTouchGestureEnablePath) ? <span class="keyword">null</span> :</span><br><span class="line">            <span class="keyword">new</span> File(doubleTouchGestureEnablePath);</span><br><span class="line"></span><br><span class="line">        LocalServices.addService(InputManagerInternal.class, <span class="keyword">new</span> LocalService());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接着看nativeinit方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">nativeInit</span><span class="params">(InputManagerService service,</span></span></span><br><span class="line"><span class="function"><span class="params">            Context context, MessageQueue messageQueue)</span></span>;</span><br></pre></td></tr></table></figure><p>是个native方法，跟着看native层中的实现</p><p><code>frameworks\base\services\core\jni\com_android_server_input_InputManagerService.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> jlong <span class="title">nativeInit</span><span class="params">(JNIEnv* env, jclass <span class="comment">/* clazz */</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        jobject serviceObj, jobject contextObj, jobject messageQueueObj)</span> </span>&#123;</span><br><span class="line">    sp&lt;MessageQueue&gt; messageQueue = android_os_MessageQueue_getMessageQueue(env, messageQueueObj);</span><br><span class="line">    <span class="keyword">if</span> (messageQueue == NULL) &#123;</span><br><span class="line">        jniThrowRuntimeException(env, <span class="string">"MessageQueue is not initialized."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    NativeInputManager* im = <span class="keyword">new</span> NativeInputManager(contextObj, serviceObj,</span><br><span class="line">            messageQueue-&gt;getLooper());</span><br><span class="line">    im-&gt;incStrong(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> reinterpret_cast&lt;jlong&gt;(im);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要工作new了一个NativeInputManager对象，下面接着看NativeInputManager的构造函数  </p><p><code>frameworks\base\services\core\jni\com_android_server_input_InputManagerService.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">NativeInputManager::NativeInputManager(jobject contextObj,</span><br><span class="line">        jobject serviceObj, <span class="keyword">const</span> sp&lt;Looper&gt;&amp; looper) :</span><br><span class="line">        mLooper(looper), mInteractive(<span class="keyword">true</span>) &#123;</span><br><span class="line">    JNIEnv* env = jniEnv();</span><br><span class="line"></span><br><span class="line">    mContextObj = env-&gt;NewGlobalRef(contextObj);</span><br><span class="line">    mServiceObj = env-&gt;NewGlobalRef(serviceObj);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">AutoMutex <span class="title">_l</span><span class="params">(mLock)</span></span>;</span><br><span class="line">        mLocked.systemUiVisibility = ASYSTEM_UI_VISIBILITY_STATUS_BAR_VISIBLE;</span><br><span class="line">        mLocked.pointerSpeed = <span class="number">0</span>;</span><br><span class="line">        mLocked.pointerGesturesEnabled = <span class="keyword">true</span>;</span><br><span class="line">        mLocked.showTouches = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mInteractive = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    sp&lt;EventHub&gt; eventHub = <span class="keyword">new</span> EventHub();</span><br><span class="line">    mInputManager = <span class="keyword">new</span> InputManager(eventHub, <span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要工作: 创建了EventHub对象以及InputManager对象</p><p>接着看InputManager的构造函数<br><code>frameworks\native\services\inputflinger\InputManager.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">InputManager::InputManager(</span><br><span class="line">        <span class="keyword">const</span> sp&lt;EventHubInterface&gt;&amp; eventHub,</span><br><span class="line">        <span class="keyword">const</span> sp&lt;InputReaderPolicyInterface&gt;&amp; readerPolicy,</span><br><span class="line">        <span class="keyword">const</span> sp&lt;InputDispatcherPolicyInterface&gt;&amp; dispatcherPolicy) &#123;</span><br><span class="line">    mDispatcher = <span class="keyword">new</span> InputDispatcher(dispatcherPolicy);</span><br><span class="line">    mReader = <span class="keyword">new</span> InputReader(eventHub, readerPolicy, mDispatcher);</span><br><span class="line">    initialize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> InputManager::initialize() &#123;</span><br><span class="line">    mReaderThread = <span class="keyword">new</span> InputReaderThread(mReader);</span><br><span class="line">    mDispatcherThread = <span class="keyword">new</span> InputDispatcherThread(mDispatcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建了两个对象: InputDispatcher和InputReader，接着调用了initialize()，initialize()中分别new了两个线程: InputReaderThread和InputDispatcherThread，那这两个线程是在什么时机起来的呢?</p><p>故事回到了文章开始的地方，InputManagerService创建完之后会调用InputManagerService的start方法，这个start方法中又去调用了nativeStart方法<br><code>frameworks\base\services\core\jni\com_android_server_input_InputManagerService.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeStart</span><span class="params">(JNIEnv* env, jclass <span class="comment">/* clazz */</span>, jlong ptr)</span> </span>&#123;</span><br><span class="line">    NativeInputManager* im = reinterpret_cast&lt;NativeInputManager*&gt;(ptr);</span><br><span class="line">    <span class="comment">//注意这里的getInputManager()返回的是一个InputManager对象</span></span><br><span class="line">    status_t result = im-&gt;getInputManager()-&gt;start();</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        jniThrowRuntimeException(env, <span class="string">"Input manager could not be started."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里NativeInputManager的getInputManager()返回的是一个InputManager对象，紧接着调用了start方法<br>所以接下来看下InputManager的start方法主要做了啥</p><p><code>frameworks\native\services\inputflinger\InputManager.cpp</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">status_t InputManager::start() &#123;</span><br><span class="line">    status_t result = mDispatcherThread-&gt;run(<span class="string">"InputDispatcher"</span>, PRIORITY_URGENT_DISPLAY);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    result = mReaderThread-&gt;run(<span class="string">"InputReader"</span>, PRIORITY_URGENT_DISPLAY);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里启动了InputManager中initialize()创建的InputReaderThread和InputDispatcherThread这两个线程</p><p>至此InputManagerService的创建流程讨论完毕，流程还是比较简单的，下文将讨论EventHub</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，高考第一天，好紧张</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目中遇到事件没有传到上层的问题，虽然问题最终得以解决，不过在问题处理中感知input系统有些东西遗忘了，觉得有必要再拿出完整的梳理一遍，后续将通过系列文章进行梳理，文章借鉴深入理解Android5.0一书，不过后续文章均会基于Android N分析&lt;/p&gt;
&lt;p&gt;以下
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个滑动冲突问题的分析流程</title>
    <link href="http://lihaizhou.top/2018/06/06/%E4%B8%80%E4%B8%AA%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    <id>http://lihaizhou.top/2018/06/06/一个滑动冲突问题的分析流程/</id>
    <published>2018-06-06T13:58:15.000Z</published>
    <updated>2018-06-06T14:53:32.956Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题需求</strong><br>原先效果是用户在<code>ViewPager</code>上长按会弹出一个<code>dialog</code>，现在加了一个需求：用户有时候在长按时出现手指向左或向右微小滑动，此时也需要判断为长按并弹出<code>dialog</code></p><p><strong>初步分析</strong><br>外边的<code>ViewPager</code>是可以左右滑动的，现在希望单个界面即子<code>view</code>接收到触摸事件后能接管本次事件序列中后续事件，即子<code>View</code>接收到触摸事件后，注意此时手指未松开，所以还处于一次完整的事件序列中，等待一段时间<code>Android</code>默认是<code>400ms</code>后会识别为长按事件，此时子<code>View</code>的长按事件被触发。那么问题来了，怎么才能在子<code>view</code>接收到触摸事件并能接管本次事件序列呢？<br>这就要说到老生常谈的事件拦截了，正常拦截事件有外部拦截和内部拦截两种，这里因为代码中子view已写好现成的手势判断的相关方法，故这里为简单起见，采用内部拦截法来实现。</p><p><strong>修改方法</strong><br><code>LauncherPagerAdapter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> mTouchSlop = <span class="number">40</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.launcher_item_layout, <span class="keyword">null</span>);</span><br><span class="line">        ViewGroup parent = (ViewGroup) view.getParent();</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line"><span class="comment">//Add begin</span></span><br><span class="line">        view.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">                    <span class="comment">//省略部分代码</span></span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                        <span class="keyword">if</span> (Math.abs(event.getY() - mDownY) &lt;= ((<span class="keyword">float</span>) mTouchSlop) &amp;&amp; Math.abs(event.getX() - mDownX) &lt;= ((<span class="keyword">float</span>) mTouchSlop)) &#123;</span><br><span class="line">                                view.getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>); <span class="comment">//当出现上下左右距离不超过40时，父view不拦截事件, 交给子view</span></span><br><span class="line">                         &#125;</span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Math.abs(event.getX() - mDownX) &gt; ((<span class="keyword">float</span>) mTouchSlop))&#123;</span><br><span class="line">                               view.getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>); <span class="comment">//当出现左右距离超过40时，父view拦截事件并自行消耗</span></span><br><span class="line">                          &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> <span class="comment">//Add end</span></span><br><span class="line">       <span class="comment">//省略部分代码</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>这样的话，再对子<code>view</code>添加长按事件处理，也能顺利的接收到长按事件了。效果上便达到了微小长按滑动也会进入长按事件的处理逻辑中，注意此时微小的向左或向右滑动，<code>viewpager</code>本身并不会移动了，修改之前<code>Viewpager</code>会跟着滑动。</p><p>这个问题里用的是内部拦截法，其实也可以自定义<code>Viewpager</code>中重写<code>canScrool()</code>方法，这里就不介绍了，相比而言稍稍麻烦了一点</p><p>下面顺便说下滑动冲突的一般解决思路，这是个老生常谈的话题，解决方法已形成固定的流程，需要根据具体的实际业务需求灵活改变。</p><p>先介绍几个事件分发处理的几个常见方法<br><code>dispatchTouchEvent</code><br>主要是用来分发事件<br><code>onInterceptTouchEvent</code><br>主要是用来拦截事件的(ViewGroup才有这个方法，View没有这个方法)<br><code>onTouchEvent</code><br>这个方法主要是用来处理事件的<br><code>requestDisallowInterceptTouchEvent(true)</code><br>这个方法能够影响父View是否拦截事件，true 表示父 View 不拦截事件，false 表示父 View 拦截事件</p><p><strong>滑动冲突一般解决方法</strong><br>1.外部拦截法<br>一般是通过重写父控件的<code>onInterceptTouchEvent</code>方法，然后根据具体的需求，来决定父控件是否拦截事件。如果拦截返回返回true，不拦截返回false，比如说希望上下滑动不要拦截，那么就在父控件的<code>onInterceptTouchEvent</code>方法里的<code>MotionEvent.ACTION_MOVE</code>这个case块里返回false就好。如果希望指定位置不拦截，则再进行位置判断即可。</p><p>对于外部拦截法我们的核心工作一般是做在<code>ACTION_MOVE</code>中，不过需要注意的是不要在<code>ACTION_DOWN</code>中返回 true，这里一旦为true，则同一个事件序列<code>ViewGroup</code>的<code>disPatchTouchEvent</code>就不会再调用<code>onInterceptTouchEvent</code>方法了 。那么本次的事件序列后续都由父view接管，子view对这次事件序列也就没有了机会去消耗事件。归纳起来就是一句话: 父控件一旦拦截了事件，那么同一个事件序列的所有事件都将交给它处理。</p><p>2.内部拦截法<br>内部拦截法主要是通过调用父控件的 <code>requestDisallowInterceptTouchEvent</code>方法，传进去一个<code>boolean</code>参数值，true为请求父控件不拦截<br>需要注意的是父控件的<code>onInterceptTouchEvent</code>方法中的<code>ACTION_DOWN</code>事件不要拦截，一旦父控件拦截<code>ACTION_DOWN</code>事件，那么事件无法传递到子元素之中，内部拦截法也就无法起作用了</p><p>Good night!</p><hr><font color="#000000" size="2" face="楷体">住所，晚上，听着歌，洗漱完毕准备休息</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题需求&lt;/strong&gt;&lt;br&gt;原先效果是用户在&lt;code&gt;ViewPager&lt;/code&gt;上长按会弹出一个&lt;code&gt;dialog&lt;/code&gt;，现在加了一个需求：用户有时候在长按时出现手指向左或向右微小滑动，此时也需要判断为长按并弹出&lt;code&gt;dia
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>月度小结--20180604</title>
    <link href="http://lihaizhou.top/2018/06/04/%E6%9C%88%E5%BA%A6%E5%B0%8F%E7%BB%93-20180604/"/>
    <id>http://lihaizhou.top/2018/06/04/月度小结-20180604/</id>
    <published>2018-06-04T13:41:11.000Z</published>
    <updated>2018-06-04T14:45:00.781Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>本文距个人主页搭建完成已经一个月了，这两年总觉得时间过得真的太快了，一眨眼2018年已经开始进入了下半年。时间的流逝是任何人都无法阻止的，那么就让逝去的光阴多点值得回忆的东西吧</p><p><strong>近一个月</strong><br>1.搬家了，坐标从浦东挪到了浦西的闵行，毕业后第一次住在浦西，新的住所很不错，我很喜欢，是毕业至今住的最舒服的住所。到公司也比较近，晚上有时候还可以搭班车回家。室友有一个一岁多的胖猫叫<code>橘子</code>，我喜欢叫<code>胖橘</code>，他很胖不过超级乖，属于那种任人摆布型。<br>2.开始了健身计划，每周三次，周末打打乒乓球，一个多月下来感觉体力明显比之前好一些，精力更充沛了。<br>3.开始每周更新笔记，记录工作中的一些问题的分析流程，厘清的过程加深理解。  </p><p>工作至今，发现一个现象，与不同类型的同事协作开发，会有不同的体验，大体遇到如下几类：</p><p>1.技术能力强，做事积极，态度和蔼，同这种同事共事往往会比较舒服，不仅仅是协作开发效率会比较高。更重要的是，这类同事做事比较有保障，做事方式有条理，沉着冷静。对于问题的解决，会慢慢厘清，最后会输出清晰有效的解决方案。这类型同事往往懂得技术积累，懂得提升自己。同这样的同事协作开发的话，不仅仅身心愉悦，往往会对自己产生一种正面的影响。</p><p>2.技术薄弱，做事积极，容易慌乱，这里指工作两年以上的同事，遇到过很多或多或少存在遇事慌乱，缺乏条理性，将问题当作一种负担看待，遇事急于解决或将问题抛出去，问题的结果往往不尽如人意，见过不少同事遇到出现应用异常，第一反应就是上去不管三七二十一直接<code>try-catch</code>起来，让人哭笑不得，同这样的同事协作开发的话，会比较尴尬。</p><p>3.技术薄弱，做事无厘头，这类同事在分析问题上比较跳跃，遇问题急于上网查询答案，所做的简单需求往往一堆bug，代码没有规范可言，这类同事如果刚毕业能够理解，后面有矫正的机会。工作至今，遇到过一些工作几年的同事也是如此，比较令人费解。同这样的同事协作开发的话，会比较尴尬。</p><p>4.技术一般，做事激进，这类同事做事比较风风火火，遇事不退缩，急于在最短时间内解决掉，仿佛问题的存在就是定时炸弹，这类同事做起事来比较高调，加班也比较猛，往往深得领导喜欢。但其实仔细观察下来，问题的解决速度是很快，但方案往往不是最优，很多时候埋了一些坑进去。同这样的同事协作开发的话，总觉得不太靠谱。</p><p>5.技术一般，做事稳当，这类同事能够应付平时的日常需求开发，遇到棘手问题，往往难以梳理清楚并解决，做事完全是以完成为目标，不太会去主动想办法提升个人能力，这类型同事比较常见，同这样的同事协作开发的话，一般项目进度不成问题。</p><p>6.技术尚可，做事圆滑，这类同事一般在公司工作有些年头，头衔较高，对应的薪水也比较高，遇事不会慌乱，态度也比较和蔼，就是在问题的解决上不会完全投入，属于能拖则拖，能给芯片商比如联发科高通分析的，决不自己分析，平时比较低调，属于混日子型，同这类同事协作开发往往只能在一旁干着急。</p><p>今后的日子里，努力像第一类同事学习并努力成为这样的人</p><p><strong>一点闲话</strong><br>渐渐的发现，呆在一个环境时间久了，会容易受到周围环境以及身边同事的做事方式影响，会慢慢被同化，现在相信一个公司对人的塑造是多少会有影响的，可能是好的方向，也可能是不好的方向。<br>就我个人而言，我觉得自己并不是一个自我驱动力很强的人，倘若处在一个很安逸没有挑战的环境中，必然会变得懒散，不思进取。可能会在某个周末的清晨大梦初醒一般，开始懊悔虚度年华，于是立马像打了鸡血一般，猛立目标并付诸行动，一个礼拜后发现还是虚度年华舒服啊，于是计划不了了之了。<br>这次与以往不同的是，以笔记的形式记录下来，逼迫自己坚持下来，但愿能够一直保持。  </p><p>谨以此文，与君共勉</p><p>Come on! Steven!</p><p>最后附一张胖橘照片<br><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/06/04/%E6%9C%88%E5%BA%A6%E5%B0%8F%E7%BB%93-20180604/pangju.jpg?raw=true" align="left" style=" width:300px;height:80 px"> <br><br><br><br><br><br><br><br><br><br><br><br><br></p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，听着罗大佑的恋曲1990，惬意</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;本文距个人主页搭建完成已经一个月了，这两年总觉得时间过得真的太快了，一眨眼2018年已经开始进入了下半年。时间的流逝是任何人都无法阻止的，那么就让逝去的光阴多点值得回忆的东西吧&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;近一个月&lt;/stro
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个底层内存分配异常导致无法进入launcher问题分析</title>
    <link href="http://lihaizhou.top/2018/05/31/%E4%B8%80%E4%B8%AA%E5%BA%95%E5%B1%82%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%BC%82%E5%B8%B8%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E8%BF%9B%E5%85%A5launcher%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://lihaizhou.top/2018/05/31/一个底层内存分配异常导致无法进入launcher问题分析/</id>
    <published>2018-05-31T02:31:47.000Z</published>
    <updated>2018-05-31T03:27:34.770Z</updated>
    
    <content type="html"><![CDATA[<p>问题平台<br><code>Android go</code></p><p>复现概率<br><code>always</code></p><p>问题现象<br><code>解锁后，Launcher图标未能加载出，按虚拟back,home键，下拉状态栏响应异常缓慢</code></p><p><strong>前言</strong><br><code>Android Go</code>是一个简化版本的<code>Android O</code>（及以上），能够在超低端的Android手机上流畅运行，具体量化就是RAM仅为<code>512MB</code>至<code>1GB</code>的机型</p><p><strong>初步分析</strong><br>首次合入MTK提供的<code>Android Go</code>代码后开机，解锁后<code>Launcher</code>图标没有加载出，鉴于该平台代码是芯片商已经调试稳定后释放，<code>Launcher</code>本身应用出问题的概率比较小，操作发现下拉状态栏异常卡顿</p><p>第一反应是会不会是内存很紧张呢? 有可能的哦，ok, 下面开始分析日志</p><p><strong>Step1：日志分析</strong><br>命令调mtk日志应用, 没调出来？ok….这一点比较异常, 后面会解释原因，既然完整的mtk日志抓取不了，下面通过<code>adb logcat</code>命令抓取</p><p><strong>logcat日志</strong><br>日志中开头部分就看到如下异常，根据日志可以知道对应的操作是用命令调mtk日志应用，正是我上面的操作，报的异常说我们尝试去调用的对象已经挂了, ok…大写的懵逼  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">31.691</span> I/ActivityManager(  <span class="number">619</span>): Start proc <span class="number">5691</span>:com.mediatek.mtklogger/u0a46 <span class="keyword">for</span> activity com.mediatek.mtklogger/.MainActivity</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>): Exception when starting activity com.mediatek.mtklogger/.MainActivity</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>): android.os.DeadObjectException</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transactNative(Native Method)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transact(Binder.java:<span class="number">764</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IApplicationThread$Stub$<span class="built_in">Proxy</span>.scheduleLaunchActivity(IApplicationThread.java:<span class="number">1232</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.realStartActivityLocked(ActivityStackSupervisor.java:<span class="number">1457</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked(ActivityStackSupervisor.java:<span class="number">1579</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStack.makeVisibleAndRestartIfNeeded(ActivityStack.java:<span class="number">2069</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStack.ensureActivitiesVisibleLocked(ActivityStack.java:<span class="number">1873</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.ensureActivitiesVisibleLocked(ActivityStackSupervisor.java:<span class="number">3366</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.attachApplicationLocked(ActivityStackSupervisor.java:<span class="number">988</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplicationLocked(ActivityManagerService.java:<span class="number">7276</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplication(ActivityManagerService.java:<span class="number">7343</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">291</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3013</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">32.297</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.Binder.execTransact(Binder.java:<span class="number">697</span>)</span><br></pre></td></tr></table></figure><p>接着往下看  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">43</span>:<span class="number">33.035</span> I/ActivityManager(  <span class="number">619</span>): Process com.mediatek.mtklogger (pid <span class="number">5705</span>) has died: fore TOP</span><br></pre></td></tr></table></figure><p>mtk日志这个进程挂了，这种情况头一次见，那会不会Launcher中没有加载出图标也是因为进程挂了, ok, 搜索下<code>&quot;launcher&quot;</code>关键字  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>): Exception <span class="keyword">in</span> <span class="keyword">new</span> application when starting activity com.android.launcher3/.Launcher</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>): android.os.DeadObjectException</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transactNative(Native Method)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transact(Binder.java:<span class="number">764</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IApplicationThread$Stub$<span class="built_in">Proxy</span>.scheduleLaunchActivity(IApplicationThread.java:<span class="number">1232</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.realStartActivityLocked(ActivityStackSupervisor.java:<span class="number">1457</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.attachApplicationLocked(ActivityStackSupervisor.java:<span class="number">974</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplicationLocked(ActivityManagerService.java:<span class="number">7276</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplication(ActivityManagerService.java:<span class="number">7343</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">291</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3013</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.865</span> W/ActivityManager(  <span class="number">619</span>):    at android.os.Binder.execTransact(Binder.java:<span class="number">697</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>): Exception thrown launching activities <span class="keyword">in</span> ProcessRecord&#123;<span class="number">922</span>c6e6 <span class="number">5794</span>:com.android.launcher3/u0a12&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>): android.os.DeadObjectException</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transactNative(Native Method)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.os.BinderProxy.transact(Binder.java:<span class="number">764</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.app.IApplicationThread$Stub$<span class="built_in">Proxy</span>.scheduleLaunchActivity(IApplicationThread.java:<span class="number">1232</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.realStartActivityLocked(ActivityStackSupervisor.java:<span class="number">1457</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityStackSupervisor.attachApplicationLocked(ActivityStackSupervisor.java:<span class="number">974</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplicationLocked(ActivityManagerService.java:<span class="number">7276</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.attachApplication(ActivityManagerService.java:<span class="number">7343</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:<span class="number">291</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:<span class="number">3013</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.874</span> E/ActivityManager(  <span class="number">619</span>):    at android.os.Binder.execTransact(Binder.java:<span class="number">697</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">05</span><span class="number">-21</span> <span class="number">05</span>:<span class="number">45</span>:<span class="number">31.886</span> I/ActivityManager(  <span class="number">619</span>): Killing <span class="number">5794</span>:com.android.launcher3/u0a12 (adj <span class="number">0</span>): error during init</span><br></pre></td></tr></table></figure><p>果然<code>Launcher</code>进程也挂了，ok…有意思</p><p>通过<code>adb shell cat /proc/meminfo</code>命令看下机器内存情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MemTotal:        <span class="number">162404</span> kB</span><br><span class="line"></span><br><span class="line">MemFree:            <span class="number">5804</span> kB</span><br><span class="line"></span><br><span class="line">MemAvailable:      <span class="number">40740</span> kB</span><br><span class="line"></span><br><span class="line">Buffers:            <span class="number">672</span> kB</span><br><span class="line"></span><br><span class="line">Cached:            <span class="number">34920</span> kB</span><br><span class="line"></span><br><span class="line">SwapCached:          <span class="number">796</span> kB</span><br><span class="line"></span><br><span class="line">Active:            <span class="number">29176</span> kB</span><br><span class="line"></span><br><span class="line">Inactive:          <span class="number">31516</span> kB</span><br></pre></td></tr></table></figure><p>这里的内存<code>MemTotal</code>为什么这么小？ 同驱动沟通了下，这个项目是<code>512</code>内存，可是现在打印出来<code>MemTotal</code>只有一百多<br>这里顺便说下上面几个重点关键字</p><p><code>MemTotal</code><br>系统从加电开始到引导完成，firmware/BIOS要保留一些内存，kernel本身要占用一些内存，最后剩下可供kernel支配的内存就是MemTotal。这个值在系统运行期间一般是固定不变的。</p><p><code>MemFree</code><br>表示系统尚未使用的内存。[MemTotal-MemFree]就是已被用掉的内存。</p><p><code>MemAvailable</code><br>有些应用程序会根据系统的可用内存大小自动调整内存申请的多少，所以需要一个记录当前可用内存数量的统计值，<code>MemFree</code>并不适用，因为<code>MemFree</code>不能代表全部可用的内存，系统中有些内存虽然已被使用但是可以回收的，比如<code>cache/buffer</code>、<code>slab</code>都有一部分可以回收，所以这部分可回收的内存加上<code>MemFree</code>才是系统可用的内存，即<code>MemAvailable</code>。<code>/proc/meminfo</code>中的<code>MemAvailable</code>是内核使用特定的算法估算出来的，要注意这是一个估计值，并不精确</p><p>这里说下<code>cache</code>和<code>buffers</code>的作用，<code>Linux</code>利用空闲的物理内存，划分出一部份空间，作为<code>cache</code>和<code>buffers</code>，目的是为了提高数据访问性能<br>这里可以看到我们当前的系统可用的内存大约在<code>40M</code>左右，这显然是不够的，现在问题方向指向了内存</p><p>下面抓取一份串口日志，看下其中的内存分配</p><p><strong>串口日志</strong></p><p>如下片段是开机动画完成后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;-(<span class="number">0</span>)[<span class="number">0</span>:swapper]Memory: <span class="number">159860</span>K/<span class="number">454336</span>K available (<span class="number">11264</span>K kernel code, <span class="number">931</span>K rwdata, <span class="number">3320</span>K rodata, <span class="number">1024</span>K init, <span class="number">2701</span>K bss, <span class="number">294476</span>K reserved, <span class="number">0</span>K cma-reserved, <span class="number">0</span>K highmem)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;-(<span class="number">0</span>)[<span class="number">0</span>:swapper]Virtual kernel memory layout:</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    vector  : <span class="number">0xffff0000</span> - <span class="number">0xffff1000</span>  (  <span class="number">4</span> kB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    fixmap  : <span class="number">0xffc00000</span> - <span class="number">0xfff00000</span>  (<span class="number">3072</span> kB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    vmalloc : <span class="number">0xe0800000</span> - <span class="number">0xff800000</span>  ( <span class="number">496</span> MB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    lowmem  : <span class="number">0xc0000000</span> - <span class="number">0xe0000000</span>  ( <span class="number">512</span> MB)</span><br><span class="line"></span><br><span class="line">[    <span class="number">0.000000</span>] &lt;<span class="number">0</span>&gt;    pkmap  : <span class="number">0xbfe00000</span> - <span class="number">0xc0000000</span>  (  <span class="number">2</span> MB)</span><br></pre></td></tr></table></figure><p>这里可以看到<code>lowmem</code>的确是<code>512M</code>(lowmem代表linux最终可支配的物理内存大小)</p><p>这里有个奇怪的地方是<code>reserved</code>占据了<code>294476K</code> ，将近300M，开机结束也没有变化。</p><p>这里对<code>Reserved memory</code>的概念进行一个描述</p><p><code>Linux</code>中保留内存(<code>Reserved memory</code>)是指把系统中的一部分内存保留起来，内核不会为它建立页表，一般的应用程序无法访问到这段内存。在板卡调试、内存测试和设备<code>DAM</code>调试的过程中，可以运用这种办法，先验证系统在只有低端内存的情况下能否顺利启动；</p><p>那么reserved占据的这块内存是提供给谁使用的呢？ 继续看串口日志，看到modem加载的片段如下  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载modem</span></span><br><span class="line">[<span class="number">2030</span>] Enter load_modem_image v2<span class="number">.0</span></span><br><span class="line">[<span class="number">2030</span>] ccci_request_mem: ret:<span class="number">4000000</span>, <span class="attr">smem_limit</span>:<span class="number">78000000</span>, <span class="attr">align</span>:<span class="number">2000000</span></span><br><span class="line">[<span class="number">2031</span>] mblock[<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x3c000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2033</span>] mblock_reserve dbg[<span class="number">0</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2033</span>] mblock[<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x40000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2035</span>] mblock_reserve dbg[<span class="number">1</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2035</span>] mblock[<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x40000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2037</span>] mblock_reserve dbg[<span class="number">2</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2037</span>] mblock[<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x40000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2039</span>] mblock_reserve dbg[<span class="number">3</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2039</span>] mblock[<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x1ab58000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x5a000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2041</span>] mblock_reserve dbg[<span class="number">4</span>]: <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2041</span>] mblock[<span class="number">5</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x5fc50000</span>, <span class="attr">target</span>: <span class="number">4</span>, <span class="attr">reserved_addr</span>: <span class="number">0x5a000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x4000000</span></span><br><span class="line">[<span class="number">2043</span>] mblock_reserve dbg[<span class="number">5</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2043</span>] mblock[<span class="number">4</span>]: <span class="number">450</span>f8000, <span class="number">14</span>f08000 <span class="keyword">from</span> mblock</span><br><span class="line">mblock[<span class="number">5</span>]: <span class="number">5e000000</span>, <span class="number">1</span>c50000 <span class="keyword">from</span> mblock</span><br><span class="line">[<span class="number">2045</span>] mblock_reserve: <span class="number">5</span>a000000 - <span class="number">5e000000</span> <span class="keyword">from</span> mblock <span class="number">4</span></span><br><span class="line">[<span class="number">2045</span>] mblock_reserve [<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span></span><br><span class="line">[<span class="number">2046</span>] mblock_reserve [<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span></span><br><span class="line">[<span class="number">2046</span>] mblock_reserve [<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span></span><br><span class="line">[<span class="number">2047</span>] mblock_reserve [<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span></span><br><span class="line">[<span class="number">2048</span>] mblock_reserve [<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x14f08000</span></span><br><span class="line">[<span class="number">2048</span>] mblock_reserve [<span class="number">5</span>].start: <span class="number">0x5e000000</span>, <span class="attr">sz</span>: <span class="number">0x1c50000</span></span><br><span class="line">[<span class="number">2049</span>] mblock_reserve [<span class="number">6</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span></span><br><span class="line">[<span class="number">2050</span>] mblock_reserve-R[<span class="number">0</span>].start: <span class="number">0x5ff80000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">1</span> name:log_store</span><br><span class="line">[<span class="number">2051</span>] mblock_reserve-R[<span class="number">1</span>].start: <span class="number">0x44600000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-reserved</span><br><span class="line">[<span class="number">2051</span>] mblock_reserve-R[<span class="number">2</span>].start: <span class="number">0x5fe00000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-log-reserved</span><br><span class="line">[<span class="number">2052</span>] mblock_reserve-R[<span class="number">3</span>].start: <span class="number">0x44000000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">0</span> name:dtb_kernel_addr_mb</span><br><span class="line">[<span class="number">2053</span>] mblock_reserve-R[<span class="number">4</span>].start: <span class="number">0x40008000</span>, <span class="attr">sz</span>: <span class="number">0x3200000</span> map:<span class="number">0</span> name:kernel_addr_mb</span><br><span class="line">[<span class="number">2054</span>] mblock_reserve-R[<span class="number">5</span>].start: <span class="number">0x45000000</span>, <span class="attr">sz</span>: <span class="number">0xf8000</span> map:<span class="number">0</span> name:ramdisk_addr_mb</span><br><span class="line">[<span class="number">2055</span>] mblock_reserve-R[<span class="number">6</span>].start: <span class="number">0x5fc50000</span>, <span class="attr">sz</span>: <span class="number">0x1b0000</span> map:<span class="number">0</span> name:framebuffer</span><br><span class="line">[<span class="number">2056</span>] mblock_reserve-R[<span class="number">7</span>].start: <span class="number">0x5ff70000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:SPM-reserved</span><br><span class="line">[<span class="number">2057</span>] mblock_reserve-R[<span class="number">8</span>].start: <span class="number">0x5ff60000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:MCUPM-reserved</span><br><span class="line">[<span class="number">2058</span>] mblock_reserve-R[<span class="number">9</span>].start: <span class="number">0x5a000000</span>, <span class="attr">sz</span>: <span class="number">0x4000000</span> map:<span class="number">0</span> name:ccci</span><br><span class="line">[<span class="number">2059</span>] request size: <span class="number">0x04000000</span>, get start address: <span class="number">0x5a000000</span></span><br><span class="line">[<span class="number">2060</span>] Using defalut RAT all <span class="keyword">in</span> one</span><br><span class="line">[<span class="number">2060</span>] cust_tel_mode_idx val:<span class="number">-1</span></span><br><span class="line">[<span class="number">2060</span>] [LK_ENV]get_env opt_ps1_rat <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2061</span>] [LK_ENV]get_env opt_md1_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2061</span>] [LK_ENV]get_env opt_md3_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2062</span>] [LK_ENV]get_env opt_c2k_lte_mode <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2063</span>] [LK_ENV]get_env opt_lte_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2063</span>] [LK_ENV]get_env opt_c2k_support <span class="keyword">from</span> area <span class="number">1</span></span><br><span class="line">[<span class="number">2064</span>] <span class="keyword">default</span> rat:LF_LT_W_T_G[<span class="number">0x3b</span>][<span class="number">0x0</span>]</span><br><span class="line">[<span class="number">2064</span>] -- MD1 --</span><br><span class="line">[<span class="number">2064</span>] mblock[<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x30000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2066</span>] mblock_reserve dbg[<span class="number">0</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2066</span>] mblock[<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x34000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2068</span>] mblock_reserve dbg[<span class="number">1</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2069</span>] mblock[<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x34000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2070</span>] mblock_reserve dbg[<span class="number">2</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2071</span>] mblock[<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x34000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2072</span>] mblock_reserve dbg[<span class="number">3</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2073</span>] mblock[<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x14f08000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x0</span>, <span class="attr">target</span>: <span class="number">-1</span>, <span class="attr">reserved_addr</span>: <span class="number">0x4a000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2074</span>] mblock_reserve dbg[<span class="number">4</span>]: <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2075</span>] mblock[<span class="number">5</span>].start: <span class="number">0x5e000000</span>, <span class="attr">sz</span>: <span class="number">0x1c50000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x5a000000</span>, <span class="attr">target</span>: <span class="number">4</span>, <span class="attr">reserved_addr</span>: <span class="number">0x4e000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2076</span>] mblock_reserve dbg[<span class="number">5</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2077</span>] mblock[<span class="number">6</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span>, <span class="attr">limit</span>: <span class="number">0x78000000</span>, <span class="attr">max_addr</span>: <span class="number">0x5a000000</span>, <span class="attr">target</span>: <span class="number">4</span>, <span class="attr">reserved_addr</span>: <span class="number">0x4e000000</span>,<span class="attr">reserved_size</span>: <span class="number">0x10000000</span></span><br><span class="line">[<span class="number">2079</span>] mblock_reserve dbg[<span class="number">6</span>]: <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">[<span class="number">2079</span>] mblock_reserve: <span class="number">4</span>a000000 - <span class="number">5</span>a000000 <span class="keyword">from</span> mblock <span class="number">4</span></span><br><span class="line">[<span class="number">2080</span>] mblock_reserve [<span class="number">0</span>].start: <span class="number">0x40000000</span>, <span class="attr">sz</span>: <span class="number">0x8000</span></span><br><span class="line">[<span class="number">2080</span>] mblock_reserve [<span class="number">1</span>].start: <span class="number">0x43208000</span>, <span class="attr">sz</span>: <span class="number">0xdf8000</span></span><br><span class="line">[<span class="number">2081</span>] mblock_reserve [<span class="number">2</span>].start: <span class="number">0x44080000</span>, <span class="attr">sz</span>: <span class="number">0x580000</span></span><br><span class="line">[<span class="number">2082</span>] mblock_reserve [<span class="number">3</span>].start: <span class="number">0x44640000</span>, <span class="attr">sz</span>: <span class="number">0x9c0000</span></span><br><span class="line">[<span class="number">2082</span>] mblock_reserve [<span class="number">4</span>].start: <span class="number">0x450f8000</span>, <span class="attr">sz</span>: <span class="number">0x4f08000</span></span><br><span class="line">[<span class="number">2083</span>] mblock_reserve [<span class="number">5</span>].start: <span class="number">0x5e000000</span>, <span class="attr">sz</span>: <span class="number">0x1c50000</span></span><br><span class="line">[<span class="number">2084</span>] mblock_reserve [<span class="number">6</span>].start: <span class="number">0x5fe40000</span>, <span class="attr">sz</span>: <span class="number">0x120000</span></span><br><span class="line">[<span class="number">2084</span>] mblock_reserve-R[<span class="number">0</span>].start: <span class="number">0x5ff80000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">1</span> name:log_store</span><br><span class="line">[<span class="number">2085</span>] mblock_reserve-R[<span class="number">1</span>].start: <span class="number">0x44600000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-reserved</span><br><span class="line">[<span class="number">2086</span>] mblock_reserve-R[<span class="number">2</span>].start: <span class="number">0x5fe00000</span>, <span class="attr">sz</span>: <span class="number">0x40000</span> map:<span class="number">0</span> name:atf-log-reserved</span><br><span class="line">[<span class="number">2087</span>] mblock_reserve-R[<span class="number">3</span>].start: <span class="number">0x44000000</span>, <span class="attr">sz</span>: <span class="number">0x80000</span> map:<span class="number">0</span> name:dtb_kernel_addr_mb</span><br><span class="line">[<span class="number">2088</span>] mblock_reserve-R[<span class="number">4</span>].start: <span class="number">0x40008000</span>, <span class="attr">sz</span>: <span class="number">0x3200000</span> map:<span class="number">0</span> name:kernel_addr_mb</span><br><span class="line">[<span class="number">2089</span>] mblock_reserve-R[<span class="number">5</span>].start: <span class="number">0x45000000</span>, <span class="attr">sz</span>: <span class="number">0xf8000</span> map:<span class="number">0</span> name:ramdisk_addr_mb</span><br><span class="line">[<span class="number">2090</span>] mblock_reserve-R[<span class="number">6</span>].start: <span class="number">0x5fc50000</span>, <span class="attr">sz</span>: <span class="number">0x1b0000</span> map:<span class="number">0</span> name:framebuffer</span><br><span class="line">[<span class="number">2091</span>] mblock_reserve-R[<span class="number">7</span>].start: <span class="number">0x5ff70000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:SPM-reserved</span><br><span class="line">[<span class="number">2092</span>] mblock_reserve-R[<span class="number">8</span>].start: <span class="number">0x5ff60000</span>, <span class="attr">sz</span>: <span class="number">0x10000</span> map:<span class="number">0</span> name:MCUPM-reserved</span><br><span class="line">[<span class="number">2093</span>] mblock_reserve-R[<span class="number">9</span>].start: <span class="number">0x5a000000</span>, <span class="attr">sz</span>: <span class="number">0x4000000</span> map:<span class="number">0</span> name:ccci</span><br><span class="line">[<span class="number">2093</span>] mblock_reserve-R[<span class="number">10</span>].start: <span class="number">0x4a000000</span>, <span class="attr">sz</span>: <span class="number">0x10000000</span> map:<span class="number">1</span> name:ccci</span><br><span class="line"><span class="comment">//此处modem申请了268左右的内存</span></span><br><span class="line">[<span class="number">2094</span>] request size: <span class="number">0x10000000</span>, get start address: <span class="number">0x4a000000</span></span><br></pre></td></tr></table></figure><p>该问题同驱动同事沟通了下，驱动同事发现<code>modem</code>占据的内存没有释放掉，因为<code>modem</code>加载过程中会request一块比较大的内存，如上述日志中描述大概<code>268</code>的内存，正常加载完<code>modem</code>后会释放掉这块内存  </p><p>这个问题中的软件版本<code>modem</code>因为存在异常没有合入但是内存依旧申请了，导致加载没有完成直接返回，后面<code>modem</code>占据的内存释放的流程没有走，这块内存就一直占据着，这也就是我们上面开始看的串口日志中<code>reserved</code>占用比较大的原因，<code>reserved</code>占据的内存在开机过程中是变化的，后面驱动同事修复<code>modem</code>异常并合入<code>modem</code>后，机器内存分配正常，进入<code>launcher</code>加载图标正常</p><p>该问题很早就定位到内存问题，排查到modem问题耗时较久，ok，问题分析到此</p><p>Have a good day!</p><hr><font color="#000000" size="2" face="楷体">本文写于住所，上传于公司，午休时间，电脑前，雨停了，等外卖</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题平台&lt;br&gt;&lt;code&gt;Android go&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;复现概率&lt;br&gt;&lt;code&gt;always&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题现象&lt;br&gt;&lt;code&gt;解锁后，Launcher图标未能加载出，按虚拟back,home键，下拉状态栏响应异常缓慢&lt;/co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个屏幕滑动无响应问题的分析流程</title>
    <link href="http://lihaizhou.top/2018/05/29/%E4%B8%80%E4%B8%AA%E5%B1%8F%E5%B9%95%E6%BB%91%E5%8A%A8%E6%97%A0%E5%93%8D%E5%BA%94%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    <id>http://lihaizhou.top/2018/05/29/一个屏幕滑动无响应问题的分析流程/</id>
    <published>2018-05-29T11:19:15.000Z</published>
    <updated>2018-05-30T02:30:23.304Z</updated>
    
    <content type="html"><![CDATA[<p>问题现象<br><code>在应用中出现屏幕右滑无响应</code></p><p>复现概率:<br><code>once</code></p><p>问题平台:<br><code>Android N</code>  <code>MT6739</code></p><p><strong>Step1 初步分析</strong><br>考虑到当时按<code>power</code>键能够退出应用回到待机(项目中对<code>power</code>键功能进行了定制)，说明没有发生死机<br>刚接到问题的时候，第一反应是觉得可能发生了<code>ANR</code>，与测试同事沟通，当时没有弹框出来。ok，拿到机器后, 将<code>data/anr</code>文件夹pull出来看下，内容为空。进到<code>event</code>日志中. 搜索<code>&quot;am_anr&quot;</code>关键字，没有搜到。测试同事所言没错，当时没有弹框出来是因为并没有发生<code>ANR</code>。<br>那会不会是低内存呢，这样猜想并不是没有道理的。因为我们机器本身内存比较小，之前经常出现内存不足的情况。进到<code>kernel</code>日志中看下<code>lowmemorykiller</code>杀进程的次数，只有四次且都不在问题发生的时间段，看来当时内存没有紧张<br>ok,大写的懵逼…下面开始分析日志  </p><p><strong>Step2 日志分析</strong><br>测试同事反馈当时因为右滑无法退出(项目中对右滑进行了特殊处理代替虚拟按键返回键)，只能通过power键退出<br>ok,先找到按power键的时间点</p><p><strong>step 2.1 main日志</strong><br>我们知道按键会先到<code>PhoneWindowManager</code>的<code>interceptKeyBeforeQueueing</code>函数进行处理，然后才会分发给应用，power键也不例外，只是power键会做特殊处理不会分发给应用<br>根据测试同事反馈的时间点，在<code>main</code>日志中搜到如下对应时间点的日志片段  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">42.019221</span>  <span class="number">1038</span>  <span class="number">1103</span> D WindowManager: interceptKeyBeforeQueueing: eventKeyEvent &#123; action=ACTION_UP, keyCode=KEYCODE_POWER, scanCode=<span class="number">116</span>, metaState=<span class="number">0</span>, flags=<span class="number">0x8</span>, repeatCount=<span class="number">0</span>, eventTime=<span class="number">667518</span>, downTime=<span class="number">667326</span>, deviceId=<span class="number">1</span>, source=<span class="number">0x101</span> &#125;</span><br></pre></td></tr></table></figure><p>这一处的日志便是<code>PhoneWindowManager</code>的<code>interceptKeyBeforeQueueing</code>函数中打印，问题点确定了在<code>18:12:42.019221</code>之前三四十秒的时间段内，ok，范围缩小了</p><p><strong>step2.2 event日志</strong><br>这里顺便说下，<code>event</code>日志一般记录了各个<code>activity</code>周期及事件，我个人一般看<code>event</code>日志主要看当时的界面变化过程以及确定anr时间点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">53.766062</span>  <span class="number">1038</span>  <span class="number">1091</span> I am_resume_activity: [<span class="number">0</span>,<span class="number">123117617</span>,<span class="number">8</span>,com.XXX.music/.MusicActivity]</span><br><span class="line">....</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">42.130951</span>  <span class="number">1038</span>  <span class="number">1053</span> I am_pause_activity: [<span class="number">0</span>,<span class="number">123117617</span>,com.XXX.music/.MusicActivity]</span><br><span class="line">....</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">42.223856</span>  <span class="number">1038</span>  <span class="number">1274</span> I am_resume_activity: [<span class="number">0</span>,<span class="number">69789570</span>,<span class="number">2</span>,com.XXX.launcher/.activity.MainActivity]</span><br></pre></td></tr></table></figure><p>这里可以确定问题发生时界面停留在音乐应用，后面因为按了<code>power</code>键的缘故回到了待机界面</p><p><strong>step2.3 sys日志</strong><br>对于<code>sys</code>日志呢，一般输出的是系统日志，一般在main日志里找不到可以在<code>sys</code>日志里找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Music应用开始播放音乐</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">10</span>:<span class="number">01.384340</span>  <span class="number">2827</span>  <span class="number">2827</span> E MusicActivity: Receive: 讲真的</span><br><span class="line">…..</span><br><span class="line"><span class="comment">//按power键点亮屏幕</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">53.771419</span>  <span class="number">1038</span>  <span class="number">1103</span> D WindowManager: interceptKeyBeforeQueueing: eventKeyEvent &#123; action=ACTION_UP, keyCode=KEYCODE_POWER, scanCode=<span class="number">116</span>, metaState=<span class="number">0</span>, flags=<span class="number">0x8</span>, repeatCount=<span class="number">0</span>, eventTime=<span class="number">619270</span>, downTime=<span class="number">619127</span>, deviceId=<span class="number">1</span>, source=<span class="number">0x101</span> &#125;</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">53.843990</span>  <span class="number">1558</span>  <span class="number">1558</span> D LauncherMainActivity: screen on</span><br><span class="line">......</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.195224</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: mSwipeFireable=<span class="literal">false</span> mSwipeType=<span class="number">1</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.866527</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down pointerIndex=<span class="number">0</span> trackingIndex=<span class="number">0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.866599</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down x=<span class="number">0.0</span> y=<span class="number">100.58091</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.874044</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">100.58091</span>-&gt;<span class="number">253.94191</span>) <span class="keyword">in</span> <span class="number">10</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.883822</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">100.58091</span>-&gt;<span class="number">0.0</span>) <span class="keyword">in</span> <span class="number">19</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.893310</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">20.912863</span>,<span class="number">100.58091</span>-&gt;<span class="number">203.15353</span>) <span class="keyword">in</span> <span class="number">29</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">11</span>:<span class="number">58.895061</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: Firing onSwipeFromLeft</span><br><span class="line">.....</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">32.243408</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: mSwipeFireable=<span class="literal">false</span> mSwipeType=<span class="number">4</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">32.414854</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down pointerIndex=<span class="number">0</span> trackingIndex=<span class="number">0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">32.415105</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down x=<span class="number">0.0</span> y=<span class="number">0.0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">32.423284</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">0.0</span>-&gt;<span class="number">253.94191</span>) <span class="keyword">in</span> <span class="number">10</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">32.423391</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: Firing onSwipeFromTop</span><br><span class="line">.....</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.611702</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: mSwipeFireable=<span class="literal">false</span> mSwipeType=<span class="number">1</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.861078</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down pointerIndex=<span class="number">0</span> trackingIndex=<span class="number">0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.861215</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down x=<span class="number">0.0</span> y=<span class="number">86.63901</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.868822</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">86.63901</span>-&gt;<span class="number">253.94191</span>) <span class="keyword">in</span> <span class="number">9</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.878235</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">86.63901</span>-&gt;<span class="number">0.0</span>) <span class="keyword">in</span> <span class="number">19</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.888622</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">31.86722</span>,<span class="number">86.63901</span>-&gt;<span class="number">179.25311</span>) <span class="keyword">in</span> <span class="number">29</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">34.888704</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: Firing onSwipeFromLeft</span><br><span class="line">.....</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">37.952528</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: mSwipeFireable=<span class="literal">false</span> mSwipeType=<span class="number">4</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">38.195578</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down pointerIndex=<span class="number">0</span> trackingIndex=<span class="number">0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">38.195683</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down x=<span class="number">0.0</span> y=<span class="number">0.0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">38.201532</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">0.0</span>-&gt;<span class="number">253.94191</span>) <span class="keyword">in</span> <span class="number">9</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">38.201606</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: Firing onSwipeFromTop</span><br><span class="line">......</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">40.888861</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: mSwipeFireable=<span class="literal">false</span> mSwipeType=<span class="number">1</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.131752</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down pointerIndex=<span class="number">0</span> trackingIndex=<span class="number">0</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.131874</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> down x=<span class="number">0.0</span> y=<span class="number">95.60166</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.137845</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">95.60166</span>-&gt;<span class="number">253.94191</span>) <span class="keyword">in</span> <span class="number">9</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.147534</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">0.0</span>,<span class="number">95.60166</span>-&gt;<span class="number">0.0</span>) <span class="keyword">in</span> <span class="number">19</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.157208</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">20.912863</span>,<span class="number">95.60166</span>-&gt;<span class="number">209.12863</span>) <span class="keyword">in</span> <span class="number">29</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">41.157279</span>  <span class="number">1038</span>  <span class="number">1082</span> D SystemGestures: Firing onSwipeFromLeft</span><br><span class="line">......</span><br><span class="line"><span class="comment">//按power键返回待机界面</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">42.019221</span>  <span class="number">1038</span>  <span class="number">1103</span> D WindowManager: interceptKeyBeforeQueueing: eventKeyEvent &#123; action=ACTION_UP, keyCode=KEYCODE_POWER, scanCode=<span class="number">116</span>, metaState=<span class="number">0</span>, flags=<span class="number">0x8</span>, repeatCount=<span class="number">0</span>, eventTime=<span class="number">667518</span>, downTime=<span class="number">667326</span>, deviceId=<span class="number">1</span>, source=<span class="number">0x101</span> &#125;</span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">12</span>:<span class="number">42.036468</span>  <span class="number">1558</span>  <span class="number">1558</span> D LauncherService: goback to homescreen and clear all background apps</span><br><span class="line">......</span><br><span class="line"><span class="comment">//此时通过launcher菜单再次进入Music应用，提示处于高温下</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">21</span>:<span class="number">56.784003</span>  <span class="number">1558</span>  <span class="number">1558</span> I LauncherMainActivity: onItemClick, position = <span class="number">10</span></span><br><span class="line"><span class="number">05</span><span class="number">-28</span> <span class="number">18</span>:<span class="number">21</span>:<span class="number">56.784848</span>  <span class="number">1558</span>  <span class="number">1558</span> D LauncherMainActivity: isNetwrokOk = :<span class="literal">true</span>,isBinded = :<span class="literal">true</span>,isHighTemper = :<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这段日志呢可以看出屏幕无响应的一段时间内，是有手势滑动发生的</p><p><strong>step2.4 代码分析</strong><br>既然有手势滑动为什么界面不能退出呢，是不是我们自己写的判断条件出了问题，上面日志中这些片段  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemGestures: pointer <span class="number">0</span> moved (<span class="number">0.0</span>-&gt;<span class="number">20.912863</span>,<span class="number">95.60166</span>-&gt;<span class="number">209.12863</span>) <span class="keyword">in</span> <span class="number">29</span></span><br></pre></td></tr></table></figure><p>代表什么意思呢, 跟到代码里看一看<br><code>frameworks/base/services/core/java/com/android/server/policy/SystemGesturesPointerEventListener.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">detectSwipe</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> time, <span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> fromX = mDownX[i];</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> fromY = mDownY[i];</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> elapsed = time - mDownTime[i];</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">"pointer "</span> + mDownPointerId[i]</span><br><span class="line">                + <span class="string">" moved ("</span> + fromX + <span class="string">"-&gt;"</span> + x + <span class="string">","</span> + fromY + <span class="string">"-&gt;"</span> + y + <span class="string">") in "</span> + elapsed);</span><br><span class="line">         <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志打印的代表<code>X坐标</code>,<code>Y坐标</code>的滑动变化以及滑动时间</p><p>此时再来看看日志中问题发生时测试同事滑动轨迹,<code>Y坐标</code>看上去没有问题,<code>X坐标</code>看着有点奇怪，怎么都是从0开始的呢,且松开时移动距离非常小<br>那么如此小的移动距离，有没有满足滑动退出的条件呢？因为这一块判断条件是客制化的，需要<code>X坐标</code>滑动起码达到<code>60</code>才能满足滑动退出的条件，这里就不贴出具体代码</p><p>小结：<br>在测试同事反应屏幕滑动无响应的时间段内，40秒的时间段内有四次手势发生，手指滑动的X坐标变化幅度很小<br>鉴于<code>SystemGesturesPointerEventListener.java</code>这支文件中的<code>detectSwipe</code>函数会对<code>X坐标</code>的变化幅度进行判断，至少达到<code>60</code>以上才会返回SWIPE_BACK(该type类型是根据项目客制化添加的)<br>很显然上面日志中X坐标变化幅度没有达到这个要求，也就导致了onPointerEvent函数中走不到inject back action逻辑中，从而系统判断没有返回事件发生<br>同测试同事沟通当时是正常的尝试滑动退出，故上面的X坐标变化历程显然有误，数值过小且起始点坐标与落下点坐标也与实际情况不符</p><p><strong>综合下来: 判定是屏幕报点不准导致</strong></p><p>Have a good day!</p><hr><font color="#000000" size="2" face="楷体">公司，上班前，听着歌，惬意</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题现象&lt;br&gt;&lt;code&gt;在应用中出现屏幕右滑无响应&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;复现概率:&lt;br&gt;&lt;code&gt;once&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题平台:&lt;br&gt;&lt;code&gt;Android N&lt;/code&gt;  &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开源框架Zxing生成二维码流程分析(Android)</title>
    <link href="http://lihaizhou.top/2018/05/28/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6Zxing%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90-Android/"/>
    <id>http://lihaizhou.top/2018/05/28/开源框架Zxing生成二维码流程分析-Android/</id>
    <published>2018-05-28T07:55:37.000Z</published>
    <updated>2018-05-28T08:29:52.938Z</updated>
    
    <content type="html"><![CDATA[<p>项目中用到了<code>Zxing</code>的开源框架，使用起来比较简单，依赖包导入，根据官方说明demo做就可以了。接下来梳理下其生成二维码的流程，所谓知其然知其所以然，ok, let’s go</p><p>应用端核心代码  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hashtable hints= <span class="keyword">new</span> Hashtable();</span><br><span class="line">hints.put(EncodeHintType.CHARACTER_SET, <span class="string">"utf-8"</span>);</span><br><span class="line">hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">hints.put(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br><span class="line">BitMatrix bitMatrix = <span class="keyword">new</span> QRCodeWriter().encode(url, BarcodeFormat.QR_CODE, width, height,hints);</span><br></pre></td></tr></table></figure><p><code>url</code>: 即数据源，可以根据项目需求传入指定的url，比如一个下载应用的链接网址<br><code>width height</code> : 应用端设置的二维码宽高<br><code>hints</code>: 主要用于配置二维码的一些参数，比如纠错级别，白边宽度等  </p><p>最核心的一句代码即:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BitMatrix bitMatrix = <span class="keyword">new</span> QRCodeWriter().encode(url, BarcodeFormat.QR_CODE, width, height,hints);</span><br></pre></td></tr></table></figure><p>接下来以此为切入点展开分析</p><p><strong>源码分析流程</strong></p><p>如下代码均摘自Zxing github项目(<a href="https://github.com/zxing/zxing/" target="_blank" rel="noopener">https://github.com/zxing/zxing/</a>)</p><p><strong>Step1</strong><br><code>QRCodeWriter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BitMatrix <span class="title">encode</span><span class="params">(String contents,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BarcodeFormat format,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> height,</span></span></span><br><span class="line"><span class="function"><span class="params">                          Map&lt;EncodeHintType,?&gt; hints)</span> <span class="keyword">throws</span> WriterException </span>&#123;</span><br><span class="line">    <span class="comment">//检查传入内容是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (contents.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Found empty contents"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不是QR_CODE直接跑出异常, 我们前面应用端传入的正是QR_CODE</span></span><br><span class="line">    <span class="keyword">if</span> (format != BarcodeFormat.QR_CODE) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Can only encode QR_CODE, but got "</span> + format);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检测宽高数值是否异常</span></span><br><span class="line">    <span class="keyword">if</span> (width &lt; <span class="number">0</span> || height &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Requested dimensions are too small: "</span> + width + <span class="string">'x'</span> +</span><br><span class="line">          height);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//纠错级别初始值是Low</span></span><br><span class="line">    ErrorCorrectionLevel errorCorrectionLevel = ErrorCorrectionLevel.L;</span><br><span class="line">    <span class="keyword">int</span> quietZone = QUIET_ZONE_SIZE;</span><br><span class="line">    <span class="comment">//检测hints是否为空即用户是否有设置</span></span><br><span class="line">    <span class="keyword">if</span> (hints != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="comment">//检测hints中用户是否设置了纠错级别，有的话使用用户自己设置的纠错级别</span></span><br><span class="line">      <span class="keyword">if</span> (hints.containsKey(EncodeHintType.ERROR_CORRECTION)) &#123;</span><br><span class="line">        errorCorrectionLevel =                         ErrorCorrectionLevel.valueOf(hints.get(EncodeHintType.ERROR_CORRECTION).toString());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//检测hints中用户是否设置了白边宽度，有的话使用用户自己设置的白边宽度</span></span><br><span class="line">      <span class="keyword">if</span> (hints.containsKey(EncodeHintType.MARGIN)) &#123;</span><br><span class="line">        quietZone = Integer.parseInt(hints.get(EncodeHintType.MARGIN).toString());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    如下两句代码是这个函数最核心的两句</span><br><span class="line">    <span class="comment">//这里是将传入的contents转换成QRcode</span></span><br><span class="line">    QRCode code = Encoder.encode(contents, errorCorrectionLevel, hints);</span><br><span class="line">   <span class="comment">//这里将QRcode转换为BitMatrix并jhi加入白边</span></span><br><span class="line">    <span class="keyword">return</span> renderResult(code, width, height, quietZone);(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step2</strong><br><code>Encoder.java</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_BYTE_MODE_ENCODING = <span class="string">"ISO-8859-1"</span>; <span class="comment">//如果hints中不设置编码格式的话，默认使用此编码</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> QRCode <span class="title">encode</span><span class="params">(String content,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ErrorCorrectionLevel ecLevel,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Map&lt;EncodeHintType,?&gt; hints)</span> <span class="keyword">throws</span> WriterException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine what character encoding has been specified by the caller, if any</span></span><br><span class="line">    String encoding = DEFAULT_BYTE_MODE_ENCODING;</span><br><span class="line">    <span class="comment">//hint不为空且其中包含key为CHARACTER_SET的值</span></span><br><span class="line">    <span class="keyword">boolean</span> hasEncodingHint = hints != <span class="keyword">null</span> &amp;&amp; hints.containsKey(EncodeHintType.CHARACTER_SET);</span><br><span class="line">    <span class="keyword">if</span> (hasEncodingHint) &#123;</span><br><span class="line">      <span class="comment">//从hints中取key为CHARACTER_SET的值，即对应的编码方式</span></span><br><span class="line">      encoding = hints.get(EncodeHintType.CHARACTER_SET).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pick an encoding mode appropriate for the content. Note that this will not attempt to use</span></span><br><span class="line">    <span class="comment">// multiple modes / segments even if that were more efficient. Twould be nice.</span></span><br><span class="line">    <span class="comment">//根据传入的内容选择合适的编码模型</span></span><br><span class="line">    Mode mode = chooseMode(content, encoding);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This will store the header information, like mode and</span></span><br><span class="line">    <span class="comment">// length, as well as "header" segments like an ECI segment.</span></span><br><span class="line">    BitArray headerBits = <span class="keyword">new</span> BitArray();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Append ECI segment if applicable</span></span><br><span class="line">    <span class="keyword">if</span> (mode == Mode.BYTE &amp;&amp; (hasEncodingHint || !DEFAULT_BYTE_MODE_ENCODING.equals(encoding))) &#123;</span><br><span class="line">      CharacterSetECI eci = CharacterSetECI.getCharacterSetECIByName(encoding);</span><br><span class="line">      <span class="keyword">if</span> (eci != <span class="keyword">null</span>) &#123;</span><br><span class="line">        appendECI(eci, headerBits);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (With ECI in place,) Write the mode marker</span></span><br><span class="line">    appendModeInfo(mode, headerBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Collect data within the main segment, separately, to count its size if needed. Don't add it to</span></span><br><span class="line">    <span class="comment">// main payload yet.</span></span><br><span class="line">    BitArray dataBits = <span class="keyword">new</span> BitArray();</span><br><span class="line">    appendBytes(content, mode, dataBits, encoding);</span><br><span class="line"></span><br><span class="line">    Version version;</span><br><span class="line">    <span class="comment">//查询hints是否指定了使用的版本，没有的话则使用默认版本</span></span><br><span class="line">    <span class="keyword">if</span> (hints != <span class="keyword">null</span> &amp;&amp; hints.containsKey(EncodeHintType.QR_VERSION)) &#123;</span><br><span class="line">      <span class="keyword">int</span> versionNumber = Integer.parseInt(hints.get(EncodeHintType.QR_VERSION).toString());</span><br><span class="line">      version = Version.getVersionForNumber(versionNumber);</span><br><span class="line">      <span class="keyword">int</span> bitsNeeded = calculateBitsNeeded(mode, headerBits, dataBits, version);</span><br><span class="line">      <span class="keyword">if</span> (!willFit(bitsNeeded, version, ecLevel)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> WriterException(<span class="string">"Data too big for requested version"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      version = recommendVersion(ecLevel, mode, headerBits, dataBits);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BitArray headerAndDataBits = <span class="keyword">new</span> BitArray();</span><br><span class="line">    headerAndDataBits.appendBitArray(headerBits);</span><br><span class="line">    <span class="comment">// Find "length" of main segment and write it</span></span><br><span class="line">    <span class="keyword">int</span> numLetters = mode == Mode.BYTE ? dataBits.getSizeInBytes() : content.length();</span><br><span class="line">    appendLengthInfo(numLetters, version, mode, headerAndDataBits);</span><br><span class="line">    <span class="comment">// Put data together into the overall payload</span></span><br><span class="line">    headerAndDataBits.appendBitArray(dataBits);</span><br><span class="line"></span><br><span class="line">    Version.ECBlocks ecBlocks = version.getECBlocksForLevel(ecLevel);</span><br><span class="line">    <span class="keyword">int</span> numDataBytes = version.getTotalCodewords() - ecBlocks.getTotalECCodewords();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Terminate the bits properly.</span></span><br><span class="line">    terminateBits(numDataBytes, headerAndDataBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Interleave data bits with error correction code.</span></span><br><span class="line">    BitArray finalBits = interleaveWithECBytes(headerAndDataBits,</span><br><span class="line">                                              version.getTotalCodewords(),</span><br><span class="line">                                              numDataBytes,</span><br><span class="line">                                              ecBlocks.getNumBlocks());</span><br><span class="line"></span><br><span class="line">    QRCode qrCode = <span class="keyword">new</span> QRCode();</span><br><span class="line"></span><br><span class="line">    qrCode.setECLevel(ecLevel);<span class="comment">// 纠错级别</span></span><br><span class="line">    qrCode.setMode(mode);</span><br><span class="line">    qrCode.setVersion(version);<span class="comment">// 设置Qrcode包的版本</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  Choose the mask pattern and set to "qrCode".</span></span><br><span class="line">    <span class="keyword">int</span> dimension = version.getDimensionForVersion();</span><br><span class="line">    ByteMatrix matrix = <span class="keyword">new</span> ByteMatrix(dimension, dimension);</span><br><span class="line">    <span class="comment">//这里遍历所有的Mask Pattern并根据一定的判定准则来选择最佳的Mask Pattern</span></span><br><span class="line">    <span class="keyword">int</span> maskPattern = chooseMaskPattern(finalBits, ecLevel, version, matrix);</span><br><span class="line">    qrCode.setMaskPattern(maskPattern);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Build the matrix and set it to "qrCode".</span></span><br><span class="line">    MatrixUtil.buildMatrix(finalBits, ecLevel, version, maskPattern, matrix);</span><br><span class="line">    qrCode.setMatrix(matrix);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> qrCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step3</strong><br>这一步最为关键，将上一步得到的<code>QRcode</code>转换为<code>BitMatrix</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note that the input matrix uses 0 == white, 1 == black, while the output matrix uses</span></span><br><span class="line">  <span class="comment">// 0 == black, 255 == white (i.e. an 8 bit greyscale bitmap).</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BitMatrix <span class="title">renderResult</span><span class="params">(QRCode code, <span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> quietZone)</span> </span>&#123;</span><br><span class="line">    ByteMatrix input = code.getMatrix();</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> inputWidth = input.getWidth();</span><br><span class="line">    <span class="keyword">int</span> inputHeight = input.getHeight();</span><br><span class="line">    <span class="comment">//这里在原始数据基础上加上边距即白边的距离，分别计算出二维码宽高</span></span><br><span class="line">    <span class="keyword">int</span> qrWidth = inputWidth + (quietZone * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> qrHeight = inputHeight + (quietZone * <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//这里进一步根据应用端传入的宽高进行对比，得出最终要输出的宽高</span></span><br><span class="line">    <span class="keyword">int</span> outputWidth = Math.max(width, qrWidth);</span><br><span class="line">    <span class="keyword">int</span> outputHeight = Math.max(height, qrHeight);</span><br><span class="line">    <span class="comment">//计算缩放比例</span></span><br><span class="line">    <span class="keyword">int</span> multiple = Math.min(outputWidth / qrWidth, outputHeight / qrHeight);</span><br><span class="line">    <span class="comment">// Padding includes both the quiet zone and the extra white pixels to accommodate the requested</span></span><br><span class="line">    <span class="comment">// dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.</span></span><br><span class="line">    <span class="comment">// If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will</span></span><br><span class="line">    <span class="comment">// handle all the padding from 100x100 (the actual QR) up to 200x160.</span></span><br><span class="line">    <span class="comment">//计算左边白边的宽度</span></span><br><span class="line">    <span class="keyword">int</span> leftPadding = (outputWidth - (inputWidth * multiple)) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//计算顶部白边的宽度</span></span><br><span class="line">    <span class="keyword">int</span> topPadding = (outputHeight - (inputHeight * multiple)) / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    BitMatrix output = <span class="keyword">new</span> BitMatrix(outputWidth, outputHeight);</span><br><span class="line">    <span class="comment">//双重循环, 将ByteMatrix内容进行padding计算后转换为BitMatrix</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> inputY = <span class="number">0</span>, outputY = topPadding; inputY &lt; inputHeight; inputY++, outputY += multiple) &#123;</span><br><span class="line">      <span class="comment">// Write the contents of this row of the barcode</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> inputX = <span class="number">0</span>, outputX = leftPadding; inputX &lt; inputWidth; inputX++, outputX += multiple) &#123;</span><br><span class="line">        <span class="keyword">if</span> (input.get(inputX, inputY) == <span class="number">1</span>) &#123;</span><br><span class="line">          output.setRegion(outputX, outputY, multiple, multiple);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里白边宽度在应用端是根据属性<code>Margin</code>来设置, 示例如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hints.put(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>Step4</strong><br>拿到<code>BitMatrix</code>后就可以转换为<code>bitmap</code>进而转换为<code>image</code>显示</p><p>如下是将BitMatrix转成bitmap的过程 </p><pre><code class="java"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) {       <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) {             <span class="keyword">if</span> (bitMatrix.get(x, y)) {                 pixels[y * width+ x] = <span class="number">0xff000000</span>;              } <span class="keyword">else</span> {                 pixels[y * width+ x] = <span class="number">0xFFF1C900</span>;               }          } }Bitmap bitmap = Bitmap.createBitmap(width,height, Bitmap.Config.ARGB_8888);bitmap.setPixels(pixels, <span class="number">0</span>,width, <span class="number">0</span>, <span class="number">0</span>,width,height);  </code></pre><p>这里的height,width代表应用端设置的宽高值</p><p><strong>Step5</strong><br>添加logo，这个比较简单，在Bitmap中间再绘制一个Bitmap就可以了  </p><pre><code class="java"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">addLogo</span><span class="params">(Bitmap src, Bitmap logo)</span> </span>{  <span class="keyword">if</span> (logo == <span class="keyword">null</span>) {      <span class="keyword">return</span> src;  }  <span class="comment">// 获取图片的宽高</span>  <span class="keyword">int</span> srcWidth = src.getWidth();  <span class="keyword">int</span> srcHeight = src.getHeight();  <span class="keyword">int</span> logoWidth = logo.getWidth();  <span class="keyword">int</span> logoHeight = logo.getHeight();  <span class="keyword">if</span> (logoWidth == <span class="number">0</span> || logoHeight == <span class="number">0</span>) {      <span class="keyword">return</span> src;  }  <span class="comment">// logo大小为二维码整体大小的1/5</span> <span class="keyword">float</span> scaleFactor = srcWidth * <span class="number">1.0f</span> / <span class="number">5</span> / logoWidth; Bitmap bitmap = Bitmap.createBitmap(srcWidth, srcHeight, Bitmap.Config.ARGB_8888); <span class="keyword">try</span> {      Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);      canvas.drawBitmap(src, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);      canvas.scale(scaleFactor, scaleFactor, srcWidth / <span class="number">2</span>, srcHeight / <span class="number">2</span>);      canvas.drawBitmap(logo, (srcWidth - logoWidth) / <span class="number">2</span>, (srcHeight - logoHeight) / <span class="number">2</span>, <span class="keyword">null</span>);      canvas.save(Canvas.ALL_SAVE_FLAG);      canvas.restore(); } <span class="keyword">catch</span> (Exception e) {      bitmap = <span class="keyword">null</span>;      e.getStackTrace(); }      <span class="keyword">return</span> bitmap;}</code></pre><p>Zxing中的功能较多且支持多平台，这里讨论的是Android平台上的生成二维码流程，到此讨论完毕</p><p>Have a good day!</p><hr><font color="#000000" size="2" face="楷体">本文写于公司午休时间，电脑前，头顶蓝牙耳机，听着惬意的歌</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目中用到了&lt;code&gt;Zxing&lt;/code&gt;的开源框架，使用起来比较简单，依赖包导入，根据官方说明demo做就可以了。接下来梳理下其生成二维码的流程，所谓知其然知其所以然，ok, let’s go&lt;/p&gt;
&lt;p&gt;应用端核心代码  &lt;/p&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个无法开机问题的分析流程</title>
    <link href="http://lihaizhou.top/2018/05/17/%E4%B8%80%E4%B8%AA%E6%97%A0%E6%B3%95%E5%BC%80%E6%9C%BA%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    <id>http://lihaizhou.top/2018/05/17/一个无法开机问题的分析流程/</id>
    <published>2018-05-17T02:42:27.000Z</published>
    <updated>2018-05-17T03:12:04.346Z</updated>
    
    <content type="html"><![CDATA[<p>问题平台<br><code>Android7.1.1</code>  <code>MT6739</code></p><p>问题现象<br><code>走完一部分开机动画后停留在recovery界面，无法进入系统</code></p><p>初步分析:<br>开机后进入<code>recovery</code> ，以往经验来看猜测是重要进程启动异常，可能被连续被kill</p><p><strong>Step1 日志分析</strong><br>需要的日志：eng版本<code>uart log</code>+<code>main log</code>(如果已经进入Android的话)+<code>data/aee_exp</code>下的db文件(如果有db生成的话)</p><p><strong>Step1.1  抓取串口日志</strong><br>首先说下串口日志的获取方式:<br>串口线中的白色接<code>TX</code>，黑色线接地，我这里是在windows下抓取，使用了一个<code>SSCOM</code>的工具，<code>MTK</code>平台上波特率需要选择<code>921600</code>, 这个工具使用之前需要安装<code>usb to serial</code>驱动，不然会出现识别不了设备的情况<br>这里需要说明的是需要使用eng版本获取日志，如果是user版本的话，需要做一些额外工作</p><p><strong>Step1.2 分析串口日志</strong><br>首先先看下系统走到了哪一步，关键步骤都是会有对应的日志输出，从过往的项目以及分析经验，已形成了一套既定的分析流程<br>这里说下分析串口日志中的一些关键字如下  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="string">"Preparing for EL3 exit to normal world, LK"</span></span><br><span class="line">   如果串口log里面没有走到这里，说明在PL就卡住了，这句表示进入LK</span><br><span class="line"><span class="number">2</span>、<span class="string">"lk finished --&gt; jump to linux kernel"</span></span><br><span class="line">   如果串口log里面没有走到这里，但是上面走到了，说明在lk卡住了，这句表示进入kernel</span><br><span class="line"><span class="number">3</span>、<span class="string">"Kernel_init_done"</span></span><br><span class="line">   这句表示kernel初始化完成了，正准备启动init进程，如果这就没有走到：请搜索关键字initcall，</span><br><span class="line">   initcall是顺序执行例如module_init注册的init函数，看看卡在哪个call back上</span><br><span class="line"><span class="number">4</span>、<span class="string">"BOOTPROF"</span></span><br><span class="line">   这是开机过程中，每走过一个重要阶段都会打印的标志，例如上面Kernel_init_done这一句就会打上这个标志</span><br><span class="line"><span class="number">5</span>、<span class="string">"init: init first stage started"</span></span><br><span class="line">   这句表示init进程正常起来执行</span><br><span class="line"><span class="number">6</span>、<span class="string">"fs_mgr"</span> 和<span class="string">"e2fsck"</span></span><br><span class="line">   这里标志是在检查和mount 文件系统，如果失败会有如下log：fs_mgr_mount_all returned an error fs_mgr_mount_all returned unexpected error <span class="number">255</span></span><br><span class="line"><span class="number">7</span>、<span class="string">"zygote"</span></span><br><span class="line">   Starting service <span class="string">'zygote'</span>：这里表示要启动zygote,如果没有这一句表示zygote还没启动，则要检查之前的initrc执行情况，文件系统mount情况</span><br><span class="line"><span class="number">8</span>、<span class="string">"SysServerInit_START"</span></span><br><span class="line">   启动system_server</span><br><span class="line"><span class="number">9</span>、<span class="string">"system_server"</span></span><br><span class="line">   这里表示system_server有起来</span><br><span class="line"><span class="number">10</span>、<span class="string">"BOOT_Animation:END"</span></span><br><span class="line">   表示开机动画正常结束，进入安卓</span><br></pre></td></tr></table></figure><p>我们的这份日志中1-9均有打印，说明已经进入了Android部分，在init进程起来后，如下片段  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[  <span class="number">29.560029</span>] &lt;<span class="number">1</span>&gt;.(<span class="number">1</span>)[<span class="number">1</span>:init]init: Service <span class="string">'healthd'</span> (pid <span class="number">310</span>) killed by signal <span class="number">11</span></span><br></pre></td></tr></table></figure><p>后面紧跟着很多关键进程均打出sig 9即被kill掉<br>关于linux signal信号表对应关系如下(只列出部分)  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SIGHUP      <span class="number">1</span>           Term    终端的挂断或进程死亡</span><br><span class="line">SIGINT      <span class="number">2</span>           Term    来自键盘的中断信号</span><br><span class="line">SIGQUIT     <span class="number">3</span>           Core    来自键盘的离开信号</span><br><span class="line">SIGILL      <span class="number">4</span>           Core    非法指令</span><br><span class="line">SIGABRT     <span class="number">6</span>           Core    来自abort的异常信号</span><br><span class="line">SIGFPE      <span class="number">8</span>           Core    浮点例外</span><br><span class="line">SIGKILL     <span class="number">9</span>           Term    杀死</span><br><span class="line">SIGSEGV     <span class="number">11</span>          Core    段非法错误(内存引用无效)</span><br></pre></td></tr></table></figure><p>这里大概明白问题出在了<code>healthd</code>上，这是与电量相关的进程，在user space中</p><p>对于是否需要抓取logcat日志，可以看看串口日志中是否有如下片段  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Starting service <span class="string">'zygote'</span></span><br></pre></td></tr></table></figure><p>这一步代表<code>zygote</code>起来了，这时候就必须要抓取logcat进一步分析，我们这笔问题中该日志片段有打印出来，所以需要抓取logcat进一步分析</p><p><strong>Step1.3 分析logcat日志</strong><br>找到如下片段，说明<code>data/aee_exp</code>下面也有<code>db</code>文件生成了  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">05</span><span class="number">-02</span> <span class="number">04</span>:<span class="number">52</span>:<span class="number">48.578</span> I/AEE_AED (  <span class="number">350</span>): Revision: <span class="string">'0'</span></span><br><span class="line"><span class="number">05</span><span class="number">-02</span> <span class="number">04</span>:<span class="number">52</span>:<span class="number">48.578</span> I/AEE_AED (  <span class="number">350</span>): ABI: <span class="string">'arm'</span></span><br><span class="line"><span class="number">05</span><span class="number">-02</span> <span class="number">04</span>:<span class="number">52</span>:<span class="number">48.579</span> I/AEE_AED (  <span class="number">350</span>): pid: <span class="number">310</span>, <span class="attr">tid</span>: <span class="number">310</span>, <span class="attr">name</span>: healthd  &gt;&gt;&gt; <span class="regexp">/sbin/</span>healthd &lt;&lt;&lt;</span><br><span class="line">05-02 04:52:48.580 I/AEE_AED (  350): signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x2</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    r0 00000002  r1 00000002  r2 0000089c  r3 00000006</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    r4 ffffffff  r5 00000001  r6 00000000  r7 00000002</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    r8 becc68bc  r9 0008819e  sl ffffffff  fp becc6680</span><br><span class="line">05-02 04:52:48.616 I/AEE_AED (  350):    ip 00000002  sp becc6678  lr 0005d494  pc 0005e16c  cpsr 20070030</span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350): </span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350): backtrace:</span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350):    #00 pc 0005e16c  /sbin/healthd</span><br><span class="line">05-02 04:52:48.723 I/AEE_AED (  350):    #01 pc 0005d490  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #02 pc 00056c04  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #03 pc 00064ef4  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #04 pc 00027e00  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #05 pc 0000b291  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #06 pc 0000b10d  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #07 pc 000088c9  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #08 pc 00008d73  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #09 pc 00008c3f  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #10 pc 00008afb  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #11 pc 0005e055  /sbin/healthd</span><br><span class="line">05-02 04:52:48.724 I/AEE_AED (  350):    #12 pc 000086c8  /sbin/healthd</span><br></pre></td></tr></table></figure><p>这里出现了段错误，这个时候需要拿出看家小工具<code>addr2line</code>来定位到代码出错的位置，这里顺便说下<code>Addr2line</code>的作用  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Addr2line （它是标准的 GNU Binutils 中的一部分）是一个可以将指令的地址和可执行映像转换成文件名、函数名和源代码行数的工具。这种功能对于将跟踪地址转换成更有意义的内容来说简直是太棒了</span><br></pre></td></tr></table></figure><p>我这里的addr2line使用的是代码工程中的，代码工程下有很多addr2line，这里就随便用了一个目录下的addr2line，另外分析还需要<code>out/target/product/XXX/symbols/sbin/healthd</code>文件，注意这里的<code>healthd</code>文件必须和日志中是同一套代码，否则可能分析出来的代码位置会有偏差</p><p>使用命令如下:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lihaizhou@ubuntu:~<span class="regexp">/Code/</span>sw710/<span class="number">6739</span>$ <span class="string">'/home/lihaizhou/Code/sw710/6739/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.11-4.8/bin/x86_64-linux-addr2line'</span> -e <span class="string">'/home/lihaizhou/Code/sw710/6739/out/target/product/lcsh6739_35_sw730/symbols/sbin/healthd'</span> <span class="number">0000</span>b291</span><br></pre></td></tr></table></figure><p>得到如下结果  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/cwd/system/core/healthd/BatteryMonitor.cpp:<span class="number">861</span></span><br></pre></td></tr></table></figure><p>进到<code>BatteryMonitor.cpp</code>第861行，是一句最近添加的日志  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KLOG_INFO(LOG_TAG, <span class="string">"BatteryMonitor cmd_send props.batteryStatus '%s'\n"</span>, props.batteryStatus);</span><br></pre></td></tr></table></figure><p><strong>Step2 问题解决</strong><br>仔细查看了这行日志, 发现是类型写错了，<code>props.batteryStatus</code>是整型，这里使用了字串类型打印，当然会报错了<br>ok，将类型修改为整型，重新编译烧录img到机器中，开机正常了</p><p><strong>小结</strong><br>对系统启动流程以及<code>addr2line</code>的使用比较熟悉的话，这笔问题分析还是比较容易的，ok，这笔问题分析到此为止</p><p>Have a good day！</p><font color="#000000" size="3" face="楷体"><br>另:<br>关于串口日志MTK online有相关FAQ可以参考<br>FAQ15320 不同模式下如何保持uart log一直打开<br><a href="http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ15320" target="_blank" rel="noopener">http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ15320</a><br>FAQ03891如何在User版本开启串口(Uart),抓取上层Log,开启输入控制台<br><a href="http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ03891" target="_blank" rel="noopener">http://online.mediatek.com/Pages/FAQ.aspx?List=SW&amp;FAQID=FAQ03891</a></font><hr><font color="#000000" size="2" face="楷体">公司午休时间，电脑前，黑眼圈，脑袋一片空白，肚子有点饿，等外卖</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题平台&lt;br&gt;&lt;code&gt;Android7.1.1&lt;/code&gt;  &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题现象&lt;br&gt;&lt;code&gt;走完一部分开机动画后停留在recovery界面，无法进入系统&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;初步分析:&lt;br&gt;开机后进入&lt;c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于开源框架SlidingUpPanel二次开发</title>
    <link href="http://lihaizhou.top/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    <id>http://lihaizhou.top/2018/05/14/基于开源框架SlidingUpPanel二次开发/</id>
    <published>2018-05-14T13:52:57.000Z</published>
    <updated>2018-05-15T02:26:16.370Z</updated>
    
    <content type="html"><![CDATA[<p><strong>项目需求</strong><br>写一个SystemUI，默认是隐藏，手指在Launcher界面顶部往下滑动时，SystemUI显示并随着手指滑动高度不断变化，直到往下铺满屏幕</p><p><strong>初步分析</strong><br>最初的想法是在原生SystemUI基础上进行修改，在看了原生SystemUI代码后，word天，原生SystemUI代码量十分庞大且代码结构比较复杂，很多地方耦合比较高，初步估计厘清需要耗费的时间会比较长。于是有了单独写一个的想法，这样代码比较简洁，以后项目上也方便复用。</p><p><strong>设计框架</strong><br>下拉面板显然需要一个自定义布局，这个自定义View高度能够手指滑动变化，ok，理论上并不复杂<br>github兜一圈，看看有没有类似的框架，茫茫大海中找到了一个<code>SlidingUpPanel</code>的开源框架<br>github主页地址: <a href="https://github.com/umano/AndroidSlidingUpPanel" target="_blank" rel="noopener">https://github.com/umano/AndroidSlidingUpPanel</a><br>确认过眼神，是需要找的框架，看了下介绍是一个能够向上滑动的时候往上飞出一个显示区域的控件，star较多且仍在维护，是个靠谱青年，so，就在此基础上进行修改吧，就这么愉快的决定了。</p><p><strong>源码效果图</strong></p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E6%95%88%E6%9E%9C%E5%9B%BE.jpg?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br>最开始下面有一个栏目布局，随着手指拖动高度不断变化直到往上完全铺满屏幕</p><p><strong>Step1：研究框架源码</strong><br>源码中有三支主要文件，如下</p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png?raw=true" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br><br>其中核心文件是<code>SlidingUpPanelLayout.java</code>，对应的是面板的UI界面，继承自ViewGroup，整支文件有1490行之多，好在代码结构清晰明了，阅读起来比较顺利，后面的修改主要针对<code>SlidingUpPanelLayout</code>这支文件以及布局文件</p><p><strong>Step2：实做部分</strong><br>在阅读了源码流程之后，开始撸起袖子干活，主要的修改有下面一些点</p><p><strong>面板默认状态修改</strong><br>PanelState提供的面板五种不同状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PanelState &#123;</span><br><span class="line">     EXPANDED, <span class="comment">//全部展开状态</span></span><br><span class="line">     COLLAPSED, <span class="comment">//默认状态</span></span><br><span class="line">     ANCHORED, <span class="comment">//锚点</span></span><br><span class="line">     HIDDEN, <span class="comment">//隐藏状态</span></span><br><span class="line">     DRAGGING <span class="comment">//拖动状态</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们的systemUI样式只需要其中的<code>EXPANDED</code>，<code>HIDDEN</code>，<code>DRAGGING</code>这三种状态，其他两种状态相关牵扯到的代码都可以移除<br>源码默认的状态是<code>COLLAPSED</code>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Default initial state for the component</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> PanelState DEFAULT_SLIDE_STATE = PanelState.COLLAPSED;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> PanelState mSlideState = DEFAULT_SLIDE_STATE;</span><br></pre></td></tr></table></figure><p>构造函数中从配置值获取了默认状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mSlideState = PanelState.values()[ta.getInt(R.styleable.SlidingUpPanelLayout_umanoInitialState, DEFAULT_SLIDE_STATE.ordinal())];</span><br></pre></td></tr></table></figure><p>后面<code>onMeasure</code>,<code>onLayout</code>将根据<code>mSlideState</code>得值来绘制初始化界面</p><p>我们systemUI初始化界面默认需要是<code>HIDDEN</code>状态，故后面更改xml中的配置值调整为hidden即可</p><p><strong>去掉一栏布局部分(红色部分)</strong></p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E5%8E%BB%E6%8E%89%E5%BA%95%E9%83%A8%E9%BB%98%E8%AE%A4%E9%AB%98%E5%BA%A6.jpg?raw=true" align="left" style=" width:200px;height:200 px"><br><br><br><br><br><br><br><br><br><br><br></p><p>对应<code>PanelHeight</code>这个的值，这个值在构造函数中会去xml中获取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mPanelHeight = ta.getDimensionPixelSize(R.styleable.SystemUiPanel_umanoPanelHeight, -<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>将布局文件中SlidingUpPanelLayout节点下的umanoPanelHeight样式值改为0dp即可  </p><p><strong>默认划出面板方向</strong><br>github上给的demo例子里，是将<code>SlidingUpPanelLayout</code>设置<code>android:gravity=&quot;bottom&quot;</code>，改为<code>top</code>即可</p><p><strong>添加手势事件</strong><br>源码中面板默认不是隐藏，有一定高度，根据点击事件响应展开还是隐藏，我们的systemUI中面板默认是完全隐藏状态，所以就没有了可见的view来响应事件，需要依据手指在顶部滑动的方向以及滑动距离来判断是否打开面板<br><code>SlidingUpPanelLayout</code>这支文件中添加手势滑动事件判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLauncherTouchEvent</span><span class="params">(MotionEvent ev, <span class="keyword">boolean</span> result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                pointDownY1 = ev.getY();</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                pointDownY2 = ev.getY();</span><br><span class="line">                <span class="keyword">if</span> (pointDownY2 - pointDownY1 &gt; FLIP_DISTANCE &amp;&amp; pointDownY1 &lt; FLIP_DISTANCE) &#123;</span><br><span class="line">                    setPanelState(PanelState.EXPANDED);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>隐藏状态下无法划出面板</strong><br>源码设计中对于隐藏状态是无法划出面板的  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//省略部分代码</span></span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class="line">                mIsUnableToDrag = <span class="keyword">false</span>;</span><br><span class="line">                mInitialMotionX = x;</span><br><span class="line">                mInitialMotionY = y;</span><br><span class="line">                <span class="keyword">if</span> (!isViewUnder(mDragView, (<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y)) &#123;</span><br><span class="line">                    mDragHelper.cancel();</span><br><span class="line">                    mIsUnableToDrag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将上面代码中if代码块全部注释掉<br>并将如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTouchEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> mIsTouchEnabled &amp;&amp; mSlideableView != <span class="keyword">null</span> &amp;&amp; mSlideState != PanelState.HIDDEN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉<code>mSlideState != PanelState.HIDDEN</code>判断条件<br>因为源码设计是当面板状态为hidden时，isTouchEnabled返回false，而setDragView中滑动面板前会先判断isTouchEnabled值，如果为false，直接return  </p><p><strong>存在概率性卡在半拉状态</strong><br>项目上线后测试反馈过一个问题，测试步骤比较风骚，手指按住不放下拉到一半左右位置快速转过一个弧度上滑并松开，概率性出现面板卡在一个点上  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDragStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (mDragHelper != <span class="keyword">null</span> &amp;&amp; mDragHelper.getViewDragState() == ViewDragHelper.STATE_IDLE) &#123;</span><br><span class="line">         mSlideOffset = computeSlideOffset(mSlideableView.getTop());</span><br><span class="line">         <span class="comment">//applyParallaxForCurrentSlideOffset();</span></span><br><span class="line">         <span class="keyword">if</span> (mSlideOffset == <span class="number">1</span>) &#123;</span><br><span class="line">             updateObscuredViewVisibility();</span><br><span class="line">             setPanelStateInternal(PanelState.EXPANDED);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSlideOffset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">             setPanelStateInternal(PanelState.HIDDEN);</span><br><span class="line">             mSlideableView.setVisibility(View.INVISIBLE);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSlideOffset == <span class="number">0</span>) &#123;</span><br><span class="line">             setPanelStateInternal(PanelState.HIDDEN);</span><br><span class="line">             mSlideableView.setVisibility(View.INVISIBLE);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             setPanelStateInternal(PanelState.ANCHORED);</span><br><span class="line">             mSlideableView.setVisibility(View.INVISIBLE);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>问题复现时，<code>mSlideOffset</code>大于0且小于1，此时会走到setPanelStateInternal(PanelState.ANCHORED);即将面板抛锚到固定点上，界面上表现为卡在一个半拉的状态，这显然不是我们的systemUI需要的，将此处更改为setPanelStateInternal(PanelState.HIDDEN);</p><p><strong>核心API</strong><br>addPanelSlideListener(面板状态的监测)其中复写两个方法:onPanelSlide(获取到偏移量)和onPanelStateChanged(获取面板状态)<br>界面层主要用到了这个方法</p><p><strong>移除无关代码</strong><br>如下修改均针对SlidingUpPanelLayout这支文件<br>1.将setDragView中将对mDragView的点击事件相关逻辑全部移除<br>2.构造函数中将setgravity相关代码移除<br>3.移除shadow所有的相关的代码<br>4.移除ANCHORED相关的代码逻辑，因为我们的systemUI并不要在下拉过程中卡在某一高度<br>5.移除drawChild以及draw(Canvas c)代码</p><p><strong>布局文件</strong><br>如下是针对我们的项目定制修改后的布局(项目名相关打了马赛克，我也不知道为啥这么做，反正就是这么做了) </p><p><img src="https://github.com/hellolihaizhou/hellolihaizhou.github.io/blob/master/2018/05/14/%E5%9F%BA%E4%BA%8E%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6SlidingUpPanel%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E5%B8%83%E5%B1%80%E6%96%87%E4%BB%B6.png?raw=true" align="left" style=" width:500px;height:300 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>  </p><p>id为dragView的内容代表滑动的内容，id为viewpager代表的是面板隐藏后的界面内容即不随手指滑动的内容  </p><p>注:<br>SlidingUpPanelLayout为布局根元素，请确保它有且只有两个子view，第一个是主要布局，即固定不随手指滑动的区域，第二个滑动面板布局<br>如果子VIew不为2，则会抛出异常  </p><pre><code class="java"><span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>{    <span class="comment">//省略部分代码</span>     <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();     <span class="keyword">if</span> (childCount != <span class="number">2</span>) {         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sliding up panel layout must have exactly 2 children!"</span>);     }    <span class="comment">//省略部分代码</span> }</code></pre><p>起初遇到这个异常，看了源码才知道有这个限制，不过可以修改源码突破这个这个限制，有源码了不起嘛？嗨呀嗨呀，十分了不起，有源码真的可以为所欲为，哈哈哈</p><hr><font color="#000000" size="2" face="楷体">住所，晚上，汗衫，电脑前，听着歌，胖橘在门外叫</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;项目需求&lt;/strong&gt;&lt;br&gt;写一个SystemUI，默认是隐藏，手指在Launcher界面顶部往下滑动时，SystemUI显示并随着手指滑动高度不断变化，直到往下铺满屏幕&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;初步分析&lt;/strong&gt;&lt;br&gt;最初的想法是在原
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>低内存引发的一点思考</title>
    <link href="http://lihaizhou.top/2018/05/13/%E4%BD%8E%E5%86%85%E5%AD%98%E5%BC%95%E5%8F%91%E7%9A%84LowMemoryKiller%E6%80%9D%E8%80%83/"/>
    <id>http://lihaizhou.top/2018/05/13/低内存引发的LowMemoryKiller思考/</id>
    <published>2018-05-13T12:37:55.000Z</published>
    <updated>2018-05-13T13:46:38.321Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题平台</strong><br><code>Android 7.1.1</code>  <code>MT6739</code></p><p><strong>问题现象</strong><br><code>需要常驻的进程经常被kill，界面操作不流畅</code></p><p><strong>日志分析</strong><br>鉴于当前的手表机器内存512M，机器运行一段时间后，界面不流畅，第一时间怀疑是此时的内存比较吃紧，LMK频繁被触发kill进程，LMK的工作本身比较费时间，会拖慢系统运行速度。查看kernel日志后，发现有很多LMK触发的信息，ok，果然如猜想一样</p><p><strong>LMK机制简介</strong><br>在系统内存不足的情况下，系统开始依据自身的一套进程回收机制来判断要kill掉哪些进程，以腾出内存来供给需要的app。<br>总的来说，进程的<code>oom_adj</code>越大，表示此进程优先级越低，越容易被杀回收；越小，表示进程优先级越高，越不容易被杀回收，kill进程是通过发送SIGKILL信息。这套杀进程回收内存的机制就叫<code>Low Memory Killer</code> ，简称<code>LMK</code>，它是基于Linux内核的<code>OOM Killer</code>机制诞生<br>如果LMK都无法释放出足够的内存空间，那么当为新的进程分配应用程序时将发生<code>Out of Memory</code>异常，这时候<code>OOM_killer</code>开始工作，<code>OOM_killer</code>会在系统内存耗尽的情况下，启用自己算法有选择性的kill 掉一些进程</p><p><strong>常见的提升应用存活率</strong><br>这种问题老生常谈，网上资料一抓一大把，其中不乏各种旁门左道，诸如一像素，互相唤醒，防杀死重启服务之类。<br>这些方法不一定通用，是否奏效依赖Android版本以及手机厂商。<br>比较常规的做法是标记为系统应用，相比于三方应用来讲，系统应用的优先级高一些，当然这个做法前提是有条件且需要。<br>另外一种常见的方式是加入<code>android:persistent=&quot;true&quot;</code>属性，这种方式只对系统应用奏效，这样做的目的是使进程持续占据 Memory不被杀死，现在的512内存手表项目中的Launcher里使用了，该种方式的使用务必谨慎，切记不可滥用<br>还有一个就是降低应用的占用内存，LMK工作时往往会先挑肥的来kill</p><p><strong>如何判断某个应用的进程的oom_adj</strong><br>两个shell命令即可<br>1.<code>ps | grep PackageName</code><br>获取到指定应用的进程ID<br>2.<code>cat /proc/</code><br>进程ID/oom_adj获取到<code>oom_adj</code>数值</p><p><strong>如何判别LMK是否太频繁呢</strong><br>这个其实没有什么标准，从过往的情况来看，看<code>kernel日志</code>中LMK触发的次数，1分钟超过20次就是非常多了</p><p><strong>LMK kill进程顺序的判别依据</strong><br>根据adj的值以及占用内存值<br>现在不少程序会做成进程组形式，以前的项目上有遇到过，一个进程被kill了，另一个好兄弟再把它唤起来，这种互相唤醒的好基友方式会导致RAM无法真正释放，释放的 RAM 马上被吃掉。</p><p><strong>如何修改系统层级的LMK阈值</strong><br>这种修改做法比较少见，之前项目有过一次调整了minfree的值<br>LMK的阈值分两个数组，一个是adj数组，描述process对应的oom_adj，另外一个是minfree数组，描述process所对应的memory的阈值<br>上层可以直接通过读写:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/sys/<span class="keyword">module</span>/lowmemorykiller/parameters/adj</span><br><span class="line">/sys/<span class="keyword">module</span>/lowmemorykiller/parameters/minfree</span><br></pre></td></tr></table></figure></p><p>来进行调整，<code>minfree</code>以KB 为单位<br>当AMS起来后，将根据屏幕分辨率以及内存大小通过调用<code>updateOomLevel</code>方法(<font color="#000000" size="2" face="楷体">Frameworks/base/services/java/com/android/server/am/ProcessList.java</font>)来调整默认的LMK的阈值</p><p><strong>分析LMK问题的常用shell命令</strong><br>如下是分析LMK问题时常用的命令，看名字比较好理解就不一一解释了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb shell ps -t &gt; ps.txt</span><br><span class="line">adb shell procrank -s &gt; procrank.txt  </span><br><span class="line">adb shell cat /proc/sys/vm/swappiness  </span><br><span class="line">adb shell cat /proc/meminfo &gt; meminfo.txt</span><br><span class="line">adb shell cat /proc/buddyinfo &gt; buddyinfo.txt</span><br><span class="line">adb shell dumpsys meminfo &gt; dumpsysmemoryinfo.txt</span><br><span class="line">adb shell cat /sys/<span class="keyword">module</span>/lowmemorykiller/parameters/adj &gt; adj.txt</span><br><span class="line">adb shell cat /sys/<span class="keyword">module</span>/lowmemorykiller/parameters/minfree &gt; minfree.txt</span><br></pre></td></tr></table></figure></p><p><strong>小结</strong><br>优先从应用自身角度触发，尽可能降低应用的占用内存，不可一上来就搞一些旁门左道，慎重调整进程的优先级！切记切记<br>像我现在遇到的这个512内存的项目，很多不需要常驻的进程也将自己的优先级设置的很高，打印出来的adj清一色都很低，几乎和systemUI持平，这点实在太不可取，这导致了LMK触发时有些该杀的进程没有kill，反而一些很重要的进程被kill<br>原则上不是用户可以感知的进程没必要将优先级拉的很高，除非是慎重考虑再三觉得十分重要的进程，可以考虑拉高优先级</p><hr><font color="#000000" size="2" face="楷体">住所，电脑前，汗衫，顶着酷似三胖的发型</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题平台&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Android 7.1.1&lt;/code&gt;  &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题现象&lt;/strong&gt;&lt;br&gt;&lt;code&gt;需要常驻的进程经常被kill，界面操作不流畅&lt;/co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个定屏重启的问题分析</title>
    <link href="http://lihaizhou.top/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>http://lihaizhou.top/2018/05/11/一个定屏重启的问题分析/</id>
    <published>2018-05-11T09:26:17.000Z</published>
    <updated>2018-05-13T13:12:30.008Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题平台</strong><br><code>Android 7.1.1</code>    <code>MT6739</code></p><p><strong>问题现象</strong><br><code>界面定屏并重启</code></p><p><strong>初步分析</strong><br>拿到完整的MTK日志，该问题是小米内测发现，了解到当时测试人员的操作就是随便划着划着就卡住了然后重启了，ok，还是乖乖看日志吧<br>日志目录如下：<br><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E6%97%A5%E5%BF%97%E7%9B%AE%E5%BD%95.png" align="left" style=" width:300px;height:50 px"><br><br><br><br>看到了aee_exp_backup这个文件夹，一切尽在意料之中，进去看看<br><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/db%E6%96%87%E4%BB%B6.png" align="left" style=" width:300px;height:23 px"><br><br></p><p align="left">是一个JE的问题导致的重启，猜测是systemServer挂了</p>  <p><strong>Step1：分析日志</strong><br>拿出看家小工具GAT，对于db文件的分析离不开GAT，用GAT解析下来究竟发生了what让我们的小机器重启了呢，解析后文件目录如下</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/db%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E7%9B%AE%E5%BD%95.png" align="left" style=" width:900px;height:500 px"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>(这里将产品名称马赛克一下，我也不知道为什么这么做，反正就是这么做了，哈哈哈（￣︶￣）↗)</p><p>这里可以看到果然是systemServer进程重启了，发生问题点在systemServer进程中，接着看原因，是个数组越界异常，下标为1，数组长度为2(见上图红色框)，唉？没越界啊，为什么会报越界呢？</p><p>分析具体的堆栈代码之前，先看下日志判断下死机发生时用户当时具体做了些啥  </p><p>首先看下main日志，找到IndexOutOfBoundsException发生时间点<code>09:43:33.818111</code><br>测试人员使用的是user版本，user版本的kernel日志不会打出每行时间戳，userdebug以及eng版本的kernel日志会有具体的时间戳，所以分析user版本的kernel日志会稍稍麻烦一点，通过搜索关键字”UTC”来查看时间戳，这份日志中UTC时间戳每隔二十秒打印<br>异常发生时间点09:43:33.818111，所以是在如下两行之间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Line <span class="number">176236</span>: &lt;7&gt;[ 1762.546722]  (0)[249:wdtk-0][thread:249][RT:1762546695292] 2018-04-26 01:43:27.105173 UTC;android time 2018-04-26 09:43:27.105173</span><br><span class="line">Line 179752: &lt;7&gt;[ 1782.556698]  (0)[249:wdtk-0][thread:249][RT:1782556690801] 2018-04-26 01:43:47.115173 UTC;android time 2018-04-26 09:43:47.115173</span><br></pre></td></tr></table></figure></p><p><code>9.43.27</code>这行往下数6s左右，大概在<code>178800</code>行附近，ok，去这个行数附近看看<br>在<code>178891</code>行看到了如下信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">7</span>&gt;[ <span class="number">1777.097776</span>] -(<span class="number">0</span>)[<span class="number">1085</span>:android.ui][signal][<span class="number">1085</span>:android.ui]send death sig <span class="number">9</span> to[<span class="number">1068</span>:system_server:R]</span><br></pre></td></tr></table></figure></p><p>sig 9代表SIGNAL_KILL，这里杀掉了system_server进程，在此上面有大量连续的手指触摸日志信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.923619</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: finger dwon [<span class="number">00</span>] x = <span class="number">302</span>, y = <span class="number">148</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.923695</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler before_event  foubin1 irq_flag = <span class="number">8490</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.923712</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler after_event  foubin1 irq_flag = <span class="number">8491</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.925815</span>]  (<span class="number">1</span>)[<span class="number">4051</span>:kworker/u8:<span class="number">0</span>][DISP][xun] _ovl_fence_release_callback </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.933972</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler before_disable_irq foubin1 irq_flag = <span class="number">8491</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.934001</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler after_disable_irq  foubin1 irq_flag = <span class="number">8492</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.934944</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: touch_info.status=<span class="number">0x904</span></span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.935112</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: finger dwon [<span class="number">00</span>] x = <span class="number">303</span>, y = <span class="number">143</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.935157</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler before_event  foubin1 irq_flag = <span class="number">8492</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.935169</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]:  touch_event_handler after_event  foubin1 irq_flag = <span class="number">8493</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.938970</span>]  (<span class="number">0</span>)[<span class="number">412</span>:disp_queue_P0][DISP]primary_display_trigger_nolock+++blocking=<span class="number">0</span> ,dst_mode=<span class="number">0</span>,dispmode = <span class="number">0</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.939000</span>]  (<span class="number">0</span>)[<span class="number">412</span>:disp_queue_P0][DISP]primary_display_trigger_nolock pgc-&gt;state = <span class="number">240</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.939014</span>]  (<span class="number">0</span>)[<span class="number">412</span>:disp_queue_P0][DISP]primary_display_trigger_nolock pgc-&gt;session_mode = <span class="number">1</span> </span><br><span class="line">&lt;<span class="number">6</span>&gt;[ <span class="number">1772.942542</span>]  (<span class="number">0</span>)[<span class="number">4051</span>:kworker/u8:<span class="number">0</span>][DISP][xun] _ovl_fence_release_callback </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.946983</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler before_disable_irq foubin1 irq_flag = <span class="number">8493</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.947013</span>] -(<span class="number">1</span>)[<span class="number">0</span>:swapper/<span class="number">1</span>][ zinitix ]:  tpd_eint_interrupt_handler after_disable_irq  foubin1 irq_flag = <span class="number">8494</span> </span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.947971</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: touch_info.status=<span class="number">0x9</span></span><br><span class="line">&lt;<span class="number">4</span>&gt;[ <span class="number">1772.948138</span>]  (<span class="number">1</span>)[<span class="number">245</span>:mtk-tpd][ zinitix ]: finger [<span class="number">00</span>] up <span class="number">11111</span></span><br></pre></td></tr></table></figure></p><p>可见当时测试人员与屏幕一直在互动，符合测试人员所说的当时在滑动屏幕</p><p><strong>Step2：跟踪源码流程</strong><br>看具体的堆栈信息</p><p><img src="https://raw.githubusercontent.com/hellolihaizhou/hellolihaizhou.github.io/master/2018/05/11/%E4%B8%80%E4%B8%AA%E5%AE%9A%E5%B1%8F%E9%87%8D%E5%90%AF%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/%E5%85%B7%E4%BD%93%E5%A0%86%E6%A0%88.png" align="left" style=" width:700px;height:300 px"><br><br><br><br><br><br><br></p><p>emmm…没有看到具体的应用堆栈信息，都是framework里的堆栈，其实看到这里心里大概有数了，应该不是应用的问题，而是系统层面的问题</p><p>好的，撸起袖子打开源码，开始看具体的代码</p><font color="#000000" size="2" face="楷体">libcore/ojluni/src/main/java/java/util/ArrayList.java</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里抛出了越界异常，接着往下看</p><font color="#000000" size="2" face="楷体">/frameworks/base/services/core/java/com/android/server/wm/DisplayContent.java</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find the task whose outside touch area (for resizing) (x, y) falls within.</span></span><br><span class="line"><span class="comment"> * Returns null if the touch doesn't fall into a resizing area.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Task <span class="title">findTaskForControlPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> delta = mService.dipToPixel(RESIZE_HANDLE_WIDTH_IN_DP, mDisplayMetrics);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> stackNdx = mStacks.size() - <span class="number">1</span>; stackNdx &gt;= <span class="number">0</span>; --stackNdx) &#123;</span><br><span class="line">        TaskStack stack = mStacks.get(stackNdx);</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里出现了异常，理论上不会出现越界的问题，不过如果是多线程访问的情况，鉴于这里并没有同步机制，<br>mStacks又是公用的，很多地方会对其增删修改，这样的话就难以保证不会出现异常了</p><p><strong>问题小结：</strong><br>这个问题看起来是谷歌的bug，避免这种情况可以选择加同步机制。同步机制难免会牺牲性能，不过也增强了代码的稳定性<br>考虑到这个问题至今只是出现了一次，后续没有再出现过，选择忽略不做修改</p><hr><font color="#000000" size="2" face="楷体">本文写于公司，电脑前，慵懒的午后</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;问题平台&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Android 7.1.1&lt;/code&gt;    &lt;code&gt;MT6739&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题现象&lt;/strong&gt;&lt;br&gt;&lt;code&gt;界面定屏并重启&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>忧虑下的感悟</title>
    <link href="http://lihaizhou.top/2018/05/04/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0--%E9%A1%BF%E6%82%9F/"/>
    <id>http://lihaizhou.top/2018/05/04/第一篇文章--顿悟/</id>
    <published>2018-05-04T00:30:00.000Z</published>
    <updated>2018-05-13T13:15:18.161Z</updated>
    
    <content type="html"><![CDATA[<p>这是该网址写的第一篇文章，想写点东西上来，算是对过去的一些回顾以及对接下来一段时间的计划想法</p><p><strong>过去一年状态</strong><br>过去的一年，经历了一些事，比较大的事：<code>无锡置业</code>，<code>重回单身狗</code>，<code>换了工作</code></p><ul><li><p>无锡置业<br>买房对我的影响还是比较大的，开始的一段时间积蓄一夜回到解放前，不过心里也踏实了许多，算是明智的选择</p></li><li><p>重回单身狗<br>这件事对我的触动很大，比较长的一段时间都比较沮丧，觉得自己很是没用。后来有些事情慢慢想通了，也就放下了。她是个好姑娘，单纯而又善良，祝愿她能过得开心</p></li><li><p>换工作<br>当时正准备买房了，离职一方面是薪资的考虑，上家公司是那种典型的国企氛围从不加班，这在做通讯行业里很是少见。没有条条框框的规则，项目周期比较长，所以工作内容没有压力，只是氛围稍稍沉闷了点，总得来说还是很不错。</p></li></ul><p><strong>当前状态</strong><br>现在的公司是个小公司，整个氛围比较轻松，也不沉闷。工作内容的话，除了项目开始时自己写了一两个模块，后面的工作主要是维护自己写的代码。<br>总得来说工作内容比较简单，说简单倒不是因为我技术好，的确是工作内容比较简单。</p><p>现在开始逐渐意识到，现状的处境其实很危险，像是在温水煮青蛙，没有足够的挑战，时间久了，人会变得懒散，缺乏足够的驱动力去学习，一直呆在大缸里，等有一天想跳出去看看外边的世界，却发现已经没有了力气。</p><p>过去的一年过得真的是太安逸，也太懒散。想起毕业那会，也是努力的奋斗过，每周都会列出学习计划，为什么后来就没有坚持下来了呢。是膨胀了？ 好像是的，身体的发福让我日益膨胀，迷失自我。</p><p><strong>后续改善计划</strong><br>接下来的时间会通过该网址持续更新技术文章，多思考多总结。具体的行动计划大纲如下</p><ol><li><p>每天学习时间满4小时</p></li><li><p>每周写两篇技术文章</p></li><li><p>每个月写一个月度总结</p></li></ol><p>鉴于过往的经历，很多时候计划是列出了，执行的时候却不能至始至终的执行，可恶的惰性啊。</p><p>后面每个月的月度总结会说明本月的执行情况，如果月度总结也没写的话，那我多半是废了，无可救药了。</p><p><strong>以此文为证！You can do it ！come on！ steven！</strong></p><p><strong>厚积而薄发！</strong></p><hr><font color="#000000" size="2" face="楷体">写于2018.5.4号11号线地铁上, 站着, 打完本文</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是该网址写的第一篇文章，想写点东西上来，算是对过去的一些回顾以及对接下来一段时间的计划想法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;过去一年状态&lt;/strong&gt;&lt;br&gt;过去的一年，经历了一些事，比较大的事：&lt;code&gt;无锡置业&lt;/code&gt;，&lt;code&gt;重回单身狗&lt;/code&gt;，
      
    
    </summary>
    
    
  </entry>
  
</feed>
